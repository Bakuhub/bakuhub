datasource db {
  // url      = "file:./dev.db"

  url      = env("DATABASE_URL")
  provider = "postgresql"
}

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
  output   = "../prisma/generated/type-graphql"
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(uuid())
  name          String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  premise       Premise[]
  thread        Thread[]
  vision        Vision[]
  timeline      Timeline[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Premise {
  id                  String                @id @default(uuid())
  title               String                @db.VarChar(255)
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  status              PremiseStatus
  author              User?                 @relation(fields: [authorId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  authorId            String?
  vision              Vision[]
  premisesOnTimelines PremisesOnTimelines[]
  tagsOnPremises      TagsOnPremises[]
  threadsOnPremise    ThreadsOnPremise[]

}

model Vision {
  id              String            @id @default(uuid())
  title           String            @db.VarChar(255)
  activityDate    DateTime?
  description     String?
  createdAt       DateTime          @default(now())
  reference       String?
  author          User?             @relation(fields: [authorId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  authorId        String?
  premise         Premise           @relation(fields: [premiseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  thumbnail       String?
  premiseId       String
  draftMode       Boolean           @default(false)
  prevVisionId    String?
  prevVision      Vision?           @relation("VisionHistory", fields: [prevVisionId], references: [id])
  nextVision      Vision[]          @relation("VisionHistory")
  threadsOnVision ThreadsOnVision[]
  mergeRequest    MergeRequest?
}

model MergeRequest {
  id          String             @id @default(cuid())
  title       String             @db.VarChar(255)
  description String?
  status      MergeRequestStatus @default(OPEN)
  vision      Vision             @relation(fields: [visionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  visionId    String             @unique
}

model Timeline {
  id                  String                @id @default(uuid())
  title               String                @db.VarChar(255)
  description         String
  status              String
  author              User                  @relation(fields: [authorId], references: [id], onDelete: SetNull, onUpdate: Cascade)
  authorId            String
  premisesOnTimelines PremisesOnTimelines[]
  tagsOnTimelines     TagsOnTimelines[]
  threadsOnTimeline   ThreadsOnTimeline[]

}

model Tag {
  id              Int               @id @default(autoincrement())
  label           String            @unique @db.VarChar(255)
  tagsOnPremises  TagsOnPremises[]
  tagsOnTimelines TagsOnTimelines[]
}

model TagsOnPremises {
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tagId      Int
  premise    Premise  @relation(fields: [premiseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  premiseId  String
  assignedAt DateTime @default(now())

  @@id([tagId, premiseId])
}

model TagsOnTimelines {
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  tagId      Int
  timeline   Timeline @relation(fields: [timelineId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  timelineId String
  assignedAt DateTime @default(now())

  @@id([tagId, timelineId])
}

model PremisesOnTimelines {
  timeline   Timeline @relation(fields: [timelineId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  timelineId String
  premise    Premise  @relation(fields: [premiseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  premiseId  String
  assignedAt DateTime @default(now())

  @@id([premiseId, timelineId])
}

model Snapshot {
  id        String   @id @unique @default(uuid())
  createdAt DateTime @default(now())
  versionId String  @db.VarChar(255)
  s3Url     String  @db.VarChar(255)
  sourceUrl String 
  caption   String 
}

//
//model MainCode {
//  id String @id @unique @default(uuid())
//  mainThreadType MainThreadType
//  relatedId String
//}

model Thread {
  id             String    @id @default(uuid())
  title          String    @db.VarChar(255)
  activityDate   DateTime?
  description    String?
  createdAt      DateTime  @default(now())
  reference      String?
  author         User?     @relation(fields: [authorId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  authorId       String?
  parentThreadId String?
  parentThread   Thread?   @relation("ParentThreadChildThreads", fields: [parentThreadId], references: [id])
  childThreads   Thread[]  @relation("ParentThreadChildThreads")

  threadsOnPremise  ThreadsOnPremise?
  threadsOnTimeline ThreadsOnTimeline?
  threadsOnVision   ThreadsOnVision?
}

model ThreadsOnPremise {
  thread     Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  threadId   String   @unique
  premise    Premise  @relation(fields: [premiseId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  premiseId  String
  assignedAt DateTime @default(now())

  @@id([threadId, premiseId])
}

model ThreadsOnTimeline {
  thread     Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  threadId   String   @unique
  timeline   Timeline @relation(fields: [timelineId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  timelineId String
  assignedAt DateTime @default(now())

  @@id([threadId, timelineId])
}

model ThreadsOnVision {
  thread     Thread   @relation(fields: [threadId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  threadId   String   @unique
  vision     Vision   @relation(fields: [visionId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  visionId   String
  assignedAt DateTime @default(now())

  @@id([threadId, visionId])
}

enum PremiseStatus {
  RUMOUR
  UNVERIFIED
  REFERENCE_PROVIDED
  VERIFIED
  MISINFORMATION
}

enum MergeRequestStatus {
  OPEN
  CLOSE
  MERGED
}

enum Role {
  USER
  ADMIN
}
