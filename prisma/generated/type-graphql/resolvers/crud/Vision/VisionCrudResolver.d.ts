import { GraphQLResolveInfo } from "graphql";
import { AggregateVisionArgs } from "./args/AggregateVisionArgs";
import { CreateManyVisionArgs } from "./args/CreateManyVisionArgs";
import { CreateVisionArgs } from "./args/CreateVisionArgs";
import { DeleteManyVisionArgs } from "./args/DeleteManyVisionArgs";
import { DeleteVisionArgs } from "./args/DeleteVisionArgs";
import { FindFirstVisionArgs } from "./args/FindFirstVisionArgs";
import { FindManyVisionArgs } from "./args/FindManyVisionArgs";
import { FindUniqueVisionArgs } from "./args/FindUniqueVisionArgs";
import { GroupByVisionArgs } from "./args/GroupByVisionArgs";
import { UpdateManyVisionArgs } from "./args/UpdateManyVisionArgs";
import { UpdateVisionArgs } from "./args/UpdateVisionArgs";
import { UpsertVisionArgs } from "./args/UpsertVisionArgs";
import { Vision } from "../../../models/Vision";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateVision } from "../../outputs/AggregateVision";
import { VisionGroupBy } from "../../outputs/VisionGroupBy";
export declare class VisionCrudResolver {
    vision(ctx: any, info: GraphQLResolveInfo, args: FindUniqueVisionArgs): Promise<Vision | null>;
    findFirstVision(ctx: any, info: GraphQLResolveInfo, args: FindFirstVisionArgs): Promise<Vision | null>;
    visions(ctx: any, info: GraphQLResolveInfo, args: FindManyVisionArgs): Promise<Vision[]>;
    createVision(ctx: any, info: GraphQLResolveInfo, args: CreateVisionArgs): Promise<Vision>;
    createManyVision(ctx: any, info: GraphQLResolveInfo, args: CreateManyVisionArgs): Promise<AffectedRowsOutput>;
    deleteVision(ctx: any, info: GraphQLResolveInfo, args: DeleteVisionArgs): Promise<Vision | null>;
    updateVision(ctx: any, info: GraphQLResolveInfo, args: UpdateVisionArgs): Promise<Vision | null>;
    deleteManyVision(ctx: any, info: GraphQLResolveInfo, args: DeleteManyVisionArgs): Promise<AffectedRowsOutput>;
    updateManyVision(ctx: any, info: GraphQLResolveInfo, args: UpdateManyVisionArgs): Promise<AffectedRowsOutput>;
    upsertVision(ctx: any, info: GraphQLResolveInfo, args: UpsertVisionArgs): Promise<Vision>;
    aggregateVision(ctx: any, info: GraphQLResolveInfo, args: AggregateVisionArgs): Promise<AggregateVision>;
    groupByVision(ctx: any, info: GraphQLResolveInfo, args: GroupByVisionArgs): Promise<VisionGroupBy[]>;
}
