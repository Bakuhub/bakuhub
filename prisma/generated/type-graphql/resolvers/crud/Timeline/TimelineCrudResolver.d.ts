import { GraphQLResolveInfo } from "graphql";
import { AggregateTimelineArgs } from "./args/AggregateTimelineArgs";
import { CreateManyTimelineArgs } from "./args/CreateManyTimelineArgs";
import { CreateTimelineArgs } from "./args/CreateTimelineArgs";
import { DeleteManyTimelineArgs } from "./args/DeleteManyTimelineArgs";
import { DeleteTimelineArgs } from "./args/DeleteTimelineArgs";
import { FindFirstTimelineArgs } from "./args/FindFirstTimelineArgs";
import { FindManyTimelineArgs } from "./args/FindManyTimelineArgs";
import { FindUniqueTimelineArgs } from "./args/FindUniqueTimelineArgs";
import { GroupByTimelineArgs } from "./args/GroupByTimelineArgs";
import { UpdateManyTimelineArgs } from "./args/UpdateManyTimelineArgs";
import { UpdateTimelineArgs } from "./args/UpdateTimelineArgs";
import { UpsertTimelineArgs } from "./args/UpsertTimelineArgs";
import { Timeline } from "../../../models/Timeline";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateTimeline } from "../../outputs/AggregateTimeline";
import { TimelineGroupBy } from "../../outputs/TimelineGroupBy";
export declare class TimelineCrudResolver {
    timeline(ctx: any, info: GraphQLResolveInfo, args: FindUniqueTimelineArgs): Promise<Timeline | null>;
    findFirstTimeline(ctx: any, info: GraphQLResolveInfo, args: FindFirstTimelineArgs): Promise<Timeline | null>;
    timelines(ctx: any, info: GraphQLResolveInfo, args: FindManyTimelineArgs): Promise<Timeline[]>;
    createTimeline(ctx: any, info: GraphQLResolveInfo, args: CreateTimelineArgs): Promise<Timeline>;
    createManyTimeline(ctx: any, info: GraphQLResolveInfo, args: CreateManyTimelineArgs): Promise<AffectedRowsOutput>;
    deleteTimeline(ctx: any, info: GraphQLResolveInfo, args: DeleteTimelineArgs): Promise<Timeline | null>;
    updateTimeline(ctx: any, info: GraphQLResolveInfo, args: UpdateTimelineArgs): Promise<Timeline | null>;
    deleteManyTimeline(ctx: any, info: GraphQLResolveInfo, args: DeleteManyTimelineArgs): Promise<AffectedRowsOutput>;
    updateManyTimeline(ctx: any, info: GraphQLResolveInfo, args: UpdateManyTimelineArgs): Promise<AffectedRowsOutput>;
    upsertTimeline(ctx: any, info: GraphQLResolveInfo, args: UpsertTimelineArgs): Promise<Timeline>;
    aggregateTimeline(ctx: any, info: GraphQLResolveInfo, args: AggregateTimelineArgs): Promise<AggregateTimeline>;
    groupByTimeline(ctx: any, info: GraphQLResolveInfo, args: GroupByTimelineArgs): Promise<TimelineGroupBy[]>;
}
