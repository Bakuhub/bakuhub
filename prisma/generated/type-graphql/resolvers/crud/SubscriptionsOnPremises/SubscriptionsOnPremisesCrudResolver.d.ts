import { GraphQLResolveInfo } from "graphql";
import { AggregateSubscriptionsOnPremisesArgs } from "./args/AggregateSubscriptionsOnPremisesArgs";
import { CreateManySubscriptionsOnPremisesArgs } from "./args/CreateManySubscriptionsOnPremisesArgs";
import { CreateSubscriptionsOnPremisesArgs } from "./args/CreateSubscriptionsOnPremisesArgs";
import { DeleteManySubscriptionsOnPremisesArgs } from "./args/DeleteManySubscriptionsOnPremisesArgs";
import { DeleteSubscriptionsOnPremisesArgs } from "./args/DeleteSubscriptionsOnPremisesArgs";
import { FindFirstSubscriptionsOnPremisesArgs } from "./args/FindFirstSubscriptionsOnPremisesArgs";
import { FindManySubscriptionsOnPremisesArgs } from "./args/FindManySubscriptionsOnPremisesArgs";
import { FindUniqueSubscriptionsOnPremisesArgs } from "./args/FindUniqueSubscriptionsOnPremisesArgs";
import { GroupBySubscriptionsOnPremisesArgs } from "./args/GroupBySubscriptionsOnPremisesArgs";
import { UpdateManySubscriptionsOnPremisesArgs } from "./args/UpdateManySubscriptionsOnPremisesArgs";
import { UpdateSubscriptionsOnPremisesArgs } from "./args/UpdateSubscriptionsOnPremisesArgs";
import { UpsertSubscriptionsOnPremisesArgs } from "./args/UpsertSubscriptionsOnPremisesArgs";
import { SubscriptionsOnPremises } from "../../../models/SubscriptionsOnPremises";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateSubscriptionsOnPremises } from "../../outputs/AggregateSubscriptionsOnPremises";
import { SubscriptionsOnPremisesGroupBy } from "../../outputs/SubscriptionsOnPremisesGroupBy";
export declare class SubscriptionsOnPremisesCrudResolver {
    findUniqueSubscriptionsOnPremises(ctx: any, info: GraphQLResolveInfo, args: FindUniqueSubscriptionsOnPremisesArgs): Promise<SubscriptionsOnPremises | null>;
    findFirstSubscriptionsOnPremises(ctx: any, info: GraphQLResolveInfo, args: FindFirstSubscriptionsOnPremisesArgs): Promise<SubscriptionsOnPremises | null>;
    findManySubscriptionsOnPremises(ctx: any, info: GraphQLResolveInfo, args: FindManySubscriptionsOnPremisesArgs): Promise<SubscriptionsOnPremises[]>;
    createSubscriptionsOnPremises(ctx: any, info: GraphQLResolveInfo, args: CreateSubscriptionsOnPremisesArgs): Promise<SubscriptionsOnPremises>;
    createManySubscriptionsOnPremises(ctx: any, info: GraphQLResolveInfo, args: CreateManySubscriptionsOnPremisesArgs): Promise<AffectedRowsOutput>;
    deleteSubscriptionsOnPremises(ctx: any, info: GraphQLResolveInfo, args: DeleteSubscriptionsOnPremisesArgs): Promise<SubscriptionsOnPremises | null>;
    updateSubscriptionsOnPremises(ctx: any, info: GraphQLResolveInfo, args: UpdateSubscriptionsOnPremisesArgs): Promise<SubscriptionsOnPremises | null>;
    deleteManySubscriptionsOnPremises(ctx: any, info: GraphQLResolveInfo, args: DeleteManySubscriptionsOnPremisesArgs): Promise<AffectedRowsOutput>;
    updateManySubscriptionsOnPremises(ctx: any, info: GraphQLResolveInfo, args: UpdateManySubscriptionsOnPremisesArgs): Promise<AffectedRowsOutput>;
    upsertSubscriptionsOnPremises(ctx: any, info: GraphQLResolveInfo, args: UpsertSubscriptionsOnPremisesArgs): Promise<SubscriptionsOnPremises>;
    aggregateSubscriptionsOnPremises(ctx: any, info: GraphQLResolveInfo, args: AggregateSubscriptionsOnPremisesArgs): Promise<AggregateSubscriptionsOnPremises>;
    groupBySubscriptionsOnPremises(ctx: any, info: GraphQLResolveInfo, args: GroupBySubscriptionsOnPremisesArgs): Promise<SubscriptionsOnPremisesGroupBy[]>;
}
