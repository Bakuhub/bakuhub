import { GraphQLResolveInfo } from "graphql";
import { AggregateTagsOnTimelinesArgs } from "./args/AggregateTagsOnTimelinesArgs";
import { CreateManyTagsOnTimelinesArgs } from "./args/CreateManyTagsOnTimelinesArgs";
import { CreateTagsOnTimelinesArgs } from "./args/CreateTagsOnTimelinesArgs";
import { DeleteManyTagsOnTimelinesArgs } from "./args/DeleteManyTagsOnTimelinesArgs";
import { DeleteTagsOnTimelinesArgs } from "./args/DeleteTagsOnTimelinesArgs";
import { FindFirstTagsOnTimelinesArgs } from "./args/FindFirstTagsOnTimelinesArgs";
import { FindManyTagsOnTimelinesArgs } from "./args/FindManyTagsOnTimelinesArgs";
import { FindUniqueTagsOnTimelinesArgs } from "./args/FindUniqueTagsOnTimelinesArgs";
import { GroupByTagsOnTimelinesArgs } from "./args/GroupByTagsOnTimelinesArgs";
import { UpdateManyTagsOnTimelinesArgs } from "./args/UpdateManyTagsOnTimelinesArgs";
import { UpdateTagsOnTimelinesArgs } from "./args/UpdateTagsOnTimelinesArgs";
import { UpsertTagsOnTimelinesArgs } from "./args/UpsertTagsOnTimelinesArgs";
import { TagsOnTimelines } from "../../../models/TagsOnTimelines";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateTagsOnTimelines } from "../../outputs/AggregateTagsOnTimelines";
import { TagsOnTimelinesGroupBy } from "../../outputs/TagsOnTimelinesGroupBy";
export declare class TagsOnTimelinesCrudResolver {
    findUniqueTagsOnTimelines(ctx: any, info: GraphQLResolveInfo, args: FindUniqueTagsOnTimelinesArgs): Promise<TagsOnTimelines | null>;
    findFirstTagsOnTimelines(ctx: any, info: GraphQLResolveInfo, args: FindFirstTagsOnTimelinesArgs): Promise<TagsOnTimelines | null>;
    findManyTagsOnTimelines(ctx: any, info: GraphQLResolveInfo, args: FindManyTagsOnTimelinesArgs): Promise<TagsOnTimelines[]>;
    createTagsOnTimelines(ctx: any, info: GraphQLResolveInfo, args: CreateTagsOnTimelinesArgs): Promise<TagsOnTimelines>;
    createManyTagsOnTimelines(ctx: any, info: GraphQLResolveInfo, args: CreateManyTagsOnTimelinesArgs): Promise<AffectedRowsOutput>;
    deleteTagsOnTimelines(ctx: any, info: GraphQLResolveInfo, args: DeleteTagsOnTimelinesArgs): Promise<TagsOnTimelines | null>;
    updateTagsOnTimelines(ctx: any, info: GraphQLResolveInfo, args: UpdateTagsOnTimelinesArgs): Promise<TagsOnTimelines | null>;
    deleteManyTagsOnTimelines(ctx: any, info: GraphQLResolveInfo, args: DeleteManyTagsOnTimelinesArgs): Promise<AffectedRowsOutput>;
    updateManyTagsOnTimelines(ctx: any, info: GraphQLResolveInfo, args: UpdateManyTagsOnTimelinesArgs): Promise<AffectedRowsOutput>;
    upsertTagsOnTimelines(ctx: any, info: GraphQLResolveInfo, args: UpsertTagsOnTimelinesArgs): Promise<TagsOnTimelines>;
    aggregateTagsOnTimelines(ctx: any, info: GraphQLResolveInfo, args: AggregateTagsOnTimelinesArgs): Promise<AggregateTagsOnTimelines>;
    groupByTagsOnTimelines(ctx: any, info: GraphQLResolveInfo, args: GroupByTagsOnTimelinesArgs): Promise<TagsOnTimelinesGroupBy[]>;
}
