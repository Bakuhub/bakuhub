import { GraphQLResolveInfo } from "graphql";
import { AggregateReactionOnVisionsArgs } from "./args/AggregateReactionOnVisionsArgs";
import { CreateManyReactionOnVisionsArgs } from "./args/CreateManyReactionOnVisionsArgs";
import { CreateReactionOnVisionsArgs } from "./args/CreateReactionOnVisionsArgs";
import { DeleteManyReactionOnVisionsArgs } from "./args/DeleteManyReactionOnVisionsArgs";
import { DeleteReactionOnVisionsArgs } from "./args/DeleteReactionOnVisionsArgs";
import { FindFirstReactionOnVisionsArgs } from "./args/FindFirstReactionOnVisionsArgs";
import { FindManyReactionOnVisionsArgs } from "./args/FindManyReactionOnVisionsArgs";
import { FindUniqueReactionOnVisionsArgs } from "./args/FindUniqueReactionOnVisionsArgs";
import { GroupByReactionOnVisionsArgs } from "./args/GroupByReactionOnVisionsArgs";
import { UpdateManyReactionOnVisionsArgs } from "./args/UpdateManyReactionOnVisionsArgs";
import { UpdateReactionOnVisionsArgs } from "./args/UpdateReactionOnVisionsArgs";
import { UpsertReactionOnVisionsArgs } from "./args/UpsertReactionOnVisionsArgs";
import { ReactionOnVisions } from "../../../models/ReactionOnVisions";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateReactionOnVisions } from "../../outputs/AggregateReactionOnVisions";
import { ReactionOnVisionsGroupBy } from "../../outputs/ReactionOnVisionsGroupBy";
export declare class ReactionOnVisionsCrudResolver {
    findUniqueReactionOnVisions(ctx: any, info: GraphQLResolveInfo, args: FindUniqueReactionOnVisionsArgs): Promise<ReactionOnVisions | null>;
    findFirstReactionOnVisions(ctx: any, info: GraphQLResolveInfo, args: FindFirstReactionOnVisionsArgs): Promise<ReactionOnVisions | null>;
    findManyReactionOnVisions(ctx: any, info: GraphQLResolveInfo, args: FindManyReactionOnVisionsArgs): Promise<ReactionOnVisions[]>;
    createReactionOnVisions(ctx: any, info: GraphQLResolveInfo, args: CreateReactionOnVisionsArgs): Promise<ReactionOnVisions>;
    createManyReactionOnVisions(ctx: any, info: GraphQLResolveInfo, args: CreateManyReactionOnVisionsArgs): Promise<AffectedRowsOutput>;
    deleteReactionOnVisions(ctx: any, info: GraphQLResolveInfo, args: DeleteReactionOnVisionsArgs): Promise<ReactionOnVisions | null>;
    updateReactionOnVisions(ctx: any, info: GraphQLResolveInfo, args: UpdateReactionOnVisionsArgs): Promise<ReactionOnVisions | null>;
    deleteManyReactionOnVisions(ctx: any, info: GraphQLResolveInfo, args: DeleteManyReactionOnVisionsArgs): Promise<AffectedRowsOutput>;
    updateManyReactionOnVisions(ctx: any, info: GraphQLResolveInfo, args: UpdateManyReactionOnVisionsArgs): Promise<AffectedRowsOutput>;
    upsertReactionOnVisions(ctx: any, info: GraphQLResolveInfo, args: UpsertReactionOnVisionsArgs): Promise<ReactionOnVisions>;
    aggregateReactionOnVisions(ctx: any, info: GraphQLResolveInfo, args: AggregateReactionOnVisionsArgs): Promise<AggregateReactionOnVisions>;
    groupByReactionOnVisions(ctx: any, info: GraphQLResolveInfo, args: GroupByReactionOnVisionsArgs): Promise<ReactionOnVisionsGroupBy[]>;
}
