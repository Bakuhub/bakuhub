import { GraphQLResolveInfo } from "graphql";
import { AggregateTagsOnVisionsArgs } from "./args/AggregateTagsOnVisionsArgs";
import { CreateManyTagsOnVisionsArgs } from "./args/CreateManyTagsOnVisionsArgs";
import { CreateTagsOnVisionsArgs } from "./args/CreateTagsOnVisionsArgs";
import { DeleteManyTagsOnVisionsArgs } from "./args/DeleteManyTagsOnVisionsArgs";
import { DeleteTagsOnVisionsArgs } from "./args/DeleteTagsOnVisionsArgs";
import { FindFirstTagsOnVisionsArgs } from "./args/FindFirstTagsOnVisionsArgs";
import { FindManyTagsOnVisionsArgs } from "./args/FindManyTagsOnVisionsArgs";
import { FindUniqueTagsOnVisionsArgs } from "./args/FindUniqueTagsOnVisionsArgs";
import { GroupByTagsOnVisionsArgs } from "./args/GroupByTagsOnVisionsArgs";
import { UpdateManyTagsOnVisionsArgs } from "./args/UpdateManyTagsOnVisionsArgs";
import { UpdateTagsOnVisionsArgs } from "./args/UpdateTagsOnVisionsArgs";
import { UpsertTagsOnVisionsArgs } from "./args/UpsertTagsOnVisionsArgs";
import { TagsOnVisions } from "../../../models/TagsOnVisions";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateTagsOnVisions } from "../../outputs/AggregateTagsOnVisions";
import { TagsOnVisionsGroupBy } from "../../outputs/TagsOnVisionsGroupBy";
export declare class TagsOnVisionsCrudResolver {
    findUniqueTagsOnVisions(ctx: any, info: GraphQLResolveInfo, args: FindUniqueTagsOnVisionsArgs): Promise<TagsOnVisions | null>;
    findFirstTagsOnVisions(ctx: any, info: GraphQLResolveInfo, args: FindFirstTagsOnVisionsArgs): Promise<TagsOnVisions | null>;
    findManyTagsOnVisions(ctx: any, info: GraphQLResolveInfo, args: FindManyTagsOnVisionsArgs): Promise<TagsOnVisions[]>;
    createTagsOnVisions(ctx: any, info: GraphQLResolveInfo, args: CreateTagsOnVisionsArgs): Promise<TagsOnVisions>;
    createManyTagsOnVisions(ctx: any, info: GraphQLResolveInfo, args: CreateManyTagsOnVisionsArgs): Promise<AffectedRowsOutput>;
    deleteTagsOnVisions(ctx: any, info: GraphQLResolveInfo, args: DeleteTagsOnVisionsArgs): Promise<TagsOnVisions | null>;
    updateTagsOnVisions(ctx: any, info: GraphQLResolveInfo, args: UpdateTagsOnVisionsArgs): Promise<TagsOnVisions | null>;
    deleteManyTagsOnVisions(ctx: any, info: GraphQLResolveInfo, args: DeleteManyTagsOnVisionsArgs): Promise<AffectedRowsOutput>;
    updateManyTagsOnVisions(ctx: any, info: GraphQLResolveInfo, args: UpdateManyTagsOnVisionsArgs): Promise<AffectedRowsOutput>;
    upsertTagsOnVisions(ctx: any, info: GraphQLResolveInfo, args: UpsertTagsOnVisionsArgs): Promise<TagsOnVisions>;
    aggregateTagsOnVisions(ctx: any, info: GraphQLResolveInfo, args: AggregateTagsOnVisionsArgs): Promise<AggregateTagsOnVisions>;
    groupByTagsOnVisions(ctx: any, info: GraphQLResolveInfo, args: GroupByTagsOnVisionsArgs): Promise<TagsOnVisionsGroupBy[]>;
}
