import { GraphQLResolveInfo } from "graphql";
import { AggregateThreadsOnMergeRequestArgs } from "./args/AggregateThreadsOnMergeRequestArgs";
import { CreateManyThreadsOnMergeRequestArgs } from "./args/CreateManyThreadsOnMergeRequestArgs";
import { CreateThreadsOnMergeRequestArgs } from "./args/CreateThreadsOnMergeRequestArgs";
import { DeleteManyThreadsOnMergeRequestArgs } from "./args/DeleteManyThreadsOnMergeRequestArgs";
import { DeleteThreadsOnMergeRequestArgs } from "./args/DeleteThreadsOnMergeRequestArgs";
import { FindFirstThreadsOnMergeRequestArgs } from "./args/FindFirstThreadsOnMergeRequestArgs";
import { FindManyThreadsOnMergeRequestArgs } from "./args/FindManyThreadsOnMergeRequestArgs";
import { FindUniqueThreadsOnMergeRequestArgs } from "./args/FindUniqueThreadsOnMergeRequestArgs";
import { GroupByThreadsOnMergeRequestArgs } from "./args/GroupByThreadsOnMergeRequestArgs";
import { UpdateManyThreadsOnMergeRequestArgs } from "./args/UpdateManyThreadsOnMergeRequestArgs";
import { UpdateThreadsOnMergeRequestArgs } from "./args/UpdateThreadsOnMergeRequestArgs";
import { UpsertThreadsOnMergeRequestArgs } from "./args/UpsertThreadsOnMergeRequestArgs";
import { ThreadsOnMergeRequest } from "../../../models/ThreadsOnMergeRequest";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateThreadsOnMergeRequest } from "../../outputs/AggregateThreadsOnMergeRequest";
import { ThreadsOnMergeRequestGroupBy } from "../../outputs/ThreadsOnMergeRequestGroupBy";
export declare class ThreadsOnMergeRequestCrudResolver {
    threadsOnMergeRequest(ctx: any, info: GraphQLResolveInfo, args: FindUniqueThreadsOnMergeRequestArgs): Promise<ThreadsOnMergeRequest | null>;
    findFirstThreadsOnMergeRequest(ctx: any, info: GraphQLResolveInfo, args: FindFirstThreadsOnMergeRequestArgs): Promise<ThreadsOnMergeRequest | null>;
    threadsOnMergeRequests(ctx: any, info: GraphQLResolveInfo, args: FindManyThreadsOnMergeRequestArgs): Promise<ThreadsOnMergeRequest[]>;
    createThreadsOnMergeRequest(ctx: any, info: GraphQLResolveInfo, args: CreateThreadsOnMergeRequestArgs): Promise<ThreadsOnMergeRequest>;
    createManyThreadsOnMergeRequest(ctx: any, info: GraphQLResolveInfo, args: CreateManyThreadsOnMergeRequestArgs): Promise<AffectedRowsOutput>;
    deleteThreadsOnMergeRequest(ctx: any, info: GraphQLResolveInfo, args: DeleteThreadsOnMergeRequestArgs): Promise<ThreadsOnMergeRequest | null>;
    updateThreadsOnMergeRequest(ctx: any, info: GraphQLResolveInfo, args: UpdateThreadsOnMergeRequestArgs): Promise<ThreadsOnMergeRequest | null>;
    deleteManyThreadsOnMergeRequest(ctx: any, info: GraphQLResolveInfo, args: DeleteManyThreadsOnMergeRequestArgs): Promise<AffectedRowsOutput>;
    updateManyThreadsOnMergeRequest(ctx: any, info: GraphQLResolveInfo, args: UpdateManyThreadsOnMergeRequestArgs): Promise<AffectedRowsOutput>;
    upsertThreadsOnMergeRequest(ctx: any, info: GraphQLResolveInfo, args: UpsertThreadsOnMergeRequestArgs): Promise<ThreadsOnMergeRequest>;
    aggregateThreadsOnMergeRequest(ctx: any, info: GraphQLResolveInfo, args: AggregateThreadsOnMergeRequestArgs): Promise<AggregateThreadsOnMergeRequest>;
    groupByThreadsOnMergeRequest(ctx: any, info: GraphQLResolveInfo, args: GroupByThreadsOnMergeRequestArgs): Promise<ThreadsOnMergeRequestGroupBy[]>;
}
