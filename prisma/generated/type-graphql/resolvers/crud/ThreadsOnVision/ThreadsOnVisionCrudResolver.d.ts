import { GraphQLResolveInfo } from "graphql";
import { AggregateThreadsOnVisionArgs } from "./args/AggregateThreadsOnVisionArgs";
import { CreateManyThreadsOnVisionArgs } from "./args/CreateManyThreadsOnVisionArgs";
import { CreateThreadsOnVisionArgs } from "./args/CreateThreadsOnVisionArgs";
import { DeleteManyThreadsOnVisionArgs } from "./args/DeleteManyThreadsOnVisionArgs";
import { DeleteThreadsOnVisionArgs } from "./args/DeleteThreadsOnVisionArgs";
import { FindFirstThreadsOnVisionArgs } from "./args/FindFirstThreadsOnVisionArgs";
import { FindManyThreadsOnVisionArgs } from "./args/FindManyThreadsOnVisionArgs";
import { FindUniqueThreadsOnVisionArgs } from "./args/FindUniqueThreadsOnVisionArgs";
import { GroupByThreadsOnVisionArgs } from "./args/GroupByThreadsOnVisionArgs";
import { UpdateManyThreadsOnVisionArgs } from "./args/UpdateManyThreadsOnVisionArgs";
import { UpdateThreadsOnVisionArgs } from "./args/UpdateThreadsOnVisionArgs";
import { UpsertThreadsOnVisionArgs } from "./args/UpsertThreadsOnVisionArgs";
import { ThreadsOnVision } from "../../../models/ThreadsOnVision";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateThreadsOnVision } from "../../outputs/AggregateThreadsOnVision";
import { ThreadsOnVisionGroupBy } from "../../outputs/ThreadsOnVisionGroupBy";
export declare class ThreadsOnVisionCrudResolver {
    threadsOnVision(ctx: any, info: GraphQLResolveInfo, args: FindUniqueThreadsOnVisionArgs): Promise<ThreadsOnVision | null>;
    findFirstThreadsOnVision(ctx: any, info: GraphQLResolveInfo, args: FindFirstThreadsOnVisionArgs): Promise<ThreadsOnVision | null>;
    threadsOnVisions(ctx: any, info: GraphQLResolveInfo, args: FindManyThreadsOnVisionArgs): Promise<ThreadsOnVision[]>;
    createThreadsOnVision(ctx: any, info: GraphQLResolveInfo, args: CreateThreadsOnVisionArgs): Promise<ThreadsOnVision>;
    createManyThreadsOnVision(ctx: any, info: GraphQLResolveInfo, args: CreateManyThreadsOnVisionArgs): Promise<AffectedRowsOutput>;
    deleteThreadsOnVision(ctx: any, info: GraphQLResolveInfo, args: DeleteThreadsOnVisionArgs): Promise<ThreadsOnVision | null>;
    updateThreadsOnVision(ctx: any, info: GraphQLResolveInfo, args: UpdateThreadsOnVisionArgs): Promise<ThreadsOnVision | null>;
    deleteManyThreadsOnVision(ctx: any, info: GraphQLResolveInfo, args: DeleteManyThreadsOnVisionArgs): Promise<AffectedRowsOutput>;
    updateManyThreadsOnVision(ctx: any, info: GraphQLResolveInfo, args: UpdateManyThreadsOnVisionArgs): Promise<AffectedRowsOutput>;
    upsertThreadsOnVision(ctx: any, info: GraphQLResolveInfo, args: UpsertThreadsOnVisionArgs): Promise<ThreadsOnVision>;
    aggregateThreadsOnVision(ctx: any, info: GraphQLResolveInfo, args: AggregateThreadsOnVisionArgs): Promise<AggregateThreadsOnVision>;
    groupByThreadsOnVision(ctx: any, info: GraphQLResolveInfo, args: GroupByThreadsOnVisionArgs): Promise<ThreadsOnVisionGroupBy[]>;
}
