import { GraphQLResolveInfo } from "graphql";
import { AggregateVotesOnThreadArgs } from "./args/AggregateVotesOnThreadArgs";
import { CreateManyVotesOnThreadArgs } from "./args/CreateManyVotesOnThreadArgs";
import { CreateVotesOnThreadArgs } from "./args/CreateVotesOnThreadArgs";
import { DeleteManyVotesOnThreadArgs } from "./args/DeleteManyVotesOnThreadArgs";
import { DeleteVotesOnThreadArgs } from "./args/DeleteVotesOnThreadArgs";
import { FindFirstVotesOnThreadArgs } from "./args/FindFirstVotesOnThreadArgs";
import { FindManyVotesOnThreadArgs } from "./args/FindManyVotesOnThreadArgs";
import { FindUniqueVotesOnThreadArgs } from "./args/FindUniqueVotesOnThreadArgs";
import { GroupByVotesOnThreadArgs } from "./args/GroupByVotesOnThreadArgs";
import { UpdateManyVotesOnThreadArgs } from "./args/UpdateManyVotesOnThreadArgs";
import { UpdateVotesOnThreadArgs } from "./args/UpdateVotesOnThreadArgs";
import { UpsertVotesOnThreadArgs } from "./args/UpsertVotesOnThreadArgs";
import { VotesOnThread } from "../../../models/VotesOnThread";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateVotesOnThread } from "../../outputs/AggregateVotesOnThread";
import { VotesOnThreadGroupBy } from "../../outputs/VotesOnThreadGroupBy";
export declare class VotesOnThreadCrudResolver {
    votesOnThread(ctx: any, info: GraphQLResolveInfo, args: FindUniqueVotesOnThreadArgs): Promise<VotesOnThread | null>;
    findFirstVotesOnThread(ctx: any, info: GraphQLResolveInfo, args: FindFirstVotesOnThreadArgs): Promise<VotesOnThread | null>;
    votesOnThreads(ctx: any, info: GraphQLResolveInfo, args: FindManyVotesOnThreadArgs): Promise<VotesOnThread[]>;
    createVotesOnThread(ctx: any, info: GraphQLResolveInfo, args: CreateVotesOnThreadArgs): Promise<VotesOnThread>;
    createManyVotesOnThread(ctx: any, info: GraphQLResolveInfo, args: CreateManyVotesOnThreadArgs): Promise<AffectedRowsOutput>;
    deleteVotesOnThread(ctx: any, info: GraphQLResolveInfo, args: DeleteVotesOnThreadArgs): Promise<VotesOnThread | null>;
    updateVotesOnThread(ctx: any, info: GraphQLResolveInfo, args: UpdateVotesOnThreadArgs): Promise<VotesOnThread | null>;
    deleteManyVotesOnThread(ctx: any, info: GraphQLResolveInfo, args: DeleteManyVotesOnThreadArgs): Promise<AffectedRowsOutput>;
    updateManyVotesOnThread(ctx: any, info: GraphQLResolveInfo, args: UpdateManyVotesOnThreadArgs): Promise<AffectedRowsOutput>;
    upsertVotesOnThread(ctx: any, info: GraphQLResolveInfo, args: UpsertVotesOnThreadArgs): Promise<VotesOnThread>;
    aggregateVotesOnThread(ctx: any, info: GraphQLResolveInfo, args: AggregateVotesOnThreadArgs): Promise<AggregateVotesOnThread>;
    groupByVotesOnThread(ctx: any, info: GraphQLResolveInfo, args: GroupByVotesOnThreadArgs): Promise<VotesOnThreadGroupBy[]>;
}
