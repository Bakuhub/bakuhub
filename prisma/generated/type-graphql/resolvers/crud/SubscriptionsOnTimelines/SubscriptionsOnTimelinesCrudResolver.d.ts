import { GraphQLResolveInfo } from "graphql";
import { AggregateSubscriptionsOnTimelinesArgs } from "./args/AggregateSubscriptionsOnTimelinesArgs";
import { CreateManySubscriptionsOnTimelinesArgs } from "./args/CreateManySubscriptionsOnTimelinesArgs";
import { CreateSubscriptionsOnTimelinesArgs } from "./args/CreateSubscriptionsOnTimelinesArgs";
import { DeleteManySubscriptionsOnTimelinesArgs } from "./args/DeleteManySubscriptionsOnTimelinesArgs";
import { DeleteSubscriptionsOnTimelinesArgs } from "./args/DeleteSubscriptionsOnTimelinesArgs";
import { FindFirstSubscriptionsOnTimelinesArgs } from "./args/FindFirstSubscriptionsOnTimelinesArgs";
import { FindManySubscriptionsOnTimelinesArgs } from "./args/FindManySubscriptionsOnTimelinesArgs";
import { FindUniqueSubscriptionsOnTimelinesArgs } from "./args/FindUniqueSubscriptionsOnTimelinesArgs";
import { GroupBySubscriptionsOnTimelinesArgs } from "./args/GroupBySubscriptionsOnTimelinesArgs";
import { UpdateManySubscriptionsOnTimelinesArgs } from "./args/UpdateManySubscriptionsOnTimelinesArgs";
import { UpdateSubscriptionsOnTimelinesArgs } from "./args/UpdateSubscriptionsOnTimelinesArgs";
import { UpsertSubscriptionsOnTimelinesArgs } from "./args/UpsertSubscriptionsOnTimelinesArgs";
import { SubscriptionsOnTimelines } from "../../../models/SubscriptionsOnTimelines";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateSubscriptionsOnTimelines } from "../../outputs/AggregateSubscriptionsOnTimelines";
import { SubscriptionsOnTimelinesGroupBy } from "../../outputs/SubscriptionsOnTimelinesGroupBy";
export declare class SubscriptionsOnTimelinesCrudResolver {
    findUniqueSubscriptionsOnTimelines(ctx: any, info: GraphQLResolveInfo, args: FindUniqueSubscriptionsOnTimelinesArgs): Promise<SubscriptionsOnTimelines | null>;
    findFirstSubscriptionsOnTimelines(ctx: any, info: GraphQLResolveInfo, args: FindFirstSubscriptionsOnTimelinesArgs): Promise<SubscriptionsOnTimelines | null>;
    findManySubscriptionsOnTimelines(ctx: any, info: GraphQLResolveInfo, args: FindManySubscriptionsOnTimelinesArgs): Promise<SubscriptionsOnTimelines[]>;
    createSubscriptionsOnTimelines(ctx: any, info: GraphQLResolveInfo, args: CreateSubscriptionsOnTimelinesArgs): Promise<SubscriptionsOnTimelines>;
    createManySubscriptionsOnTimelines(ctx: any, info: GraphQLResolveInfo, args: CreateManySubscriptionsOnTimelinesArgs): Promise<AffectedRowsOutput>;
    deleteSubscriptionsOnTimelines(ctx: any, info: GraphQLResolveInfo, args: DeleteSubscriptionsOnTimelinesArgs): Promise<SubscriptionsOnTimelines | null>;
    updateSubscriptionsOnTimelines(ctx: any, info: GraphQLResolveInfo, args: UpdateSubscriptionsOnTimelinesArgs): Promise<SubscriptionsOnTimelines | null>;
    deleteManySubscriptionsOnTimelines(ctx: any, info: GraphQLResolveInfo, args: DeleteManySubscriptionsOnTimelinesArgs): Promise<AffectedRowsOutput>;
    updateManySubscriptionsOnTimelines(ctx: any, info: GraphQLResolveInfo, args: UpdateManySubscriptionsOnTimelinesArgs): Promise<AffectedRowsOutput>;
    upsertSubscriptionsOnTimelines(ctx: any, info: GraphQLResolveInfo, args: UpsertSubscriptionsOnTimelinesArgs): Promise<SubscriptionsOnTimelines>;
    aggregateSubscriptionsOnTimelines(ctx: any, info: GraphQLResolveInfo, args: AggregateSubscriptionsOnTimelinesArgs): Promise<AggregateSubscriptionsOnTimelines>;
    groupBySubscriptionsOnTimelines(ctx: any, info: GraphQLResolveInfo, args: GroupBySubscriptionsOnTimelinesArgs): Promise<SubscriptionsOnTimelinesGroupBy[]>;
}
