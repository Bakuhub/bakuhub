import { GraphQLResolveInfo } from "graphql";
import { AggregateVotesOnVisionArgs } from "./args/AggregateVotesOnVisionArgs";
import { CreateManyVotesOnVisionArgs } from "./args/CreateManyVotesOnVisionArgs";
import { CreateVotesOnVisionArgs } from "./args/CreateVotesOnVisionArgs";
import { DeleteManyVotesOnVisionArgs } from "./args/DeleteManyVotesOnVisionArgs";
import { DeleteVotesOnVisionArgs } from "./args/DeleteVotesOnVisionArgs";
import { FindFirstVotesOnVisionArgs } from "./args/FindFirstVotesOnVisionArgs";
import { FindManyVotesOnVisionArgs } from "./args/FindManyVotesOnVisionArgs";
import { FindUniqueVotesOnVisionArgs } from "./args/FindUniqueVotesOnVisionArgs";
import { GroupByVotesOnVisionArgs } from "./args/GroupByVotesOnVisionArgs";
import { UpdateManyVotesOnVisionArgs } from "./args/UpdateManyVotesOnVisionArgs";
import { UpdateVotesOnVisionArgs } from "./args/UpdateVotesOnVisionArgs";
import { UpsertVotesOnVisionArgs } from "./args/UpsertVotesOnVisionArgs";
import { VotesOnVision } from "../../../models/VotesOnVision";
import { AffectedRowsOutput } from "../../outputs/AffectedRowsOutput";
import { AggregateVotesOnVision } from "../../outputs/AggregateVotesOnVision";
import { VotesOnVisionGroupBy } from "../../outputs/VotesOnVisionGroupBy";
export declare class VotesOnVisionCrudResolver {
    votesOnVision(ctx: any, info: GraphQLResolveInfo, args: FindUniqueVotesOnVisionArgs): Promise<VotesOnVision | null>;
    findFirstVotesOnVision(ctx: any, info: GraphQLResolveInfo, args: FindFirstVotesOnVisionArgs): Promise<VotesOnVision | null>;
    votesOnVisions(ctx: any, info: GraphQLResolveInfo, args: FindManyVotesOnVisionArgs): Promise<VotesOnVision[]>;
    createVotesOnVision(ctx: any, info: GraphQLResolveInfo, args: CreateVotesOnVisionArgs): Promise<VotesOnVision>;
    createManyVotesOnVision(ctx: any, info: GraphQLResolveInfo, args: CreateManyVotesOnVisionArgs): Promise<AffectedRowsOutput>;
    deleteVotesOnVision(ctx: any, info: GraphQLResolveInfo, args: DeleteVotesOnVisionArgs): Promise<VotesOnVision | null>;
    updateVotesOnVision(ctx: any, info: GraphQLResolveInfo, args: UpdateVotesOnVisionArgs): Promise<VotesOnVision | null>;
    deleteManyVotesOnVision(ctx: any, info: GraphQLResolveInfo, args: DeleteManyVotesOnVisionArgs): Promise<AffectedRowsOutput>;
    updateManyVotesOnVision(ctx: any, info: GraphQLResolveInfo, args: UpdateManyVotesOnVisionArgs): Promise<AffectedRowsOutput>;
    upsertVotesOnVision(ctx: any, info: GraphQLResolveInfo, args: UpsertVotesOnVisionArgs): Promise<VotesOnVision>;
    aggregateVotesOnVision(ctx: any, info: GraphQLResolveInfo, args: AggregateVotesOnVisionArgs): Promise<AggregateVotesOnVision>;
    groupByVotesOnVision(ctx: any, info: GraphQLResolveInfo, args: GroupByVotesOnVisionArgs): Promise<VotesOnVisionGroupBy[]>;
}
