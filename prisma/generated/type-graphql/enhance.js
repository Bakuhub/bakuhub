"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.applyInputTypesEnhanceMap = exports.applyOutputTypesEnhanceMap = exports.applyModelsEnhanceMap = exports.applyRelationResolversEnhanceMap = exports.applyArgsTypesEnhanceMap = exports.applyResolversEnhanceMap = void 0;
const tslib_1 = require("tslib");
const tslib = tslib_1.__importStar(require("tslib"));
const crudResolvers = tslib_1.__importStar(require("./resolvers/crud/resolvers-crud.index"));
const argsTypes = tslib_1.__importStar(require("./resolvers/crud/args.index"));
const actionResolvers = tslib_1.__importStar(require("./resolvers/crud/resolvers-actions.index"));
const relationResolvers = tslib_1.__importStar(require("./resolvers/relations/resolvers.index"));
const models = tslib_1.__importStar(require("./models"));
const outputTypes = tslib_1.__importStar(require("./resolvers/outputs"));
const inputTypes = tslib_1.__importStar(require("./resolvers/inputs"));
const crudResolversMap = {
    Account: crudResolvers.AccountCrudResolver,
    Session: crudResolvers.SessionCrudResolver,
    User: crudResolvers.UserCrudResolver,
    VerificationToken: crudResolvers.VerificationTokenCrudResolver,
    Premise: crudResolvers.PremiseCrudResolver,
    Vision: crudResolvers.VisionCrudResolver,
    Reference: crudResolvers.ReferenceCrudResolver,
    MergeRequest: crudResolvers.MergeRequestCrudResolver,
    Timeline: crudResolvers.TimelineCrudResolver,
    Tag: crudResolvers.TagCrudResolver,
    TagsOnPremises: crudResolvers.TagsOnPremisesCrudResolver,
    TagsOnTimelines: crudResolvers.TagsOnTimelinesCrudResolver,
    PremisesOnTimelines: crudResolvers.PremisesOnTimelinesCrudResolver,
    Snapshot: crudResolvers.SnapshotCrudResolver,
    Thread: crudResolvers.ThreadCrudResolver,
    ThreadsOnMergeRequest: crudResolvers.ThreadsOnMergeRequestCrudResolver,
    ThreadsOnPremise: crudResolvers.ThreadsOnPremiseCrudResolver,
    ThreadsOnTimeline: crudResolvers.ThreadsOnTimelineCrudResolver,
    ReactionOnThreads: crudResolvers.ReactionOnThreadsCrudResolver,
    ReactionOnTimelines: crudResolvers.ReactionOnTimelinesCrudResolver,
    ReactionOnVisions: crudResolvers.ReactionOnVisionsCrudResolver,
    ThreadsOnVision: crudResolvers.ThreadsOnVisionCrudResolver
};
const actionResolversMap = {
    Account: {
        account: actionResolvers.FindUniqueAccountResolver,
        findFirstAccount: actionResolvers.FindFirstAccountResolver,
        accounts: actionResolvers.FindManyAccountResolver,
        createAccount: actionResolvers.CreateAccountResolver,
        createManyAccount: actionResolvers.CreateManyAccountResolver,
        deleteAccount: actionResolvers.DeleteAccountResolver,
        updateAccount: actionResolvers.UpdateAccountResolver,
        deleteManyAccount: actionResolvers.DeleteManyAccountResolver,
        updateManyAccount: actionResolvers.UpdateManyAccountResolver,
        upsertAccount: actionResolvers.UpsertAccountResolver,
        aggregateAccount: actionResolvers.AggregateAccountResolver,
        groupByAccount: actionResolvers.GroupByAccountResolver
    },
    Session: {
        session: actionResolvers.FindUniqueSessionResolver,
        findFirstSession: actionResolvers.FindFirstSessionResolver,
        sessions: actionResolvers.FindManySessionResolver,
        createSession: actionResolvers.CreateSessionResolver,
        createManySession: actionResolvers.CreateManySessionResolver,
        deleteSession: actionResolvers.DeleteSessionResolver,
        updateSession: actionResolvers.UpdateSessionResolver,
        deleteManySession: actionResolvers.DeleteManySessionResolver,
        updateManySession: actionResolvers.UpdateManySessionResolver,
        upsertSession: actionResolvers.UpsertSessionResolver,
        aggregateSession: actionResolvers.AggregateSessionResolver,
        groupBySession: actionResolvers.GroupBySessionResolver
    },
    User: {
        user: actionResolvers.FindUniqueUserResolver,
        findFirstUser: actionResolvers.FindFirstUserResolver,
        users: actionResolvers.FindManyUserResolver,
        createUser: actionResolvers.CreateUserResolver,
        createManyUser: actionResolvers.CreateManyUserResolver,
        deleteUser: actionResolvers.DeleteUserResolver,
        updateUser: actionResolvers.UpdateUserResolver,
        deleteManyUser: actionResolvers.DeleteManyUserResolver,
        updateManyUser: actionResolvers.UpdateManyUserResolver,
        upsertUser: actionResolvers.UpsertUserResolver,
        aggregateUser: actionResolvers.AggregateUserResolver,
        groupByUser: actionResolvers.GroupByUserResolver
    },
    VerificationToken: {
        verificationToken: actionResolvers.FindUniqueVerificationTokenResolver,
        findFirstVerificationToken: actionResolvers.FindFirstVerificationTokenResolver,
        verificationTokens: actionResolvers.FindManyVerificationTokenResolver,
        createVerificationToken: actionResolvers.CreateVerificationTokenResolver,
        createManyVerificationToken: actionResolvers.CreateManyVerificationTokenResolver,
        deleteVerificationToken: actionResolvers.DeleteVerificationTokenResolver,
        updateVerificationToken: actionResolvers.UpdateVerificationTokenResolver,
        deleteManyVerificationToken: actionResolvers.DeleteManyVerificationTokenResolver,
        updateManyVerificationToken: actionResolvers.UpdateManyVerificationTokenResolver,
        upsertVerificationToken: actionResolvers.UpsertVerificationTokenResolver,
        aggregateVerificationToken: actionResolvers.AggregateVerificationTokenResolver,
        groupByVerificationToken: actionResolvers.GroupByVerificationTokenResolver
    },
    Premise: {
        premise: actionResolvers.FindUniquePremiseResolver,
        findFirstPremise: actionResolvers.FindFirstPremiseResolver,
        premises: actionResolvers.FindManyPremiseResolver,
        createPremise: actionResolvers.CreatePremiseResolver,
        createManyPremise: actionResolvers.CreateManyPremiseResolver,
        deletePremise: actionResolvers.DeletePremiseResolver,
        updatePremise: actionResolvers.UpdatePremiseResolver,
        deleteManyPremise: actionResolvers.DeleteManyPremiseResolver,
        updateManyPremise: actionResolvers.UpdateManyPremiseResolver,
        upsertPremise: actionResolvers.UpsertPremiseResolver,
        aggregatePremise: actionResolvers.AggregatePremiseResolver,
        groupByPremise: actionResolvers.GroupByPremiseResolver
    },
    Vision: {
        vision: actionResolvers.FindUniqueVisionResolver,
        findFirstVision: actionResolvers.FindFirstVisionResolver,
        visions: actionResolvers.FindManyVisionResolver,
        createVision: actionResolvers.CreateVisionResolver,
        createManyVision: actionResolvers.CreateManyVisionResolver,
        deleteVision: actionResolvers.DeleteVisionResolver,
        updateVision: actionResolvers.UpdateVisionResolver,
        deleteManyVision: actionResolvers.DeleteManyVisionResolver,
        updateManyVision: actionResolvers.UpdateManyVisionResolver,
        upsertVision: actionResolvers.UpsertVisionResolver,
        aggregateVision: actionResolvers.AggregateVisionResolver,
        groupByVision: actionResolvers.GroupByVisionResolver
    },
    Reference: {
        reference: actionResolvers.FindUniqueReferenceResolver,
        findFirstReference: actionResolvers.FindFirstReferenceResolver,
        references: actionResolvers.FindManyReferenceResolver,
        createReference: actionResolvers.CreateReferenceResolver,
        createManyReference: actionResolvers.CreateManyReferenceResolver,
        deleteReference: actionResolvers.DeleteReferenceResolver,
        updateReference: actionResolvers.UpdateReferenceResolver,
        deleteManyReference: actionResolvers.DeleteManyReferenceResolver,
        updateManyReference: actionResolvers.UpdateManyReferenceResolver,
        upsertReference: actionResolvers.UpsertReferenceResolver,
        aggregateReference: actionResolvers.AggregateReferenceResolver,
        groupByReference: actionResolvers.GroupByReferenceResolver
    },
    MergeRequest: {
        mergeRequest: actionResolvers.FindUniqueMergeRequestResolver,
        findFirstMergeRequest: actionResolvers.FindFirstMergeRequestResolver,
        mergeRequests: actionResolvers.FindManyMergeRequestResolver,
        createMergeRequest: actionResolvers.CreateMergeRequestResolver,
        createManyMergeRequest: actionResolvers.CreateManyMergeRequestResolver,
        deleteMergeRequest: actionResolvers.DeleteMergeRequestResolver,
        updateMergeRequest: actionResolvers.UpdateMergeRequestResolver,
        deleteManyMergeRequest: actionResolvers.DeleteManyMergeRequestResolver,
        updateManyMergeRequest: actionResolvers.UpdateManyMergeRequestResolver,
        upsertMergeRequest: actionResolvers.UpsertMergeRequestResolver,
        aggregateMergeRequest: actionResolvers.AggregateMergeRequestResolver,
        groupByMergeRequest: actionResolvers.GroupByMergeRequestResolver
    },
    Timeline: {
        timeline: actionResolvers.FindUniqueTimelineResolver,
        findFirstTimeline: actionResolvers.FindFirstTimelineResolver,
        timelines: actionResolvers.FindManyTimelineResolver,
        createTimeline: actionResolvers.CreateTimelineResolver,
        createManyTimeline: actionResolvers.CreateManyTimelineResolver,
        deleteTimeline: actionResolvers.DeleteTimelineResolver,
        updateTimeline: actionResolvers.UpdateTimelineResolver,
        deleteManyTimeline: actionResolvers.DeleteManyTimelineResolver,
        updateManyTimeline: actionResolvers.UpdateManyTimelineResolver,
        upsertTimeline: actionResolvers.UpsertTimelineResolver,
        aggregateTimeline: actionResolvers.AggregateTimelineResolver,
        groupByTimeline: actionResolvers.GroupByTimelineResolver
    },
    Tag: {
        tag: actionResolvers.FindUniqueTagResolver,
        findFirstTag: actionResolvers.FindFirstTagResolver,
        tags: actionResolvers.FindManyTagResolver,
        createTag: actionResolvers.CreateTagResolver,
        createManyTag: actionResolvers.CreateManyTagResolver,
        deleteTag: actionResolvers.DeleteTagResolver,
        updateTag: actionResolvers.UpdateTagResolver,
        deleteManyTag: actionResolvers.DeleteManyTagResolver,
        updateManyTag: actionResolvers.UpdateManyTagResolver,
        upsertTag: actionResolvers.UpsertTagResolver,
        aggregateTag: actionResolvers.AggregateTagResolver,
        groupByTag: actionResolvers.GroupByTagResolver
    },
    TagsOnPremises: {
        findUniqueTagsOnPremises: actionResolvers.FindUniqueTagsOnPremisesResolver,
        findFirstTagsOnPremises: actionResolvers.FindFirstTagsOnPremisesResolver,
        findManyTagsOnPremises: actionResolvers.FindManyTagsOnPremisesResolver,
        createTagsOnPremises: actionResolvers.CreateTagsOnPremisesResolver,
        createManyTagsOnPremises: actionResolvers.CreateManyTagsOnPremisesResolver,
        deleteTagsOnPremises: actionResolvers.DeleteTagsOnPremisesResolver,
        updateTagsOnPremises: actionResolvers.UpdateTagsOnPremisesResolver,
        deleteManyTagsOnPremises: actionResolvers.DeleteManyTagsOnPremisesResolver,
        updateManyTagsOnPremises: actionResolvers.UpdateManyTagsOnPremisesResolver,
        upsertTagsOnPremises: actionResolvers.UpsertTagsOnPremisesResolver,
        aggregateTagsOnPremises: actionResolvers.AggregateTagsOnPremisesResolver,
        groupByTagsOnPremises: actionResolvers.GroupByTagsOnPremisesResolver
    },
    TagsOnTimelines: {
        findUniqueTagsOnTimelines: actionResolvers.FindUniqueTagsOnTimelinesResolver,
        findFirstTagsOnTimelines: actionResolvers.FindFirstTagsOnTimelinesResolver,
        findManyTagsOnTimelines: actionResolvers.FindManyTagsOnTimelinesResolver,
        createTagsOnTimelines: actionResolvers.CreateTagsOnTimelinesResolver,
        createManyTagsOnTimelines: actionResolvers.CreateManyTagsOnTimelinesResolver,
        deleteTagsOnTimelines: actionResolvers.DeleteTagsOnTimelinesResolver,
        updateTagsOnTimelines: actionResolvers.UpdateTagsOnTimelinesResolver,
        deleteManyTagsOnTimelines: actionResolvers.DeleteManyTagsOnTimelinesResolver,
        updateManyTagsOnTimelines: actionResolvers.UpdateManyTagsOnTimelinesResolver,
        upsertTagsOnTimelines: actionResolvers.UpsertTagsOnTimelinesResolver,
        aggregateTagsOnTimelines: actionResolvers.AggregateTagsOnTimelinesResolver,
        groupByTagsOnTimelines: actionResolvers.GroupByTagsOnTimelinesResolver
    },
    PremisesOnTimelines: {
        findUniquePremisesOnTimelines: actionResolvers.FindUniquePremisesOnTimelinesResolver,
        findFirstPremisesOnTimelines: actionResolvers.FindFirstPremisesOnTimelinesResolver,
        findManyPremisesOnTimelines: actionResolvers.FindManyPremisesOnTimelinesResolver,
        createPremisesOnTimelines: actionResolvers.CreatePremisesOnTimelinesResolver,
        createManyPremisesOnTimelines: actionResolvers.CreateManyPremisesOnTimelinesResolver,
        deletePremisesOnTimelines: actionResolvers.DeletePremisesOnTimelinesResolver,
        updatePremisesOnTimelines: actionResolvers.UpdatePremisesOnTimelinesResolver,
        deleteManyPremisesOnTimelines: actionResolvers.DeleteManyPremisesOnTimelinesResolver,
        updateManyPremisesOnTimelines: actionResolvers.UpdateManyPremisesOnTimelinesResolver,
        upsertPremisesOnTimelines: actionResolvers.UpsertPremisesOnTimelinesResolver,
        aggregatePremisesOnTimelines: actionResolvers.AggregatePremisesOnTimelinesResolver,
        groupByPremisesOnTimelines: actionResolvers.GroupByPremisesOnTimelinesResolver
    },
    Snapshot: {
        snapshot: actionResolvers.FindUniqueSnapshotResolver,
        findFirstSnapshot: actionResolvers.FindFirstSnapshotResolver,
        snapshots: actionResolvers.FindManySnapshotResolver,
        createSnapshot: actionResolvers.CreateSnapshotResolver,
        createManySnapshot: actionResolvers.CreateManySnapshotResolver,
        deleteSnapshot: actionResolvers.DeleteSnapshotResolver,
        updateSnapshot: actionResolvers.UpdateSnapshotResolver,
        deleteManySnapshot: actionResolvers.DeleteManySnapshotResolver,
        updateManySnapshot: actionResolvers.UpdateManySnapshotResolver,
        upsertSnapshot: actionResolvers.UpsertSnapshotResolver,
        aggregateSnapshot: actionResolvers.AggregateSnapshotResolver,
        groupBySnapshot: actionResolvers.GroupBySnapshotResolver
    },
    Thread: {
        thread: actionResolvers.FindUniqueThreadResolver,
        findFirstThread: actionResolvers.FindFirstThreadResolver,
        threads: actionResolvers.FindManyThreadResolver,
        createThread: actionResolvers.CreateThreadResolver,
        createManyThread: actionResolvers.CreateManyThreadResolver,
        deleteThread: actionResolvers.DeleteThreadResolver,
        updateThread: actionResolvers.UpdateThreadResolver,
        deleteManyThread: actionResolvers.DeleteManyThreadResolver,
        updateManyThread: actionResolvers.UpdateManyThreadResolver,
        upsertThread: actionResolvers.UpsertThreadResolver,
        aggregateThread: actionResolvers.AggregateThreadResolver,
        groupByThread: actionResolvers.GroupByThreadResolver
    },
    ThreadsOnMergeRequest: {
        threadsOnMergeRequest: actionResolvers.FindUniqueThreadsOnMergeRequestResolver,
        findFirstThreadsOnMergeRequest: actionResolvers.FindFirstThreadsOnMergeRequestResolver,
        threadsOnMergeRequests: actionResolvers.FindManyThreadsOnMergeRequestResolver,
        createThreadsOnMergeRequest: actionResolvers.CreateThreadsOnMergeRequestResolver,
        createManyThreadsOnMergeRequest: actionResolvers.CreateManyThreadsOnMergeRequestResolver,
        deleteThreadsOnMergeRequest: actionResolvers.DeleteThreadsOnMergeRequestResolver,
        updateThreadsOnMergeRequest: actionResolvers.UpdateThreadsOnMergeRequestResolver,
        deleteManyThreadsOnMergeRequest: actionResolvers.DeleteManyThreadsOnMergeRequestResolver,
        updateManyThreadsOnMergeRequest: actionResolvers.UpdateManyThreadsOnMergeRequestResolver,
        upsertThreadsOnMergeRequest: actionResolvers.UpsertThreadsOnMergeRequestResolver,
        aggregateThreadsOnMergeRequest: actionResolvers.AggregateThreadsOnMergeRequestResolver,
        groupByThreadsOnMergeRequest: actionResolvers.GroupByThreadsOnMergeRequestResolver
    },
    ThreadsOnPremise: {
        threadsOnPremise: actionResolvers.FindUniqueThreadsOnPremiseResolver,
        findFirstThreadsOnPremise: actionResolvers.FindFirstThreadsOnPremiseResolver,
        threadsOnPremises: actionResolvers.FindManyThreadsOnPremiseResolver,
        createThreadsOnPremise: actionResolvers.CreateThreadsOnPremiseResolver,
        createManyThreadsOnPremise: actionResolvers.CreateManyThreadsOnPremiseResolver,
        deleteThreadsOnPremise: actionResolvers.DeleteThreadsOnPremiseResolver,
        updateThreadsOnPremise: actionResolvers.UpdateThreadsOnPremiseResolver,
        deleteManyThreadsOnPremise: actionResolvers.DeleteManyThreadsOnPremiseResolver,
        updateManyThreadsOnPremise: actionResolvers.UpdateManyThreadsOnPremiseResolver,
        upsertThreadsOnPremise: actionResolvers.UpsertThreadsOnPremiseResolver,
        aggregateThreadsOnPremise: actionResolvers.AggregateThreadsOnPremiseResolver,
        groupByThreadsOnPremise: actionResolvers.GroupByThreadsOnPremiseResolver
    },
    ThreadsOnTimeline: {
        threadsOnTimeline: actionResolvers.FindUniqueThreadsOnTimelineResolver,
        findFirstThreadsOnTimeline: actionResolvers.FindFirstThreadsOnTimelineResolver,
        threadsOnTimelines: actionResolvers.FindManyThreadsOnTimelineResolver,
        createThreadsOnTimeline: actionResolvers.CreateThreadsOnTimelineResolver,
        createManyThreadsOnTimeline: actionResolvers.CreateManyThreadsOnTimelineResolver,
        deleteThreadsOnTimeline: actionResolvers.DeleteThreadsOnTimelineResolver,
        updateThreadsOnTimeline: actionResolvers.UpdateThreadsOnTimelineResolver,
        deleteManyThreadsOnTimeline: actionResolvers.DeleteManyThreadsOnTimelineResolver,
        updateManyThreadsOnTimeline: actionResolvers.UpdateManyThreadsOnTimelineResolver,
        upsertThreadsOnTimeline: actionResolvers.UpsertThreadsOnTimelineResolver,
        aggregateThreadsOnTimeline: actionResolvers.AggregateThreadsOnTimelineResolver,
        groupByThreadsOnTimeline: actionResolvers.GroupByThreadsOnTimelineResolver
    },
    ReactionOnThreads: {
        findUniqueReactionOnThreads: actionResolvers.FindUniqueReactionOnThreadsResolver,
        findFirstReactionOnThreads: actionResolvers.FindFirstReactionOnThreadsResolver,
        findManyReactionOnThreads: actionResolvers.FindManyReactionOnThreadsResolver,
        createReactionOnThreads: actionResolvers.CreateReactionOnThreadsResolver,
        createManyReactionOnThreads: actionResolvers.CreateManyReactionOnThreadsResolver,
        deleteReactionOnThreads: actionResolvers.DeleteReactionOnThreadsResolver,
        updateReactionOnThreads: actionResolvers.UpdateReactionOnThreadsResolver,
        deleteManyReactionOnThreads: actionResolvers.DeleteManyReactionOnThreadsResolver,
        updateManyReactionOnThreads: actionResolvers.UpdateManyReactionOnThreadsResolver,
        upsertReactionOnThreads: actionResolvers.UpsertReactionOnThreadsResolver,
        aggregateReactionOnThreads: actionResolvers.AggregateReactionOnThreadsResolver,
        groupByReactionOnThreads: actionResolvers.GroupByReactionOnThreadsResolver
    },
    ReactionOnTimelines: {
        findUniqueReactionOnTimelines: actionResolvers.FindUniqueReactionOnTimelinesResolver,
        findFirstReactionOnTimelines: actionResolvers.FindFirstReactionOnTimelinesResolver,
        findManyReactionOnTimelines: actionResolvers.FindManyReactionOnTimelinesResolver,
        createReactionOnTimelines: actionResolvers.CreateReactionOnTimelinesResolver,
        createManyReactionOnTimelines: actionResolvers.CreateManyReactionOnTimelinesResolver,
        deleteReactionOnTimelines: actionResolvers.DeleteReactionOnTimelinesResolver,
        updateReactionOnTimelines: actionResolvers.UpdateReactionOnTimelinesResolver,
        deleteManyReactionOnTimelines: actionResolvers.DeleteManyReactionOnTimelinesResolver,
        updateManyReactionOnTimelines: actionResolvers.UpdateManyReactionOnTimelinesResolver,
        upsertReactionOnTimelines: actionResolvers.UpsertReactionOnTimelinesResolver,
        aggregateReactionOnTimelines: actionResolvers.AggregateReactionOnTimelinesResolver,
        groupByReactionOnTimelines: actionResolvers.GroupByReactionOnTimelinesResolver
    },
    ReactionOnVisions: {
        findUniqueReactionOnVisions: actionResolvers.FindUniqueReactionOnVisionsResolver,
        findFirstReactionOnVisions: actionResolvers.FindFirstReactionOnVisionsResolver,
        findManyReactionOnVisions: actionResolvers.FindManyReactionOnVisionsResolver,
        createReactionOnVisions: actionResolvers.CreateReactionOnVisionsResolver,
        createManyReactionOnVisions: actionResolvers.CreateManyReactionOnVisionsResolver,
        deleteReactionOnVisions: actionResolvers.DeleteReactionOnVisionsResolver,
        updateReactionOnVisions: actionResolvers.UpdateReactionOnVisionsResolver,
        deleteManyReactionOnVisions: actionResolvers.DeleteManyReactionOnVisionsResolver,
        updateManyReactionOnVisions: actionResolvers.UpdateManyReactionOnVisionsResolver,
        upsertReactionOnVisions: actionResolvers.UpsertReactionOnVisionsResolver,
        aggregateReactionOnVisions: actionResolvers.AggregateReactionOnVisionsResolver,
        groupByReactionOnVisions: actionResolvers.GroupByReactionOnVisionsResolver
    },
    ThreadsOnVision: {
        threadsOnVision: actionResolvers.FindUniqueThreadsOnVisionResolver,
        findFirstThreadsOnVision: actionResolvers.FindFirstThreadsOnVisionResolver,
        threadsOnVisions: actionResolvers.FindManyThreadsOnVisionResolver,
        createThreadsOnVision: actionResolvers.CreateThreadsOnVisionResolver,
        createManyThreadsOnVision: actionResolvers.CreateManyThreadsOnVisionResolver,
        deleteThreadsOnVision: actionResolvers.DeleteThreadsOnVisionResolver,
        updateThreadsOnVision: actionResolvers.UpdateThreadsOnVisionResolver,
        deleteManyThreadsOnVision: actionResolvers.DeleteManyThreadsOnVisionResolver,
        updateManyThreadsOnVision: actionResolvers.UpdateManyThreadsOnVisionResolver,
        upsertThreadsOnVision: actionResolvers.UpsertThreadsOnVisionResolver,
        aggregateThreadsOnVision: actionResolvers.AggregateThreadsOnVisionResolver,
        groupByThreadsOnVision: actionResolvers.GroupByThreadsOnVisionResolver
    }
};
const crudResolversInfo = {
    Account: ["account", "findFirstAccount", "accounts", "createAccount", "createManyAccount", "deleteAccount", "updateAccount", "deleteManyAccount", "updateManyAccount", "upsertAccount", "aggregateAccount", "groupByAccount"],
    Session: ["session", "findFirstSession", "sessions", "createSession", "createManySession", "deleteSession", "updateSession", "deleteManySession", "updateManySession", "upsertSession", "aggregateSession", "groupBySession"],
    User: ["user", "findFirstUser", "users", "createUser", "createManyUser", "deleteUser", "updateUser", "deleteManyUser", "updateManyUser", "upsertUser", "aggregateUser", "groupByUser"],
    VerificationToken: ["verificationToken", "findFirstVerificationToken", "verificationTokens", "createVerificationToken", "createManyVerificationToken", "deleteVerificationToken", "updateVerificationToken", "deleteManyVerificationToken", "updateManyVerificationToken", "upsertVerificationToken", "aggregateVerificationToken", "groupByVerificationToken"],
    Premise: ["premise", "findFirstPremise", "premises", "createPremise", "createManyPremise", "deletePremise", "updatePremise", "deleteManyPremise", "updateManyPremise", "upsertPremise", "aggregatePremise", "groupByPremise"],
    Vision: ["vision", "findFirstVision", "visions", "createVision", "createManyVision", "deleteVision", "updateVision", "deleteManyVision", "updateManyVision", "upsertVision", "aggregateVision", "groupByVision"],
    Reference: ["reference", "findFirstReference", "references", "createReference", "createManyReference", "deleteReference", "updateReference", "deleteManyReference", "updateManyReference", "upsertReference", "aggregateReference", "groupByReference"],
    MergeRequest: ["mergeRequest", "findFirstMergeRequest", "mergeRequests", "createMergeRequest", "createManyMergeRequest", "deleteMergeRequest", "updateMergeRequest", "deleteManyMergeRequest", "updateManyMergeRequest", "upsertMergeRequest", "aggregateMergeRequest", "groupByMergeRequest"],
    Timeline: ["timeline", "findFirstTimeline", "timelines", "createTimeline", "createManyTimeline", "deleteTimeline", "updateTimeline", "deleteManyTimeline", "updateManyTimeline", "upsertTimeline", "aggregateTimeline", "groupByTimeline"],
    Tag: ["tag", "findFirstTag", "tags", "createTag", "createManyTag", "deleteTag", "updateTag", "deleteManyTag", "updateManyTag", "upsertTag", "aggregateTag", "groupByTag"],
    TagsOnPremises: ["findUniqueTagsOnPremises", "findFirstTagsOnPremises", "findManyTagsOnPremises", "createTagsOnPremises", "createManyTagsOnPremises", "deleteTagsOnPremises", "updateTagsOnPremises", "deleteManyTagsOnPremises", "updateManyTagsOnPremises", "upsertTagsOnPremises", "aggregateTagsOnPremises", "groupByTagsOnPremises"],
    TagsOnTimelines: ["findUniqueTagsOnTimelines", "findFirstTagsOnTimelines", "findManyTagsOnTimelines", "createTagsOnTimelines", "createManyTagsOnTimelines", "deleteTagsOnTimelines", "updateTagsOnTimelines", "deleteManyTagsOnTimelines", "updateManyTagsOnTimelines", "upsertTagsOnTimelines", "aggregateTagsOnTimelines", "groupByTagsOnTimelines"],
    PremisesOnTimelines: ["findUniquePremisesOnTimelines", "findFirstPremisesOnTimelines", "findManyPremisesOnTimelines", "createPremisesOnTimelines", "createManyPremisesOnTimelines", "deletePremisesOnTimelines", "updatePremisesOnTimelines", "deleteManyPremisesOnTimelines", "updateManyPremisesOnTimelines", "upsertPremisesOnTimelines", "aggregatePremisesOnTimelines", "groupByPremisesOnTimelines"],
    Snapshot: ["snapshot", "findFirstSnapshot", "snapshots", "createSnapshot", "createManySnapshot", "deleteSnapshot", "updateSnapshot", "deleteManySnapshot", "updateManySnapshot", "upsertSnapshot", "aggregateSnapshot", "groupBySnapshot"],
    Thread: ["thread", "findFirstThread", "threads", "createThread", "createManyThread", "deleteThread", "updateThread", "deleteManyThread", "updateManyThread", "upsertThread", "aggregateThread", "groupByThread"],
    ThreadsOnMergeRequest: ["threadsOnMergeRequest", "findFirstThreadsOnMergeRequest", "threadsOnMergeRequests", "createThreadsOnMergeRequest", "createManyThreadsOnMergeRequest", "deleteThreadsOnMergeRequest", "updateThreadsOnMergeRequest", "deleteManyThreadsOnMergeRequest", "updateManyThreadsOnMergeRequest", "upsertThreadsOnMergeRequest", "aggregateThreadsOnMergeRequest", "groupByThreadsOnMergeRequest"],
    ThreadsOnPremise: ["threadsOnPremise", "findFirstThreadsOnPremise", "threadsOnPremises", "createThreadsOnPremise", "createManyThreadsOnPremise", "deleteThreadsOnPremise", "updateThreadsOnPremise", "deleteManyThreadsOnPremise", "updateManyThreadsOnPremise", "upsertThreadsOnPremise", "aggregateThreadsOnPremise", "groupByThreadsOnPremise"],
    ThreadsOnTimeline: ["threadsOnTimeline", "findFirstThreadsOnTimeline", "threadsOnTimelines", "createThreadsOnTimeline", "createManyThreadsOnTimeline", "deleteThreadsOnTimeline", "updateThreadsOnTimeline", "deleteManyThreadsOnTimeline", "updateManyThreadsOnTimeline", "upsertThreadsOnTimeline", "aggregateThreadsOnTimeline", "groupByThreadsOnTimeline"],
    ReactionOnThreads: ["findUniqueReactionOnThreads", "findFirstReactionOnThreads", "findManyReactionOnThreads", "createReactionOnThreads", "createManyReactionOnThreads", "deleteReactionOnThreads", "updateReactionOnThreads", "deleteManyReactionOnThreads", "updateManyReactionOnThreads", "upsertReactionOnThreads", "aggregateReactionOnThreads", "groupByReactionOnThreads"],
    ReactionOnTimelines: ["findUniqueReactionOnTimelines", "findFirstReactionOnTimelines", "findManyReactionOnTimelines", "createReactionOnTimelines", "createManyReactionOnTimelines", "deleteReactionOnTimelines", "updateReactionOnTimelines", "deleteManyReactionOnTimelines", "updateManyReactionOnTimelines", "upsertReactionOnTimelines", "aggregateReactionOnTimelines", "groupByReactionOnTimelines"],
    ReactionOnVisions: ["findUniqueReactionOnVisions", "findFirstReactionOnVisions", "findManyReactionOnVisions", "createReactionOnVisions", "createManyReactionOnVisions", "deleteReactionOnVisions", "updateReactionOnVisions", "deleteManyReactionOnVisions", "updateManyReactionOnVisions", "upsertReactionOnVisions", "aggregateReactionOnVisions", "groupByReactionOnVisions"],
    ThreadsOnVision: ["threadsOnVision", "findFirstThreadsOnVision", "threadsOnVisions", "createThreadsOnVision", "createManyThreadsOnVision", "deleteThreadsOnVision", "updateThreadsOnVision", "deleteManyThreadsOnVision", "updateManyThreadsOnVision", "upsertThreadsOnVision", "aggregateThreadsOnVision", "groupByThreadsOnVision"]
};
const argsInfo = {
    FindUniqueAccountArgs: ["where"],
    FindFirstAccountArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyAccountArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateAccountArgs: ["data"],
    CreateManyAccountArgs: ["data", "skipDuplicates"],
    DeleteAccountArgs: ["where"],
    UpdateAccountArgs: ["data", "where"],
    DeleteManyAccountArgs: ["where"],
    UpdateManyAccountArgs: ["data", "where"],
    UpsertAccountArgs: ["where", "create", "update"],
    AggregateAccountArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByAccountArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueSessionArgs: ["where"],
    FindFirstSessionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManySessionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateSessionArgs: ["data"],
    CreateManySessionArgs: ["data", "skipDuplicates"],
    DeleteSessionArgs: ["where"],
    UpdateSessionArgs: ["data", "where"],
    DeleteManySessionArgs: ["where"],
    UpdateManySessionArgs: ["data", "where"],
    UpsertSessionArgs: ["where", "create", "update"],
    AggregateSessionArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupBySessionArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueUserArgs: ["where"],
    FindFirstUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyUserArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateUserArgs: ["data"],
    CreateManyUserArgs: ["data", "skipDuplicates"],
    DeleteUserArgs: ["where"],
    UpdateUserArgs: ["data", "where"],
    DeleteManyUserArgs: ["where"],
    UpdateManyUserArgs: ["data", "where"],
    UpsertUserArgs: ["where", "create", "update"],
    AggregateUserArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByUserArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueVerificationTokenArgs: ["where"],
    FindFirstVerificationTokenArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyVerificationTokenArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateVerificationTokenArgs: ["data"],
    CreateManyVerificationTokenArgs: ["data", "skipDuplicates"],
    DeleteVerificationTokenArgs: ["where"],
    UpdateVerificationTokenArgs: ["data", "where"],
    DeleteManyVerificationTokenArgs: ["where"],
    UpdateManyVerificationTokenArgs: ["data", "where"],
    UpsertVerificationTokenArgs: ["where", "create", "update"],
    AggregateVerificationTokenArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByVerificationTokenArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniquePremiseArgs: ["where"],
    FindFirstPremiseArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyPremiseArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreatePremiseArgs: ["data"],
    CreateManyPremiseArgs: ["data", "skipDuplicates"],
    DeletePremiseArgs: ["where"],
    UpdatePremiseArgs: ["data", "where"],
    DeleteManyPremiseArgs: ["where"],
    UpdateManyPremiseArgs: ["data", "where"],
    UpsertPremiseArgs: ["where", "create", "update"],
    AggregatePremiseArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByPremiseArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueVisionArgs: ["where"],
    FindFirstVisionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyVisionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateVisionArgs: ["data"],
    CreateManyVisionArgs: ["data", "skipDuplicates"],
    DeleteVisionArgs: ["where"],
    UpdateVisionArgs: ["data", "where"],
    DeleteManyVisionArgs: ["where"],
    UpdateManyVisionArgs: ["data", "where"],
    UpsertVisionArgs: ["where", "create", "update"],
    AggregateVisionArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByVisionArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueReferenceArgs: ["where"],
    FindFirstReferenceArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyReferenceArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateReferenceArgs: ["data"],
    CreateManyReferenceArgs: ["data", "skipDuplicates"],
    DeleteReferenceArgs: ["where"],
    UpdateReferenceArgs: ["data", "where"],
    DeleteManyReferenceArgs: ["where"],
    UpdateManyReferenceArgs: ["data", "where"],
    UpsertReferenceArgs: ["where", "create", "update"],
    AggregateReferenceArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByReferenceArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueMergeRequestArgs: ["where"],
    FindFirstMergeRequestArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyMergeRequestArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateMergeRequestArgs: ["data"],
    CreateManyMergeRequestArgs: ["data", "skipDuplicates"],
    DeleteMergeRequestArgs: ["where"],
    UpdateMergeRequestArgs: ["data", "where"],
    DeleteManyMergeRequestArgs: ["where"],
    UpdateManyMergeRequestArgs: ["data", "where"],
    UpsertMergeRequestArgs: ["where", "create", "update"],
    AggregateMergeRequestArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByMergeRequestArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueTimelineArgs: ["where"],
    FindFirstTimelineArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyTimelineArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateTimelineArgs: ["data"],
    CreateManyTimelineArgs: ["data", "skipDuplicates"],
    DeleteTimelineArgs: ["where"],
    UpdateTimelineArgs: ["data", "where"],
    DeleteManyTimelineArgs: ["where"],
    UpdateManyTimelineArgs: ["data", "where"],
    UpsertTimelineArgs: ["where", "create", "update"],
    AggregateTimelineArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByTimelineArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueTagArgs: ["where"],
    FindFirstTagArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyTagArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateTagArgs: ["data"],
    CreateManyTagArgs: ["data", "skipDuplicates"],
    DeleteTagArgs: ["where"],
    UpdateTagArgs: ["data", "where"],
    DeleteManyTagArgs: ["where"],
    UpdateManyTagArgs: ["data", "where"],
    UpsertTagArgs: ["where", "create", "update"],
    AggregateTagArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByTagArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueTagsOnPremisesArgs: ["where"],
    FindFirstTagsOnPremisesArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyTagsOnPremisesArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateTagsOnPremisesArgs: ["data"],
    CreateManyTagsOnPremisesArgs: ["data", "skipDuplicates"],
    DeleteTagsOnPremisesArgs: ["where"],
    UpdateTagsOnPremisesArgs: ["data", "where"],
    DeleteManyTagsOnPremisesArgs: ["where"],
    UpdateManyTagsOnPremisesArgs: ["data", "where"],
    UpsertTagsOnPremisesArgs: ["where", "create", "update"],
    AggregateTagsOnPremisesArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByTagsOnPremisesArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueTagsOnTimelinesArgs: ["where"],
    FindFirstTagsOnTimelinesArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyTagsOnTimelinesArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateTagsOnTimelinesArgs: ["data"],
    CreateManyTagsOnTimelinesArgs: ["data", "skipDuplicates"],
    DeleteTagsOnTimelinesArgs: ["where"],
    UpdateTagsOnTimelinesArgs: ["data", "where"],
    DeleteManyTagsOnTimelinesArgs: ["where"],
    UpdateManyTagsOnTimelinesArgs: ["data", "where"],
    UpsertTagsOnTimelinesArgs: ["where", "create", "update"],
    AggregateTagsOnTimelinesArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByTagsOnTimelinesArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniquePremisesOnTimelinesArgs: ["where"],
    FindFirstPremisesOnTimelinesArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyPremisesOnTimelinesArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreatePremisesOnTimelinesArgs: ["data"],
    CreateManyPremisesOnTimelinesArgs: ["data", "skipDuplicates"],
    DeletePremisesOnTimelinesArgs: ["where"],
    UpdatePremisesOnTimelinesArgs: ["data", "where"],
    DeleteManyPremisesOnTimelinesArgs: ["where"],
    UpdateManyPremisesOnTimelinesArgs: ["data", "where"],
    UpsertPremisesOnTimelinesArgs: ["where", "create", "update"],
    AggregatePremisesOnTimelinesArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByPremisesOnTimelinesArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueSnapshotArgs: ["where"],
    FindFirstSnapshotArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManySnapshotArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateSnapshotArgs: ["data"],
    CreateManySnapshotArgs: ["data", "skipDuplicates"],
    DeleteSnapshotArgs: ["where"],
    UpdateSnapshotArgs: ["data", "where"],
    DeleteManySnapshotArgs: ["where"],
    UpdateManySnapshotArgs: ["data", "where"],
    UpsertSnapshotArgs: ["where", "create", "update"],
    AggregateSnapshotArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupBySnapshotArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueThreadArgs: ["where"],
    FindFirstThreadArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyThreadArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateThreadArgs: ["data"],
    CreateManyThreadArgs: ["data", "skipDuplicates"],
    DeleteThreadArgs: ["where"],
    UpdateThreadArgs: ["data", "where"],
    DeleteManyThreadArgs: ["where"],
    UpdateManyThreadArgs: ["data", "where"],
    UpsertThreadArgs: ["where", "create", "update"],
    AggregateThreadArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByThreadArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueThreadsOnMergeRequestArgs: ["where"],
    FindFirstThreadsOnMergeRequestArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyThreadsOnMergeRequestArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateThreadsOnMergeRequestArgs: ["data"],
    CreateManyThreadsOnMergeRequestArgs: ["data", "skipDuplicates"],
    DeleteThreadsOnMergeRequestArgs: ["where"],
    UpdateThreadsOnMergeRequestArgs: ["data", "where"],
    DeleteManyThreadsOnMergeRequestArgs: ["where"],
    UpdateManyThreadsOnMergeRequestArgs: ["data", "where"],
    UpsertThreadsOnMergeRequestArgs: ["where", "create", "update"],
    AggregateThreadsOnMergeRequestArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByThreadsOnMergeRequestArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueThreadsOnPremiseArgs: ["where"],
    FindFirstThreadsOnPremiseArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyThreadsOnPremiseArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateThreadsOnPremiseArgs: ["data"],
    CreateManyThreadsOnPremiseArgs: ["data", "skipDuplicates"],
    DeleteThreadsOnPremiseArgs: ["where"],
    UpdateThreadsOnPremiseArgs: ["data", "where"],
    DeleteManyThreadsOnPremiseArgs: ["where"],
    UpdateManyThreadsOnPremiseArgs: ["data", "where"],
    UpsertThreadsOnPremiseArgs: ["where", "create", "update"],
    AggregateThreadsOnPremiseArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByThreadsOnPremiseArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueThreadsOnTimelineArgs: ["where"],
    FindFirstThreadsOnTimelineArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyThreadsOnTimelineArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateThreadsOnTimelineArgs: ["data"],
    CreateManyThreadsOnTimelineArgs: ["data", "skipDuplicates"],
    DeleteThreadsOnTimelineArgs: ["where"],
    UpdateThreadsOnTimelineArgs: ["data", "where"],
    DeleteManyThreadsOnTimelineArgs: ["where"],
    UpdateManyThreadsOnTimelineArgs: ["data", "where"],
    UpsertThreadsOnTimelineArgs: ["where", "create", "update"],
    AggregateThreadsOnTimelineArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByThreadsOnTimelineArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueReactionOnThreadsArgs: ["where"],
    FindFirstReactionOnThreadsArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyReactionOnThreadsArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateReactionOnThreadsArgs: ["data"],
    CreateManyReactionOnThreadsArgs: ["data", "skipDuplicates"],
    DeleteReactionOnThreadsArgs: ["where"],
    UpdateReactionOnThreadsArgs: ["data", "where"],
    DeleteManyReactionOnThreadsArgs: ["where"],
    UpdateManyReactionOnThreadsArgs: ["data", "where"],
    UpsertReactionOnThreadsArgs: ["where", "create", "update"],
    AggregateReactionOnThreadsArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByReactionOnThreadsArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueReactionOnTimelinesArgs: ["where"],
    FindFirstReactionOnTimelinesArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyReactionOnTimelinesArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateReactionOnTimelinesArgs: ["data"],
    CreateManyReactionOnTimelinesArgs: ["data", "skipDuplicates"],
    DeleteReactionOnTimelinesArgs: ["where"],
    UpdateReactionOnTimelinesArgs: ["data", "where"],
    DeleteManyReactionOnTimelinesArgs: ["where"],
    UpdateManyReactionOnTimelinesArgs: ["data", "where"],
    UpsertReactionOnTimelinesArgs: ["where", "create", "update"],
    AggregateReactionOnTimelinesArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByReactionOnTimelinesArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueReactionOnVisionsArgs: ["where"],
    FindFirstReactionOnVisionsArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyReactionOnVisionsArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateReactionOnVisionsArgs: ["data"],
    CreateManyReactionOnVisionsArgs: ["data", "skipDuplicates"],
    DeleteReactionOnVisionsArgs: ["where"],
    UpdateReactionOnVisionsArgs: ["data", "where"],
    DeleteManyReactionOnVisionsArgs: ["where"],
    UpdateManyReactionOnVisionsArgs: ["data", "where"],
    UpsertReactionOnVisionsArgs: ["where", "create", "update"],
    AggregateReactionOnVisionsArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByReactionOnVisionsArgs: ["where", "orderBy", "by", "having", "take", "skip"],
    FindUniqueThreadsOnVisionArgs: ["where"],
    FindFirstThreadsOnVisionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    FindManyThreadsOnVisionArgs: ["where", "orderBy", "cursor", "take", "skip", "distinct"],
    CreateThreadsOnVisionArgs: ["data"],
    CreateManyThreadsOnVisionArgs: ["data", "skipDuplicates"],
    DeleteThreadsOnVisionArgs: ["where"],
    UpdateThreadsOnVisionArgs: ["data", "where"],
    DeleteManyThreadsOnVisionArgs: ["where"],
    UpdateManyThreadsOnVisionArgs: ["data", "where"],
    UpsertThreadsOnVisionArgs: ["where", "create", "update"],
    AggregateThreadsOnVisionArgs: ["where", "orderBy", "cursor", "take", "skip"],
    GroupByThreadsOnVisionArgs: ["where", "orderBy", "by", "having", "take", "skip"]
};
function applyResolversEnhanceMap(resolversEnhanceMap) {
    for (const resolversEnhanceMapKey of Object.keys(resolversEnhanceMap)) {
        const modelName = resolversEnhanceMapKey;
        const crudTarget = crudResolversMap[modelName].prototype;
        const resolverActionsConfig = resolversEnhanceMap[modelName];
        const actionResolversConfig = actionResolversMap[modelName];
        if (resolverActionsConfig._all) {
            const allActionsDecorators = resolverActionsConfig._all;
            const resolverActionNames = crudResolversInfo[modelName];
            for (const resolverActionName of resolverActionNames) {
                const actionTarget = actionResolversConfig[resolverActionName].prototype;
                tslib.__decorate(allActionsDecorators, crudTarget, resolverActionName, null);
                tslib.__decorate(allActionsDecorators, actionTarget, resolverActionName, null);
            }
        }
        const resolverActionsToApply = Object.keys(resolverActionsConfig).filter(it => it !== "_all");
        for (const resolverActionName of resolverActionsToApply) {
            const decorators = resolverActionsConfig[resolverActionName];
            const actionTarget = actionResolversConfig[resolverActionName].prototype;
            tslib.__decorate(decorators, crudTarget, resolverActionName, null);
            tslib.__decorate(decorators, actionTarget, resolverActionName, null);
        }
    }
}
exports.applyResolversEnhanceMap = applyResolversEnhanceMap;
function applyArgsTypesEnhanceMap(argsTypesEnhanceMap) {
    for (const argsTypesEnhanceMapKey of Object.keys(argsTypesEnhanceMap)) {
        const argsTypeName = argsTypesEnhanceMapKey;
        const typeConfig = argsTypesEnhanceMap[argsTypeName];
        const typeClass = argsTypes[argsTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, argsInfo[argsTypeName]);
    }
}
exports.applyArgsTypesEnhanceMap = applyArgsTypesEnhanceMap;
const relationResolversMap = {
    Account: relationResolvers.AccountRelationsResolver,
    Session: relationResolvers.SessionRelationsResolver,
    User: relationResolvers.UserRelationsResolver,
    Premise: relationResolvers.PremiseRelationsResolver,
    Vision: relationResolvers.VisionRelationsResolver,
    Reference: relationResolvers.ReferenceRelationsResolver,
    MergeRequest: relationResolvers.MergeRequestRelationsResolver,
    Timeline: relationResolvers.TimelineRelationsResolver,
    Tag: relationResolvers.TagRelationsResolver,
    TagsOnPremises: relationResolvers.TagsOnPremisesRelationsResolver,
    TagsOnTimelines: relationResolvers.TagsOnTimelinesRelationsResolver,
    PremisesOnTimelines: relationResolvers.PremisesOnTimelinesRelationsResolver,
    Snapshot: relationResolvers.SnapshotRelationsResolver,
    Thread: relationResolvers.ThreadRelationsResolver,
    ThreadsOnMergeRequest: relationResolvers.ThreadsOnMergeRequestRelationsResolver,
    ThreadsOnPremise: relationResolvers.ThreadsOnPremiseRelationsResolver,
    ThreadsOnTimeline: relationResolvers.ThreadsOnTimelineRelationsResolver,
    ReactionOnThreads: relationResolvers.ReactionOnThreadsRelationsResolver,
    ReactionOnTimelines: relationResolvers.ReactionOnTimelinesRelationsResolver,
    ReactionOnVisions: relationResolvers.ReactionOnVisionsRelationsResolver,
    ThreadsOnVision: relationResolvers.ThreadsOnVisionRelationsResolver
};
const relationResolversInfo = {
    Account: ["user"],
    Session: ["user"],
    User: ["accounts", "sessions", "premises", "threads", "visions", "timelines", "ReactionOnThreads", "ReactionOnTimelines", "ReactionOnVisions"],
    Premise: ["author", "vision", "premisesOnTimelines", "tagsOnPremises", "threadsOnPremise"],
    Vision: ["reference", "author", "premise", "prevVision", "nextVisions", "threadsOnVision", "mergeRequest", "ReactionOnVisions"],
    Reference: ["snapshots", "Vision"],
    MergeRequest: ["vision", "threadsOnMergeRequest"],
    Timeline: ["author", "premisesOnTimelines", "tagsOnTimelines", "threadsOnTimeline", "ReactionOnTimelines"],
    Tag: ["tagsOnPremises", "tagsOnTimelines"],
    TagsOnPremises: ["tag", "premise"],
    TagsOnTimelines: ["tag", "timeline"],
    PremisesOnTimelines: ["timeline", "premise"],
    Snapshot: ["references"],
    Thread: ["author", "parentThread", "childThreads", "threadsOnPremise", "threadsOnTimeline", "threadsOnVision", "threadsOnMergeRequest", "ReactionOnThreads"],
    ThreadsOnMergeRequest: ["thread", "mergeRequest"],
    ThreadsOnPremise: ["thread", "premise"],
    ThreadsOnTimeline: ["thread", "timeline"],
    ReactionOnThreads: ["user", "thread"],
    ReactionOnTimelines: ["user", "timeline"],
    ReactionOnVisions: ["user", "vision"],
    ThreadsOnVision: ["thread", "vision"]
};
function applyRelationResolversEnhanceMap(relationResolversEnhanceMap) {
    for (const relationResolversEnhanceMapKey of Object.keys(relationResolversEnhanceMap)) {
        const modelName = relationResolversEnhanceMapKey;
        const relationResolverTarget = relationResolversMap[modelName].prototype;
        const relationResolverActionsConfig = relationResolversEnhanceMap[modelName];
        if (relationResolverActionsConfig._all) {
            const allActionsDecorators = relationResolverActionsConfig._all;
            const relationResolverActionNames = relationResolversInfo[modelName];
            for (const relationResolverActionName of relationResolverActionNames) {
                tslib.__decorate(allActionsDecorators, relationResolverTarget, relationResolverActionName, null);
            }
        }
        const relationResolverActionsToApply = Object.keys(relationResolverActionsConfig).filter(it => it !== "_all");
        for (const relationResolverActionName of relationResolverActionsToApply) {
            const decorators = relationResolverActionsConfig[relationResolverActionName];
            tslib.__decorate(decorators, relationResolverTarget, relationResolverActionName, null);
        }
    }
}
exports.applyRelationResolversEnhanceMap = applyRelationResolversEnhanceMap;
function applyTypeClassEnhanceConfig(enhanceConfig, typeClass, typePrototype, typeFieldNames) {
    if (enhanceConfig.class) {
        tslib.__decorate(enhanceConfig.class, typeClass);
    }
    if (enhanceConfig.fields) {
        if (enhanceConfig.fields._all) {
            const allFieldsDecorators = enhanceConfig.fields._all;
            for (const typeFieldName of typeFieldNames) {
                tslib.__decorate(allFieldsDecorators, typePrototype, typeFieldName, void 0);
            }
        }
        const configFieldsToApply = Object.keys(enhanceConfig.fields).filter(it => it !== "_all");
        for (const typeFieldName of configFieldsToApply) {
            const fieldDecorators = enhanceConfig.fields[typeFieldName];
            tslib.__decorate(fieldDecorators, typePrototype, typeFieldName, void 0);
        }
    }
}
const modelsInfo = {
    Account: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state"],
    Session: ["id", "sessionToken", "userId", "expires"],
    User: ["id", "name", "email", "emailVerified", "updatedAt", "image"],
    VerificationToken: ["identifier", "token", "expires"],
    Premise: ["id", "title", "createdAt", "updatedAt", "status", "authorId"],
    Vision: ["id", "title", "activityDate", "description", "updatedAt", "createdAt", "referenceId", "authorId", "thumbnail", "premiseId", "draftMode", "prevVisionId"],
    Reference: ["id"],
    MergeRequest: ["id", "title", "description", "status", "visionId"],
    Timeline: ["id", "title", "description", "status", "authorId"],
    Tag: ["id", "label"],
    TagsOnPremises: ["tagId", "premiseId", "assignedAt"],
    TagsOnTimelines: ["tagId", "timelineId", "assignedAt"],
    PremisesOnTimelines: ["timelineId", "premiseId", "assignedAt"],
    Snapshot: ["id", "createdAt", "versionId", "s3Url", "sourceUrl", "caption"],
    Thread: ["id", "title", "activityDate", "description", "createdAt", "reference", "authorId", "parentThreadId"],
    ThreadsOnMergeRequest: ["threadId", "mergeRequestId", "assignedAt"],
    ThreadsOnPremise: ["threadId", "premiseId", "assignedAt"],
    ThreadsOnTimeline: ["threadId", "timelineId", "assignedAt"],
    ReactionOnThreads: ["userId", "threadId", "reaction", "createdAt"],
    ReactionOnTimelines: ["userId", "timelineId", "reaction", "createdAt"],
    ReactionOnVisions: ["userId", "visionId", "reaction", "createdAt"],
    ThreadsOnVision: ["threadId", "visionId", "assignedAt"]
};
function applyModelsEnhanceMap(modelsEnhanceMap) {
    for (const modelsEnhanceMapKey of Object.keys(modelsEnhanceMap)) {
        const modelName = modelsEnhanceMapKey;
        const modelConfig = modelsEnhanceMap[modelName];
        const modelClass = models[modelName];
        const modelTarget = modelClass.prototype;
        applyTypeClassEnhanceConfig(modelConfig, modelClass, modelTarget, modelsInfo[modelName]);
    }
}
exports.applyModelsEnhanceMap = applyModelsEnhanceMap;
const outputsInfo = {
    AggregateAccount: ["_count", "_avg", "_sum", "_min", "_max"],
    AccountGroupBy: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateSession: ["_count", "_min", "_max"],
    SessionGroupBy: ["id", "sessionToken", "userId", "expires", "_count", "_min", "_max"],
    AggregateUser: ["_count", "_min", "_max"],
    UserGroupBy: ["id", "name", "email", "emailVerified", "updatedAt", "image", "_count", "_min", "_max"],
    AggregateVerificationToken: ["_count", "_min", "_max"],
    VerificationTokenGroupBy: ["identifier", "token", "expires", "_count", "_min", "_max"],
    AggregatePremise: ["_count", "_min", "_max"],
    PremiseGroupBy: ["id", "title", "createdAt", "updatedAt", "status", "authorId", "_count", "_min", "_max"],
    AggregateVision: ["_count", "_min", "_max"],
    VisionGroupBy: ["id", "title", "activityDate", "description", "updatedAt", "createdAt", "referenceId", "authorId", "thumbnail", "premiseId", "draftMode", "prevVisionId", "_count", "_min", "_max"],
    AggregateReference: ["_count", "_min", "_max"],
    ReferenceGroupBy: ["id", "_count", "_min", "_max"],
    AggregateMergeRequest: ["_count", "_min", "_max"],
    MergeRequestGroupBy: ["id", "title", "description", "status", "visionId", "_count", "_min", "_max"],
    AggregateTimeline: ["_count", "_min", "_max"],
    TimelineGroupBy: ["id", "title", "description", "status", "authorId", "_count", "_min", "_max"],
    AggregateTag: ["_count", "_avg", "_sum", "_min", "_max"],
    TagGroupBy: ["id", "label", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateTagsOnPremises: ["_count", "_avg", "_sum", "_min", "_max"],
    TagsOnPremisesGroupBy: ["tagId", "premiseId", "assignedAt", "_count", "_avg", "_sum", "_min", "_max"],
    AggregateTagsOnTimelines: ["_count", "_avg", "_sum", "_min", "_max"],
    TagsOnTimelinesGroupBy: ["tagId", "timelineId", "assignedAt", "_count", "_avg", "_sum", "_min", "_max"],
    AggregatePremisesOnTimelines: ["_count", "_min", "_max"],
    PremisesOnTimelinesGroupBy: ["timelineId", "premiseId", "assignedAt", "_count", "_min", "_max"],
    AggregateSnapshot: ["_count", "_min", "_max"],
    SnapshotGroupBy: ["id", "createdAt", "versionId", "s3Url", "sourceUrl", "caption", "_count", "_min", "_max"],
    AggregateThread: ["_count", "_min", "_max"],
    ThreadGroupBy: ["id", "title", "activityDate", "description", "createdAt", "reference", "authorId", "parentThreadId", "_count", "_min", "_max"],
    AggregateThreadsOnMergeRequest: ["_count", "_min", "_max"],
    ThreadsOnMergeRequestGroupBy: ["threadId", "mergeRequestId", "assignedAt", "_count", "_min", "_max"],
    AggregateThreadsOnPremise: ["_count", "_min", "_max"],
    ThreadsOnPremiseGroupBy: ["threadId", "premiseId", "assignedAt", "_count", "_min", "_max"],
    AggregateThreadsOnTimeline: ["_count", "_min", "_max"],
    ThreadsOnTimelineGroupBy: ["threadId", "timelineId", "assignedAt", "_count", "_min", "_max"],
    AggregateReactionOnThreads: ["_count", "_min", "_max"],
    ReactionOnThreadsGroupBy: ["userId", "threadId", "reaction", "createdAt", "_count", "_min", "_max"],
    AggregateReactionOnTimelines: ["_count", "_min", "_max"],
    ReactionOnTimelinesGroupBy: ["userId", "timelineId", "reaction", "createdAt", "_count", "_min", "_max"],
    AggregateReactionOnVisions: ["_count", "_min", "_max"],
    ReactionOnVisionsGroupBy: ["userId", "visionId", "reaction", "createdAt", "_count", "_min", "_max"],
    AggregateThreadsOnVision: ["_count", "_min", "_max"],
    ThreadsOnVisionGroupBy: ["threadId", "visionId", "assignedAt", "_count", "_min", "_max"],
    AffectedRowsOutput: ["count"],
    AccountCountAggregate: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "_all"],
    AccountAvgAggregate: ["expires_at"],
    AccountSumAggregate: ["expires_at"],
    AccountMinAggregate: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state"],
    AccountMaxAggregate: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state"],
    SessionCountAggregate: ["id", "sessionToken", "userId", "expires", "_all"],
    SessionMinAggregate: ["id", "sessionToken", "userId", "expires"],
    SessionMaxAggregate: ["id", "sessionToken", "userId", "expires"],
    UserCount: ["accounts", "sessions", "premises", "threads", "visions", "timelines", "ReactionOnThreads", "ReactionOnTimelines", "ReactionOnVisions"],
    UserCountAggregate: ["id", "name", "email", "emailVerified", "updatedAt", "image", "_all"],
    UserMinAggregate: ["id", "name", "email", "emailVerified", "updatedAt", "image"],
    UserMaxAggregate: ["id", "name", "email", "emailVerified", "updatedAt", "image"],
    VerificationTokenCountAggregate: ["identifier", "token", "expires", "_all"],
    VerificationTokenMinAggregate: ["identifier", "token", "expires"],
    VerificationTokenMaxAggregate: ["identifier", "token", "expires"],
    PremiseCount: ["vision", "premisesOnTimelines", "tagsOnPremises", "threadsOnPremise"],
    PremiseCountAggregate: ["id", "title", "createdAt", "updatedAt", "status", "authorId", "_all"],
    PremiseMinAggregate: ["id", "title", "createdAt", "updatedAt", "status", "authorId"],
    PremiseMaxAggregate: ["id", "title", "createdAt", "updatedAt", "status", "authorId"],
    VisionCount: ["nextVisions", "threadsOnVision", "ReactionOnVisions"],
    VisionCountAggregate: ["id", "title", "activityDate", "description", "updatedAt", "createdAt", "referenceId", "authorId", "thumbnail", "premiseId", "draftMode", "prevVisionId", "_all"],
    VisionMinAggregate: ["id", "title", "activityDate", "description", "updatedAt", "createdAt", "referenceId", "authorId", "thumbnail", "premiseId", "draftMode", "prevVisionId"],
    VisionMaxAggregate: ["id", "title", "activityDate", "description", "updatedAt", "createdAt", "referenceId", "authorId", "thumbnail", "premiseId", "draftMode", "prevVisionId"],
    ReferenceCount: ["snapshots", "Vision"],
    ReferenceCountAggregate: ["id", "_all"],
    ReferenceMinAggregate: ["id"],
    ReferenceMaxAggregate: ["id"],
    MergeRequestCount: ["threadsOnMergeRequest"],
    MergeRequestCountAggregate: ["id", "title", "description", "status", "visionId", "_all"],
    MergeRequestMinAggregate: ["id", "title", "description", "status", "visionId"],
    MergeRequestMaxAggregate: ["id", "title", "description", "status", "visionId"],
    TimelineCount: ["premisesOnTimelines", "tagsOnTimelines", "threadsOnTimeline", "ReactionOnTimelines"],
    TimelineCountAggregate: ["id", "title", "description", "status", "authorId", "_all"],
    TimelineMinAggregate: ["id", "title", "description", "status", "authorId"],
    TimelineMaxAggregate: ["id", "title", "description", "status", "authorId"],
    TagCount: ["tagsOnPremises", "tagsOnTimelines"],
    TagCountAggregate: ["id", "label", "_all"],
    TagAvgAggregate: ["id"],
    TagSumAggregate: ["id"],
    TagMinAggregate: ["id", "label"],
    TagMaxAggregate: ["id", "label"],
    TagsOnPremisesCountAggregate: ["tagId", "premiseId", "assignedAt", "_all"],
    TagsOnPremisesAvgAggregate: ["tagId"],
    TagsOnPremisesSumAggregate: ["tagId"],
    TagsOnPremisesMinAggregate: ["tagId", "premiseId", "assignedAt"],
    TagsOnPremisesMaxAggregate: ["tagId", "premiseId", "assignedAt"],
    TagsOnTimelinesCountAggregate: ["tagId", "timelineId", "assignedAt", "_all"],
    TagsOnTimelinesAvgAggregate: ["tagId"],
    TagsOnTimelinesSumAggregate: ["tagId"],
    TagsOnTimelinesMinAggregate: ["tagId", "timelineId", "assignedAt"],
    TagsOnTimelinesMaxAggregate: ["tagId", "timelineId", "assignedAt"],
    PremisesOnTimelinesCountAggregate: ["timelineId", "premiseId", "assignedAt", "_all"],
    PremisesOnTimelinesMinAggregate: ["timelineId", "premiseId", "assignedAt"],
    PremisesOnTimelinesMaxAggregate: ["timelineId", "premiseId", "assignedAt"],
    SnapshotCount: ["references"],
    SnapshotCountAggregate: ["id", "createdAt", "versionId", "s3Url", "sourceUrl", "caption", "_all"],
    SnapshotMinAggregate: ["id", "createdAt", "versionId", "s3Url", "sourceUrl", "caption"],
    SnapshotMaxAggregate: ["id", "createdAt", "versionId", "s3Url", "sourceUrl", "caption"],
    ThreadCount: ["childThreads", "ReactionOnThreads"],
    ThreadCountAggregate: ["id", "title", "activityDate", "description", "createdAt", "reference", "authorId", "parentThreadId", "_all"],
    ThreadMinAggregate: ["id", "title", "activityDate", "description", "createdAt", "reference", "authorId", "parentThreadId"],
    ThreadMaxAggregate: ["id", "title", "activityDate", "description", "createdAt", "reference", "authorId", "parentThreadId"],
    ThreadsOnMergeRequestCountAggregate: ["threadId", "mergeRequestId", "assignedAt", "_all"],
    ThreadsOnMergeRequestMinAggregate: ["threadId", "mergeRequestId", "assignedAt"],
    ThreadsOnMergeRequestMaxAggregate: ["threadId", "mergeRequestId", "assignedAt"],
    ThreadsOnPremiseCountAggregate: ["threadId", "premiseId", "assignedAt", "_all"],
    ThreadsOnPremiseMinAggregate: ["threadId", "premiseId", "assignedAt"],
    ThreadsOnPremiseMaxAggregate: ["threadId", "premiseId", "assignedAt"],
    ThreadsOnTimelineCountAggregate: ["threadId", "timelineId", "assignedAt", "_all"],
    ThreadsOnTimelineMinAggregate: ["threadId", "timelineId", "assignedAt"],
    ThreadsOnTimelineMaxAggregate: ["threadId", "timelineId", "assignedAt"],
    ReactionOnThreadsCountAggregate: ["userId", "threadId", "reaction", "createdAt", "_all"],
    ReactionOnThreadsMinAggregate: ["userId", "threadId", "reaction", "createdAt"],
    ReactionOnThreadsMaxAggregate: ["userId", "threadId", "reaction", "createdAt"],
    ReactionOnTimelinesCountAggregate: ["userId", "timelineId", "reaction", "createdAt", "_all"],
    ReactionOnTimelinesMinAggregate: ["userId", "timelineId", "reaction", "createdAt"],
    ReactionOnTimelinesMaxAggregate: ["userId", "timelineId", "reaction", "createdAt"],
    ReactionOnVisionsCountAggregate: ["userId", "visionId", "reaction", "createdAt", "_all"],
    ReactionOnVisionsMinAggregate: ["userId", "visionId", "reaction", "createdAt"],
    ReactionOnVisionsMaxAggregate: ["userId", "visionId", "reaction", "createdAt"],
    ThreadsOnVisionCountAggregate: ["threadId", "visionId", "assignedAt", "_all"],
    ThreadsOnVisionMinAggregate: ["threadId", "visionId", "assignedAt"],
    ThreadsOnVisionMaxAggregate: ["threadId", "visionId", "assignedAt"]
};
function applyOutputTypesEnhanceMap(outputTypesEnhanceMap) {
    for (const outputTypeEnhanceMapKey of Object.keys(outputTypesEnhanceMap)) {
        const outputTypeName = outputTypeEnhanceMapKey;
        const typeConfig = outputTypesEnhanceMap[outputTypeName];
        const typeClass = outputTypes[outputTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, outputsInfo[outputTypeName]);
    }
}
exports.applyOutputTypesEnhanceMap = applyOutputTypesEnhanceMap;
const inputsInfo = {
    AccountWhereInput: ["AND", "OR", "NOT", "id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "user"],
    AccountOrderByWithRelationInput: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "user"],
    AccountWhereUniqueInput: ["id", "provider_providerAccountId"],
    AccountOrderByWithAggregationInput: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "_count", "_avg", "_max", "_min", "_sum"],
    AccountScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state"],
    SessionWhereInput: ["AND", "OR", "NOT", "id", "sessionToken", "userId", "expires", "user"],
    SessionOrderByWithRelationInput: ["id", "sessionToken", "userId", "expires", "user"],
    SessionWhereUniqueInput: ["id", "sessionToken"],
    SessionOrderByWithAggregationInput: ["id", "sessionToken", "userId", "expires", "_count", "_max", "_min"],
    SessionScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "sessionToken", "userId", "expires"],
    UserWhereInput: ["AND", "OR", "NOT", "id", "name", "email", "emailVerified", "updatedAt", "image", "accounts", "sessions", "premises", "threads", "visions", "timelines", "ReactionOnThreads", "ReactionOnTimelines", "ReactionOnVisions"],
    UserOrderByWithRelationInput: ["id", "name", "email", "emailVerified", "updatedAt", "image", "accounts", "sessions", "premises", "threads", "visions", "timelines", "ReactionOnThreads", "ReactionOnTimelines", "ReactionOnVisions"],
    UserWhereUniqueInput: ["id", "email"],
    UserOrderByWithAggregationInput: ["id", "name", "email", "emailVerified", "updatedAt", "image", "_count", "_max", "_min"],
    UserScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "name", "email", "emailVerified", "updatedAt", "image"],
    VerificationTokenWhereInput: ["AND", "OR", "NOT", "identifier", "token", "expires"],
    VerificationTokenOrderByWithRelationInput: ["identifier", "token", "expires"],
    VerificationTokenWhereUniqueInput: ["token", "identifier_token"],
    VerificationTokenOrderByWithAggregationInput: ["identifier", "token", "expires", "_count", "_max", "_min"],
    VerificationTokenScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "identifier", "token", "expires"],
    PremiseWhereInput: ["AND", "OR", "NOT", "id", "title", "createdAt", "updatedAt", "status", "author", "authorId", "vision", "premisesOnTimelines", "tagsOnPremises", "threadsOnPremise"],
    PremiseOrderByWithRelationInput: ["id", "title", "createdAt", "updatedAt", "status", "author", "authorId", "vision", "premisesOnTimelines", "tagsOnPremises", "threadsOnPremise"],
    PremiseWhereUniqueInput: ["id"],
    PremiseOrderByWithAggregationInput: ["id", "title", "createdAt", "updatedAt", "status", "authorId", "_count", "_max", "_min"],
    PremiseScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "title", "createdAt", "updatedAt", "status", "authorId"],
    VisionWhereInput: ["AND", "OR", "NOT", "id", "title", "activityDate", "description", "updatedAt", "createdAt", "reference", "referenceId", "author", "authorId", "premise", "thumbnail", "premiseId", "draftMode", "prevVisionId", "prevVision", "nextVisions", "threadsOnVision", "mergeRequest", "ReactionOnVisions"],
    VisionOrderByWithRelationInput: ["id", "title", "activityDate", "description", "updatedAt", "createdAt", "reference", "referenceId", "author", "authorId", "premise", "thumbnail", "premiseId", "draftMode", "prevVisionId", "prevVision", "nextVisions", "threadsOnVision", "mergeRequest", "ReactionOnVisions"],
    VisionWhereUniqueInput: ["id"],
    VisionOrderByWithAggregationInput: ["id", "title", "activityDate", "description", "updatedAt", "createdAt", "referenceId", "authorId", "thumbnail", "premiseId", "draftMode", "prevVisionId", "_count", "_max", "_min"],
    VisionScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "title", "activityDate", "description", "updatedAt", "createdAt", "referenceId", "authorId", "thumbnail", "premiseId", "draftMode", "prevVisionId"],
    ReferenceWhereInput: ["AND", "OR", "NOT", "id", "snapshots", "Vision"],
    ReferenceOrderByWithRelationInput: ["id", "snapshots", "Vision"],
    ReferenceWhereUniqueInput: ["id"],
    ReferenceOrderByWithAggregationInput: ["id", "_count", "_max", "_min"],
    ReferenceScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id"],
    MergeRequestWhereInput: ["AND", "OR", "NOT", "id", "title", "description", "status", "vision", "visionId", "threadsOnMergeRequest"],
    MergeRequestOrderByWithRelationInput: ["id", "title", "description", "status", "vision", "visionId", "threadsOnMergeRequest"],
    MergeRequestWhereUniqueInput: ["id", "visionId"],
    MergeRequestOrderByWithAggregationInput: ["id", "title", "description", "status", "visionId", "_count", "_max", "_min"],
    MergeRequestScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "title", "description", "status", "visionId"],
    TimelineWhereInput: ["AND", "OR", "NOT", "id", "title", "description", "status", "author", "authorId", "premisesOnTimelines", "tagsOnTimelines", "threadsOnTimeline", "ReactionOnTimelines"],
    TimelineOrderByWithRelationInput: ["id", "title", "description", "status", "author", "authorId", "premisesOnTimelines", "tagsOnTimelines", "threadsOnTimeline", "ReactionOnTimelines"],
    TimelineWhereUniqueInput: ["id"],
    TimelineOrderByWithAggregationInput: ["id", "title", "description", "status", "authorId", "_count", "_max", "_min"],
    TimelineScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "title", "description", "status", "authorId"],
    TagWhereInput: ["AND", "OR", "NOT", "id", "label", "tagsOnPremises", "tagsOnTimelines"],
    TagOrderByWithRelationInput: ["id", "label", "tagsOnPremises", "tagsOnTimelines"],
    TagWhereUniqueInput: ["id", "label"],
    TagOrderByWithAggregationInput: ["id", "label", "_count", "_avg", "_max", "_min", "_sum"],
    TagScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "label"],
    TagsOnPremisesWhereInput: ["AND", "OR", "NOT", "tag", "tagId", "premise", "premiseId", "assignedAt"],
    TagsOnPremisesOrderByWithRelationInput: ["tag", "tagId", "premise", "premiseId", "assignedAt"],
    TagsOnPremisesWhereUniqueInput: ["tagId_premiseId"],
    TagsOnPremisesOrderByWithAggregationInput: ["tagId", "premiseId", "assignedAt", "_count", "_avg", "_max", "_min", "_sum"],
    TagsOnPremisesScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "tagId", "premiseId", "assignedAt"],
    TagsOnTimelinesWhereInput: ["AND", "OR", "NOT", "tag", "tagId", "timeline", "timelineId", "assignedAt"],
    TagsOnTimelinesOrderByWithRelationInput: ["tag", "tagId", "timeline", "timelineId", "assignedAt"],
    TagsOnTimelinesWhereUniqueInput: ["tagId_timelineId"],
    TagsOnTimelinesOrderByWithAggregationInput: ["tagId", "timelineId", "assignedAt", "_count", "_avg", "_max", "_min", "_sum"],
    TagsOnTimelinesScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "tagId", "timelineId", "assignedAt"],
    PremisesOnTimelinesWhereInput: ["AND", "OR", "NOT", "timeline", "timelineId", "premise", "premiseId", "assignedAt"],
    PremisesOnTimelinesOrderByWithRelationInput: ["timeline", "timelineId", "premise", "premiseId", "assignedAt"],
    PremisesOnTimelinesWhereUniqueInput: ["premiseId_timelineId"],
    PremisesOnTimelinesOrderByWithAggregationInput: ["timelineId", "premiseId", "assignedAt", "_count", "_max", "_min"],
    PremisesOnTimelinesScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "timelineId", "premiseId", "assignedAt"],
    SnapshotWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "versionId", "s3Url", "sourceUrl", "caption", "references"],
    SnapshotOrderByWithRelationInput: ["id", "createdAt", "versionId", "s3Url", "sourceUrl", "caption", "references"],
    SnapshotWhereUniqueInput: ["id"],
    SnapshotOrderByWithAggregationInput: ["id", "createdAt", "versionId", "s3Url", "sourceUrl", "caption", "_count", "_max", "_min"],
    SnapshotScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "createdAt", "versionId", "s3Url", "sourceUrl", "caption"],
    ThreadWhereInput: ["AND", "OR", "NOT", "id", "title", "activityDate", "description", "createdAt", "reference", "author", "authorId", "parentThreadId", "parentThread", "childThreads", "threadsOnPremise", "threadsOnTimeline", "threadsOnVision", "threadsOnMergeRequest", "ReactionOnThreads"],
    ThreadOrderByWithRelationInput: ["id", "title", "activityDate", "description", "createdAt", "reference", "author", "authorId", "parentThreadId", "parentThread", "childThreads", "threadsOnPremise", "threadsOnTimeline", "threadsOnVision", "threadsOnMergeRequest", "ReactionOnThreads"],
    ThreadWhereUniqueInput: ["id"],
    ThreadOrderByWithAggregationInput: ["id", "title", "activityDate", "description", "createdAt", "reference", "authorId", "parentThreadId", "_count", "_max", "_min"],
    ThreadScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "id", "title", "activityDate", "description", "createdAt", "reference", "authorId", "parentThreadId"],
    ThreadsOnMergeRequestWhereInput: ["AND", "OR", "NOT", "thread", "threadId", "mergeRequest", "mergeRequestId", "assignedAt"],
    ThreadsOnMergeRequestOrderByWithRelationInput: ["thread", "threadId", "mergeRequest", "mergeRequestId", "assignedAt"],
    ThreadsOnMergeRequestWhereUniqueInput: ["threadId", "threadId_mergeRequestId"],
    ThreadsOnMergeRequestOrderByWithAggregationInput: ["threadId", "mergeRequestId", "assignedAt", "_count", "_max", "_min"],
    ThreadsOnMergeRequestScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "threadId", "mergeRequestId", "assignedAt"],
    ThreadsOnPremiseWhereInput: ["AND", "OR", "NOT", "thread", "threadId", "premise", "premiseId", "assignedAt"],
    ThreadsOnPremiseOrderByWithRelationInput: ["thread", "threadId", "premise", "premiseId", "assignedAt"],
    ThreadsOnPremiseWhereUniqueInput: ["threadId", "threadId_premiseId"],
    ThreadsOnPremiseOrderByWithAggregationInput: ["threadId", "premiseId", "assignedAt", "_count", "_max", "_min"],
    ThreadsOnPremiseScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "threadId", "premiseId", "assignedAt"],
    ThreadsOnTimelineWhereInput: ["AND", "OR", "NOT", "thread", "threadId", "timeline", "timelineId", "assignedAt"],
    ThreadsOnTimelineOrderByWithRelationInput: ["thread", "threadId", "timeline", "timelineId", "assignedAt"],
    ThreadsOnTimelineWhereUniqueInput: ["threadId", "threadId_timelineId"],
    ThreadsOnTimelineOrderByWithAggregationInput: ["threadId", "timelineId", "assignedAt", "_count", "_max", "_min"],
    ThreadsOnTimelineScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "threadId", "timelineId", "assignedAt"],
    ReactionOnThreadsWhereInput: ["AND", "OR", "NOT", "user", "userId", "thread", "threadId", "reaction", "createdAt"],
    ReactionOnThreadsOrderByWithRelationInput: ["user", "userId", "thread", "threadId", "reaction", "createdAt"],
    ReactionOnThreadsWhereUniqueInput: ["userId_threadId"],
    ReactionOnThreadsOrderByWithAggregationInput: ["userId", "threadId", "reaction", "createdAt", "_count", "_max", "_min"],
    ReactionOnThreadsScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "userId", "threadId", "reaction", "createdAt"],
    ReactionOnTimelinesWhereInput: ["AND", "OR", "NOT", "user", "userId", "timeline", "timelineId", "reaction", "createdAt"],
    ReactionOnTimelinesOrderByWithRelationInput: ["user", "userId", "timeline", "timelineId", "reaction", "createdAt"],
    ReactionOnTimelinesWhereUniqueInput: ["userId_timelineId"],
    ReactionOnTimelinesOrderByWithAggregationInput: ["userId", "timelineId", "reaction", "createdAt", "_count", "_max", "_min"],
    ReactionOnTimelinesScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "userId", "timelineId", "reaction", "createdAt"],
    ReactionOnVisionsWhereInput: ["AND", "OR", "NOT", "user", "userId", "vision", "visionId", "reaction", "createdAt"],
    ReactionOnVisionsOrderByWithRelationInput: ["user", "userId", "vision", "visionId", "reaction", "createdAt"],
    ReactionOnVisionsWhereUniqueInput: ["userId_visionId"],
    ReactionOnVisionsOrderByWithAggregationInput: ["userId", "visionId", "reaction", "createdAt", "_count", "_max", "_min"],
    ReactionOnVisionsScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "userId", "visionId", "reaction", "createdAt"],
    ThreadsOnVisionWhereInput: ["AND", "OR", "NOT", "thread", "threadId", "vision", "visionId", "assignedAt"],
    ThreadsOnVisionOrderByWithRelationInput: ["thread", "threadId", "vision", "visionId", "assignedAt"],
    ThreadsOnVisionWhereUniqueInput: ["threadId", "threadId_visionId"],
    ThreadsOnVisionOrderByWithAggregationInput: ["threadId", "visionId", "assignedAt", "_count", "_max", "_min"],
    ThreadsOnVisionScalarWhereWithAggregatesInput: ["AND", "OR", "NOT", "threadId", "visionId", "assignedAt"],
    AccountCreateInput: ["id", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "user"],
    AccountUpdateInput: ["id", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state", "user"],
    AccountCreateManyInput: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state"],
    AccountUpdateManyMutationInput: ["id", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state"],
    SessionCreateInput: ["id", "sessionToken", "expires", "user"],
    SessionUpdateInput: ["id", "sessionToken", "expires", "user"],
    SessionCreateManyInput: ["id", "sessionToken", "userId", "expires"],
    SessionUpdateManyMutationInput: ["id", "sessionToken", "expires"],
    UserCreateInput: ["id", "name", "email", "emailVerified", "updatedAt", "image", "accounts", "sessions", "premises", "threads", "visions", "timelines", "ReactionOnThreads", "ReactionOnTimelines", "ReactionOnVisions"],
    UserUpdateInput: ["id", "name", "email", "emailVerified", "updatedAt", "image", "accounts", "sessions", "premises", "threads", "visions", "timelines", "ReactionOnThreads", "ReactionOnTimelines", "ReactionOnVisions"],
    UserCreateManyInput: ["id", "name", "email", "emailVerified", "updatedAt", "image"],
    UserUpdateManyMutationInput: ["id", "name", "email", "emailVerified", "updatedAt", "image"],
    VerificationTokenCreateInput: ["identifier", "token", "expires"],
    VerificationTokenUpdateInput: ["identifier", "token", "expires"],
    VerificationTokenCreateManyInput: ["identifier", "token", "expires"],
    VerificationTokenUpdateManyMutationInput: ["identifier", "token", "expires"],
    PremiseCreateInput: ["id", "title", "createdAt", "updatedAt", "status", "author", "vision", "premisesOnTimelines", "tagsOnPremises", "threadsOnPremise"],
    PremiseUpdateInput: ["id", "title", "createdAt", "updatedAt", "status", "author", "vision", "premisesOnTimelines", "tagsOnPremises", "threadsOnPremise"],
    PremiseCreateManyInput: ["id", "title", "createdAt", "updatedAt", "status", "authorId"],
    PremiseUpdateManyMutationInput: ["id", "title", "createdAt", "updatedAt", "status"],
    VisionCreateInput: ["id", "title", "activityDate", "description", "updatedAt", "createdAt", "reference", "author", "premise", "thumbnail", "draftMode", "prevVision", "nextVisions", "threadsOnVision", "mergeRequest", "ReactionOnVisions"],
    VisionUpdateInput: ["id", "title", "activityDate", "description", "updatedAt", "createdAt", "reference", "author", "premise", "thumbnail", "draftMode", "prevVision", "nextVisions", "threadsOnVision", "mergeRequest", "ReactionOnVisions"],
    VisionCreateManyInput: ["id", "title", "activityDate", "description", "updatedAt", "createdAt", "referenceId", "authorId", "thumbnail", "premiseId", "draftMode", "prevVisionId"],
    VisionUpdateManyMutationInput: ["id", "title", "activityDate", "description", "updatedAt", "createdAt", "thumbnail", "draftMode"],
    ReferenceCreateInput: ["id", "snapshots", "Vision"],
    ReferenceUpdateInput: ["id", "snapshots", "Vision"],
    ReferenceCreateManyInput: ["id"],
    ReferenceUpdateManyMutationInput: ["id"],
    MergeRequestCreateInput: ["id", "title", "description", "status", "vision", "threadsOnMergeRequest"],
    MergeRequestUpdateInput: ["id", "title", "description", "status", "vision", "threadsOnMergeRequest"],
    MergeRequestCreateManyInput: ["id", "title", "description", "status", "visionId"],
    MergeRequestUpdateManyMutationInput: ["id", "title", "description", "status"],
    TimelineCreateInput: ["id", "title", "description", "status", "author", "premisesOnTimelines", "tagsOnTimelines", "threadsOnTimeline", "ReactionOnTimelines"],
    TimelineUpdateInput: ["id", "title", "description", "status", "author", "premisesOnTimelines", "tagsOnTimelines", "threadsOnTimeline", "ReactionOnTimelines"],
    TimelineCreateManyInput: ["id", "title", "description", "status", "authorId"],
    TimelineUpdateManyMutationInput: ["id", "title", "description", "status"],
    TagCreateInput: ["label", "tagsOnPremises", "tagsOnTimelines"],
    TagUpdateInput: ["label", "tagsOnPremises", "tagsOnTimelines"],
    TagCreateManyInput: ["id", "label"],
    TagUpdateManyMutationInput: ["label"],
    TagsOnPremisesCreateInput: ["tag", "premise", "assignedAt"],
    TagsOnPremisesUpdateInput: ["tag", "premise", "assignedAt"],
    TagsOnPremisesCreateManyInput: ["tagId", "premiseId", "assignedAt"],
    TagsOnPremisesUpdateManyMutationInput: ["assignedAt"],
    TagsOnTimelinesCreateInput: ["tag", "timeline", "assignedAt"],
    TagsOnTimelinesUpdateInput: ["tag", "timeline", "assignedAt"],
    TagsOnTimelinesCreateManyInput: ["tagId", "timelineId", "assignedAt"],
    TagsOnTimelinesUpdateManyMutationInput: ["assignedAt"],
    PremisesOnTimelinesCreateInput: ["timeline", "premise", "assignedAt"],
    PremisesOnTimelinesUpdateInput: ["timeline", "premise", "assignedAt"],
    PremisesOnTimelinesCreateManyInput: ["timelineId", "premiseId", "assignedAt"],
    PremisesOnTimelinesUpdateManyMutationInput: ["assignedAt"],
    SnapshotCreateInput: ["id", "createdAt", "versionId", "s3Url", "sourceUrl", "caption", "references"],
    SnapshotUpdateInput: ["id", "createdAt", "versionId", "s3Url", "sourceUrl", "caption", "references"],
    SnapshotCreateManyInput: ["id", "createdAt", "versionId", "s3Url", "sourceUrl", "caption"],
    SnapshotUpdateManyMutationInput: ["id", "createdAt", "versionId", "s3Url", "sourceUrl", "caption"],
    ThreadCreateInput: ["id", "title", "activityDate", "description", "createdAt", "reference", "author", "parentThread", "childThreads", "threadsOnPremise", "threadsOnTimeline", "threadsOnVision", "threadsOnMergeRequest", "ReactionOnThreads"],
    ThreadUpdateInput: ["id", "title", "activityDate", "description", "createdAt", "reference", "author", "parentThread", "childThreads", "threadsOnPremise", "threadsOnTimeline", "threadsOnVision", "threadsOnMergeRequest", "ReactionOnThreads"],
    ThreadCreateManyInput: ["id", "title", "activityDate", "description", "createdAt", "reference", "authorId", "parentThreadId"],
    ThreadUpdateManyMutationInput: ["id", "title", "activityDate", "description", "createdAt", "reference"],
    ThreadsOnMergeRequestCreateInput: ["thread", "mergeRequest", "assignedAt"],
    ThreadsOnMergeRequestUpdateInput: ["thread", "mergeRequest", "assignedAt"],
    ThreadsOnMergeRequestCreateManyInput: ["threadId", "mergeRequestId", "assignedAt"],
    ThreadsOnMergeRequestUpdateManyMutationInput: ["assignedAt"],
    ThreadsOnPremiseCreateInput: ["thread", "premise", "assignedAt"],
    ThreadsOnPremiseUpdateInput: ["thread", "premise", "assignedAt"],
    ThreadsOnPremiseCreateManyInput: ["threadId", "premiseId", "assignedAt"],
    ThreadsOnPremiseUpdateManyMutationInput: ["assignedAt"],
    ThreadsOnTimelineCreateInput: ["thread", "timeline", "assignedAt"],
    ThreadsOnTimelineUpdateInput: ["thread", "timeline", "assignedAt"],
    ThreadsOnTimelineCreateManyInput: ["threadId", "timelineId", "assignedAt"],
    ThreadsOnTimelineUpdateManyMutationInput: ["assignedAt"],
    ReactionOnThreadsCreateInput: ["user", "thread", "reaction", "createdAt"],
    ReactionOnThreadsUpdateInput: ["user", "thread", "reaction", "createdAt"],
    ReactionOnThreadsCreateManyInput: ["userId", "threadId", "reaction", "createdAt"],
    ReactionOnThreadsUpdateManyMutationInput: ["reaction", "createdAt"],
    ReactionOnTimelinesCreateInput: ["user", "timeline", "reaction", "createdAt"],
    ReactionOnTimelinesUpdateInput: ["user", "timeline", "reaction", "createdAt"],
    ReactionOnTimelinesCreateManyInput: ["userId", "timelineId", "reaction", "createdAt"],
    ReactionOnTimelinesUpdateManyMutationInput: ["reaction", "createdAt"],
    ReactionOnVisionsCreateInput: ["user", "vision", "reaction", "createdAt"],
    ReactionOnVisionsUpdateInput: ["user", "vision", "reaction", "createdAt"],
    ReactionOnVisionsCreateManyInput: ["userId", "visionId", "reaction", "createdAt"],
    ReactionOnVisionsUpdateManyMutationInput: ["reaction", "createdAt"],
    ThreadsOnVisionCreateInput: ["thread", "vision", "assignedAt"],
    ThreadsOnVisionUpdateInput: ["thread", "vision", "assignedAt"],
    ThreadsOnVisionCreateManyInput: ["threadId", "visionId", "assignedAt"],
    ThreadsOnVisionUpdateManyMutationInput: ["assignedAt"],
    StringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not"],
    StringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not"],
    IntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    UserRelationFilter: ["is", "isNot"],
    AccountProviderProviderAccountIdCompoundUniqueInput: ["provider", "providerAccountId"],
    AccountCountOrderByAggregateInput: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state"],
    AccountAvgOrderByAggregateInput: ["expires_at"],
    AccountMaxOrderByAggregateInput: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state"],
    AccountMinOrderByAggregateInput: ["id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state"],
    AccountSumOrderByAggregateInput: ["expires_at"],
    StringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not", "_count", "_min", "_max"],
    StringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "mode", "not", "_count", "_min", "_max"],
    IntNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    DateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    SessionCountOrderByAggregateInput: ["id", "sessionToken", "userId", "expires"],
    SessionMaxOrderByAggregateInput: ["id", "sessionToken", "userId", "expires"],
    SessionMinOrderByAggregateInput: ["id", "sessionToken", "userId", "expires"],
    DateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    DateTimeNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    AccountListRelationFilter: ["every", "some", "none"],
    SessionListRelationFilter: ["every", "some", "none"],
    PremiseListRelationFilter: ["every", "some", "none"],
    ThreadListRelationFilter: ["every", "some", "none"],
    VisionListRelationFilter: ["every", "some", "none"],
    TimelineListRelationFilter: ["every", "some", "none"],
    ReactionOnThreadsListRelationFilter: ["every", "some", "none"],
    ReactionOnTimelinesListRelationFilter: ["every", "some", "none"],
    ReactionOnVisionsListRelationFilter: ["every", "some", "none"],
    AccountOrderByRelationAggregateInput: ["_count"],
    SessionOrderByRelationAggregateInput: ["_count"],
    PremiseOrderByRelationAggregateInput: ["_count"],
    ThreadOrderByRelationAggregateInput: ["_count"],
    VisionOrderByRelationAggregateInput: ["_count"],
    TimelineOrderByRelationAggregateInput: ["_count"],
    ReactionOnThreadsOrderByRelationAggregateInput: ["_count"],
    ReactionOnTimelinesOrderByRelationAggregateInput: ["_count"],
    ReactionOnVisionsOrderByRelationAggregateInput: ["_count"],
    UserCountOrderByAggregateInput: ["id", "name", "email", "emailVerified", "updatedAt", "image"],
    UserMaxOrderByAggregateInput: ["id", "name", "email", "emailVerified", "updatedAt", "image"],
    UserMinOrderByAggregateInput: ["id", "name", "email", "emailVerified", "updatedAt", "image"],
    DateTimeNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    VerificationTokenIdentifierTokenCompoundUniqueInput: ["identifier", "token"],
    VerificationTokenCountOrderByAggregateInput: ["identifier", "token", "expires"],
    VerificationTokenMaxOrderByAggregateInput: ["identifier", "token", "expires"],
    VerificationTokenMinOrderByAggregateInput: ["identifier", "token", "expires"],
    EnumPremiseStatusFilter: ["equals", "in", "notIn", "not"],
    PremisesOnTimelinesListRelationFilter: ["every", "some", "none"],
    TagsOnPremisesListRelationFilter: ["every", "some", "none"],
    ThreadsOnPremiseListRelationFilter: ["every", "some", "none"],
    PremisesOnTimelinesOrderByRelationAggregateInput: ["_count"],
    TagsOnPremisesOrderByRelationAggregateInput: ["_count"],
    ThreadsOnPremiseOrderByRelationAggregateInput: ["_count"],
    PremiseCountOrderByAggregateInput: ["id", "title", "createdAt", "updatedAt", "status", "authorId"],
    PremiseMaxOrderByAggregateInput: ["id", "title", "createdAt", "updatedAt", "status", "authorId"],
    PremiseMinOrderByAggregateInput: ["id", "title", "createdAt", "updatedAt", "status", "authorId"],
    EnumPremiseStatusWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    ReferenceRelationFilter: ["is", "isNot"],
    PremiseRelationFilter: ["is", "isNot"],
    BoolFilter: ["equals", "not"],
    VisionRelationFilter: ["is", "isNot"],
    ThreadsOnVisionListRelationFilter: ["every", "some", "none"],
    MergeRequestRelationFilter: ["is", "isNot"],
    ThreadsOnVisionOrderByRelationAggregateInput: ["_count"],
    VisionCountOrderByAggregateInput: ["id", "title", "activityDate", "description", "updatedAt", "createdAt", "referenceId", "authorId", "thumbnail", "premiseId", "draftMode", "prevVisionId"],
    VisionMaxOrderByAggregateInput: ["id", "title", "activityDate", "description", "updatedAt", "createdAt", "referenceId", "authorId", "thumbnail", "premiseId", "draftMode", "prevVisionId"],
    VisionMinOrderByAggregateInput: ["id", "title", "activityDate", "description", "updatedAt", "createdAt", "referenceId", "authorId", "thumbnail", "premiseId", "draftMode", "prevVisionId"],
    BoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
    SnapshotListRelationFilter: ["every", "some", "none"],
    SnapshotOrderByRelationAggregateInput: ["_count"],
    ReferenceCountOrderByAggregateInput: ["id"],
    ReferenceMaxOrderByAggregateInput: ["id"],
    ReferenceMinOrderByAggregateInput: ["id"],
    EnumMergeRequestStatusFilter: ["equals", "in", "notIn", "not"],
    ThreadsOnMergeRequestListRelationFilter: ["every", "some", "none"],
    ThreadsOnMergeRequestOrderByRelationAggregateInput: ["_count"],
    MergeRequestCountOrderByAggregateInput: ["id", "title", "description", "status", "visionId"],
    MergeRequestMaxOrderByAggregateInput: ["id", "title", "description", "status", "visionId"],
    MergeRequestMinOrderByAggregateInput: ["id", "title", "description", "status", "visionId"],
    EnumMergeRequestStatusWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    TagsOnTimelinesListRelationFilter: ["every", "some", "none"],
    ThreadsOnTimelineListRelationFilter: ["every", "some", "none"],
    TagsOnTimelinesOrderByRelationAggregateInput: ["_count"],
    ThreadsOnTimelineOrderByRelationAggregateInput: ["_count"],
    TimelineCountOrderByAggregateInput: ["id", "title", "description", "status", "authorId"],
    TimelineMaxOrderByAggregateInput: ["id", "title", "description", "status", "authorId"],
    TimelineMinOrderByAggregateInput: ["id", "title", "description", "status", "authorId"],
    IntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    TagCountOrderByAggregateInput: ["id", "label"],
    TagAvgOrderByAggregateInput: ["id"],
    TagMaxOrderByAggregateInput: ["id", "label"],
    TagMinOrderByAggregateInput: ["id", "label"],
    TagSumOrderByAggregateInput: ["id"],
    IntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    TagRelationFilter: ["is", "isNot"],
    TagsOnPremisesTagIdPremiseIdCompoundUniqueInput: ["tagId", "premiseId"],
    TagsOnPremisesCountOrderByAggregateInput: ["tagId", "premiseId", "assignedAt"],
    TagsOnPremisesAvgOrderByAggregateInput: ["tagId"],
    TagsOnPremisesMaxOrderByAggregateInput: ["tagId", "premiseId", "assignedAt"],
    TagsOnPremisesMinOrderByAggregateInput: ["tagId", "premiseId", "assignedAt"],
    TagsOnPremisesSumOrderByAggregateInput: ["tagId"],
    TimelineRelationFilter: ["is", "isNot"],
    TagsOnTimelinesTagIdTimelineIdCompoundUniqueInput: ["tagId", "timelineId"],
    TagsOnTimelinesCountOrderByAggregateInput: ["tagId", "timelineId", "assignedAt"],
    TagsOnTimelinesAvgOrderByAggregateInput: ["tagId"],
    TagsOnTimelinesMaxOrderByAggregateInput: ["tagId", "timelineId", "assignedAt"],
    TagsOnTimelinesMinOrderByAggregateInput: ["tagId", "timelineId", "assignedAt"],
    TagsOnTimelinesSumOrderByAggregateInput: ["tagId"],
    PremisesOnTimelinesPremiseIdTimelineIdCompoundUniqueInput: ["premiseId", "timelineId"],
    PremisesOnTimelinesCountOrderByAggregateInput: ["timelineId", "premiseId", "assignedAt"],
    PremisesOnTimelinesMaxOrderByAggregateInput: ["timelineId", "premiseId", "assignedAt"],
    PremisesOnTimelinesMinOrderByAggregateInput: ["timelineId", "premiseId", "assignedAt"],
    ReferenceListRelationFilter: ["every", "some", "none"],
    ReferenceOrderByRelationAggregateInput: ["_count"],
    SnapshotCountOrderByAggregateInput: ["id", "createdAt", "versionId", "s3Url", "sourceUrl", "caption"],
    SnapshotMaxOrderByAggregateInput: ["id", "createdAt", "versionId", "s3Url", "sourceUrl", "caption"],
    SnapshotMinOrderByAggregateInput: ["id", "createdAt", "versionId", "s3Url", "sourceUrl", "caption"],
    ThreadRelationFilter: ["is", "isNot"],
    ThreadsOnPremiseRelationFilter: ["is", "isNot"],
    ThreadsOnTimelineRelationFilter: ["is", "isNot"],
    ThreadsOnVisionRelationFilter: ["is", "isNot"],
    ThreadsOnMergeRequestRelationFilter: ["is", "isNot"],
    ThreadCountOrderByAggregateInput: ["id", "title", "activityDate", "description", "createdAt", "reference", "authorId", "parentThreadId"],
    ThreadMaxOrderByAggregateInput: ["id", "title", "activityDate", "description", "createdAt", "reference", "authorId", "parentThreadId"],
    ThreadMinOrderByAggregateInput: ["id", "title", "activityDate", "description", "createdAt", "reference", "authorId", "parentThreadId"],
    ThreadsOnMergeRequestThreadIdMergeRequestIdCompoundUniqueInput: ["threadId", "mergeRequestId"],
    ThreadsOnMergeRequestCountOrderByAggregateInput: ["threadId", "mergeRequestId", "assignedAt"],
    ThreadsOnMergeRequestMaxOrderByAggregateInput: ["threadId", "mergeRequestId", "assignedAt"],
    ThreadsOnMergeRequestMinOrderByAggregateInput: ["threadId", "mergeRequestId", "assignedAt"],
    ThreadsOnPremiseThreadIdPremiseIdCompoundUniqueInput: ["threadId", "premiseId"],
    ThreadsOnPremiseCountOrderByAggregateInput: ["threadId", "premiseId", "assignedAt"],
    ThreadsOnPremiseMaxOrderByAggregateInput: ["threadId", "premiseId", "assignedAt"],
    ThreadsOnPremiseMinOrderByAggregateInput: ["threadId", "premiseId", "assignedAt"],
    ThreadsOnTimelineThreadIdTimelineIdCompoundUniqueInput: ["threadId", "timelineId"],
    ThreadsOnTimelineCountOrderByAggregateInput: ["threadId", "timelineId", "assignedAt"],
    ThreadsOnTimelineMaxOrderByAggregateInput: ["threadId", "timelineId", "assignedAt"],
    ThreadsOnTimelineMinOrderByAggregateInput: ["threadId", "timelineId", "assignedAt"],
    EnumReactionFilter: ["equals", "in", "notIn", "not"],
    ReactionOnThreadsUserIdThreadIdCompoundUniqueInput: ["userId", "threadId"],
    ReactionOnThreadsCountOrderByAggregateInput: ["userId", "threadId", "reaction", "createdAt"],
    ReactionOnThreadsMaxOrderByAggregateInput: ["userId", "threadId", "reaction", "createdAt"],
    ReactionOnThreadsMinOrderByAggregateInput: ["userId", "threadId", "reaction", "createdAt"],
    EnumReactionWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    ReactionOnTimelinesUserIdTimelineIdCompoundUniqueInput: ["userId", "timelineId"],
    ReactionOnTimelinesCountOrderByAggregateInput: ["userId", "timelineId", "reaction", "createdAt"],
    ReactionOnTimelinesMaxOrderByAggregateInput: ["userId", "timelineId", "reaction", "createdAt"],
    ReactionOnTimelinesMinOrderByAggregateInput: ["userId", "timelineId", "reaction", "createdAt"],
    ReactionOnVisionsUserIdVisionIdCompoundUniqueInput: ["userId", "visionId"],
    ReactionOnVisionsCountOrderByAggregateInput: ["userId", "visionId", "reaction", "createdAt"],
    ReactionOnVisionsMaxOrderByAggregateInput: ["userId", "visionId", "reaction", "createdAt"],
    ReactionOnVisionsMinOrderByAggregateInput: ["userId", "visionId", "reaction", "createdAt"],
    ThreadsOnVisionThreadIdVisionIdCompoundUniqueInput: ["threadId", "visionId"],
    ThreadsOnVisionCountOrderByAggregateInput: ["threadId", "visionId", "assignedAt"],
    ThreadsOnVisionMaxOrderByAggregateInput: ["threadId", "visionId", "assignedAt"],
    ThreadsOnVisionMinOrderByAggregateInput: ["threadId", "visionId", "assignedAt"],
    UserCreateNestedOneWithoutAccountsInput: ["create", "connectOrCreate", "connect"],
    StringFieldUpdateOperationsInput: ["set"],
    NullableStringFieldUpdateOperationsInput: ["set"],
    NullableIntFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
    UserUpdateOneRequiredWithoutAccountsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    UserCreateNestedOneWithoutSessionsInput: ["create", "connectOrCreate", "connect"],
    DateTimeFieldUpdateOperationsInput: ["set"],
    UserUpdateOneRequiredWithoutSessionsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    AccountCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
    SessionCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
    PremiseCreateNestedManyWithoutAuthorInput: ["create", "connectOrCreate", "createMany", "connect"],
    ThreadCreateNestedManyWithoutAuthorInput: ["create", "connectOrCreate", "createMany", "connect"],
    VisionCreateNestedManyWithoutAuthorInput: ["create", "connectOrCreate", "createMany", "connect"],
    TimelineCreateNestedManyWithoutAuthorInput: ["create", "connectOrCreate", "createMany", "connect"],
    ReactionOnThreadsCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
    ReactionOnTimelinesCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
    ReactionOnVisionsCreateNestedManyWithoutUserInput: ["create", "connectOrCreate", "createMany", "connect"],
    NullableDateTimeFieldUpdateOperationsInput: ["set"],
    AccountUpdateManyWithoutUserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    SessionUpdateManyWithoutUserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    PremiseUpdateManyWithoutAuthorInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    ThreadUpdateManyWithoutAuthorInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    VisionUpdateManyWithoutAuthorInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    TimelineUpdateManyWithoutAuthorInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    ReactionOnThreadsUpdateManyWithoutUserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    ReactionOnTimelinesUpdateManyWithoutUserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    ReactionOnVisionsUpdateManyWithoutUserInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    UserCreateNestedOneWithoutPremisesInput: ["create", "connectOrCreate", "connect"],
    VisionCreateNestedManyWithoutPremiseInput: ["create", "connectOrCreate", "createMany", "connect"],
    PremisesOnTimelinesCreateNestedManyWithoutPremiseInput: ["create", "connectOrCreate", "createMany", "connect"],
    TagsOnPremisesCreateNestedManyWithoutPremiseInput: ["create", "connectOrCreate", "createMany", "connect"],
    ThreadsOnPremiseCreateNestedManyWithoutPremiseInput: ["create", "connectOrCreate", "createMany", "connect"],
    EnumPremiseStatusFieldUpdateOperationsInput: ["set"],
    UserUpdateOneWithoutPremisesInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    VisionUpdateManyWithoutPremiseInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    PremisesOnTimelinesUpdateManyWithoutPremiseInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    TagsOnPremisesUpdateManyWithoutPremiseInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    ThreadsOnPremiseUpdateManyWithoutPremiseInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    ReferenceCreateNestedOneWithoutVisionInput: ["create", "connectOrCreate", "connect"],
    UserCreateNestedOneWithoutVisionsInput: ["create", "connectOrCreate", "connect"],
    PremiseCreateNestedOneWithoutVisionInput: ["create", "connectOrCreate", "connect"],
    VisionCreateNestedOneWithoutNextVisionsInput: ["create", "connectOrCreate", "connect"],
    VisionCreateNestedManyWithoutPrevVisionInput: ["create", "connectOrCreate", "createMany", "connect"],
    ThreadsOnVisionCreateNestedManyWithoutVisionInput: ["create", "connectOrCreate", "createMany", "connect"],
    MergeRequestCreateNestedOneWithoutVisionInput: ["create", "connectOrCreate", "connect"],
    ReactionOnVisionsCreateNestedManyWithoutVisionInput: ["create", "connectOrCreate", "createMany", "connect"],
    ReferenceUpdateOneWithoutVisionInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    UserUpdateOneWithoutVisionsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    PremiseUpdateOneRequiredWithoutVisionInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    BoolFieldUpdateOperationsInput: ["set"],
    VisionUpdateOneWithoutNextVisionsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    VisionUpdateManyWithoutPrevVisionInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    ThreadsOnVisionUpdateManyWithoutVisionInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    MergeRequestUpdateOneWithoutVisionInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    ReactionOnVisionsUpdateManyWithoutVisionInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    SnapshotCreateNestedManyWithoutReferencesInput: ["create", "connectOrCreate", "connect"],
    VisionCreateNestedManyWithoutReferenceInput: ["create", "connectOrCreate", "createMany", "connect"],
    SnapshotUpdateManyWithoutReferencesInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    VisionUpdateManyWithoutReferenceInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    VisionCreateNestedOneWithoutMergeRequestInput: ["create", "connectOrCreate", "connect"],
    ThreadsOnMergeRequestCreateNestedManyWithoutMergeRequestInput: ["create", "connectOrCreate", "createMany", "connect"],
    EnumMergeRequestStatusFieldUpdateOperationsInput: ["set"],
    VisionUpdateOneRequiredWithoutMergeRequestInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    ThreadsOnMergeRequestUpdateManyWithoutMergeRequestInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    UserCreateNestedOneWithoutTimelinesInput: ["create", "connectOrCreate", "connect"],
    PremisesOnTimelinesCreateNestedManyWithoutTimelineInput: ["create", "connectOrCreate", "createMany", "connect"],
    TagsOnTimelinesCreateNestedManyWithoutTimelineInput: ["create", "connectOrCreate", "createMany", "connect"],
    ThreadsOnTimelineCreateNestedManyWithoutTimelineInput: ["create", "connectOrCreate", "createMany", "connect"],
    ReactionOnTimelinesCreateNestedManyWithoutTimelineInput: ["create", "connectOrCreate", "createMany", "connect"],
    UserUpdateOneRequiredWithoutTimelinesInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    PremisesOnTimelinesUpdateManyWithoutTimelineInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    TagsOnTimelinesUpdateManyWithoutTimelineInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    ThreadsOnTimelineUpdateManyWithoutTimelineInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    ReactionOnTimelinesUpdateManyWithoutTimelineInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    TagsOnPremisesCreateNestedManyWithoutTagInput: ["create", "connectOrCreate", "createMany", "connect"],
    TagsOnTimelinesCreateNestedManyWithoutTagInput: ["create", "connectOrCreate", "createMany", "connect"],
    TagsOnPremisesUpdateManyWithoutTagInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    TagsOnTimelinesUpdateManyWithoutTagInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    IntFieldUpdateOperationsInput: ["set", "increment", "decrement", "multiply", "divide"],
    TagCreateNestedOneWithoutTagsOnPremisesInput: ["create", "connectOrCreate", "connect"],
    PremiseCreateNestedOneWithoutTagsOnPremisesInput: ["create", "connectOrCreate", "connect"],
    TagUpdateOneRequiredWithoutTagsOnPremisesInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    PremiseUpdateOneRequiredWithoutTagsOnPremisesInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    TagCreateNestedOneWithoutTagsOnTimelinesInput: ["create", "connectOrCreate", "connect"],
    TimelineCreateNestedOneWithoutTagsOnTimelinesInput: ["create", "connectOrCreate", "connect"],
    TagUpdateOneRequiredWithoutTagsOnTimelinesInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    TimelineUpdateOneRequiredWithoutTagsOnTimelinesInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    TimelineCreateNestedOneWithoutPremisesOnTimelinesInput: ["create", "connectOrCreate", "connect"],
    PremiseCreateNestedOneWithoutPremisesOnTimelinesInput: ["create", "connectOrCreate", "connect"],
    TimelineUpdateOneRequiredWithoutPremisesOnTimelinesInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    PremiseUpdateOneRequiredWithoutPremisesOnTimelinesInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    ReferenceCreateNestedManyWithoutSnapshotsInput: ["create", "connectOrCreate", "connect"],
    ReferenceUpdateManyWithoutSnapshotsInput: ["create", "connectOrCreate", "upsert", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    UserCreateNestedOneWithoutThreadsInput: ["create", "connectOrCreate", "connect"],
    ThreadCreateNestedOneWithoutChildThreadsInput: ["create", "connectOrCreate", "connect"],
    ThreadCreateNestedManyWithoutParentThreadInput: ["create", "connectOrCreate", "createMany", "connect"],
    ThreadsOnPremiseCreateNestedOneWithoutThreadInput: ["create", "connectOrCreate", "connect"],
    ThreadsOnTimelineCreateNestedOneWithoutThreadInput: ["create", "connectOrCreate", "connect"],
    ThreadsOnVisionCreateNestedOneWithoutThreadInput: ["create", "connectOrCreate", "connect"],
    ThreadsOnMergeRequestCreateNestedOneWithoutThreadInput: ["create", "connectOrCreate", "connect"],
    ReactionOnThreadsCreateNestedManyWithoutThreadInput: ["create", "connectOrCreate", "createMany", "connect"],
    UserUpdateOneWithoutThreadsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    ThreadUpdateOneWithoutChildThreadsInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    ThreadUpdateManyWithoutParentThreadInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    ThreadsOnPremiseUpdateOneWithoutThreadInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    ThreadsOnTimelineUpdateOneWithoutThreadInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    ThreadsOnVisionUpdateOneWithoutThreadInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    ThreadsOnMergeRequestUpdateOneWithoutThreadInput: ["create", "connectOrCreate", "upsert", "disconnect", "delete", "connect", "update"],
    ReactionOnThreadsUpdateManyWithoutThreadInput: ["create", "connectOrCreate", "upsert", "createMany", "set", "disconnect", "delete", "connect", "update", "updateMany", "deleteMany"],
    ThreadCreateNestedOneWithoutThreadsOnMergeRequestInput: ["create", "connectOrCreate", "connect"],
    MergeRequestCreateNestedOneWithoutThreadsOnMergeRequestInput: ["create", "connectOrCreate", "connect"],
    ThreadUpdateOneRequiredWithoutThreadsOnMergeRequestInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    MergeRequestUpdateOneRequiredWithoutThreadsOnMergeRequestInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    ThreadCreateNestedOneWithoutThreadsOnPremiseInput: ["create", "connectOrCreate", "connect"],
    PremiseCreateNestedOneWithoutThreadsOnPremiseInput: ["create", "connectOrCreate", "connect"],
    ThreadUpdateOneRequiredWithoutThreadsOnPremiseInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    PremiseUpdateOneRequiredWithoutThreadsOnPremiseInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    ThreadCreateNestedOneWithoutThreadsOnTimelineInput: ["create", "connectOrCreate", "connect"],
    TimelineCreateNestedOneWithoutThreadsOnTimelineInput: ["create", "connectOrCreate", "connect"],
    ThreadUpdateOneRequiredWithoutThreadsOnTimelineInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    TimelineUpdateOneRequiredWithoutThreadsOnTimelineInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    UserCreateNestedOneWithoutReactionOnThreadsInput: ["create", "connectOrCreate", "connect"],
    ThreadCreateNestedOneWithoutReactionOnThreadsInput: ["create", "connectOrCreate", "connect"],
    UserUpdateOneRequiredWithoutReactionOnThreadsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    ThreadUpdateOneRequiredWithoutReactionOnThreadsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    EnumReactionFieldUpdateOperationsInput: ["set"],
    UserCreateNestedOneWithoutReactionOnTimelinesInput: ["create", "connectOrCreate", "connect"],
    TimelineCreateNestedOneWithoutReactionOnTimelinesInput: ["create", "connectOrCreate", "connect"],
    UserUpdateOneRequiredWithoutReactionOnTimelinesInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    TimelineUpdateOneRequiredWithoutReactionOnTimelinesInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    UserCreateNestedOneWithoutReactionOnVisionsInput: ["create", "connectOrCreate", "connect"],
    VisionCreateNestedOneWithoutReactionOnVisionsInput: ["create", "connectOrCreate", "connect"],
    UserUpdateOneRequiredWithoutReactionOnVisionsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    VisionUpdateOneRequiredWithoutReactionOnVisionsInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    ThreadCreateNestedOneWithoutThreadsOnVisionInput: ["create", "connectOrCreate", "connect"],
    VisionCreateNestedOneWithoutThreadsOnVisionInput: ["create", "connectOrCreate", "connect"],
    ThreadUpdateOneRequiredWithoutThreadsOnVisionInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    VisionUpdateOneRequiredWithoutThreadsOnVisionInput: ["create", "connectOrCreate", "upsert", "connect", "update"],
    NestedStringFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
    NestedStringNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not"],
    NestedIntNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedStringWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
    NestedIntFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedStringNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "contains", "startsWith", "endsWith", "not", "_count", "_min", "_max"],
    NestedIntNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    NestedFloatNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedDateTimeFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedDateTimeWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    NestedDateTimeNullableFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedDateTimeNullableWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_min", "_max"],
    NestedEnumPremiseStatusFilter: ["equals", "in", "notIn", "not"],
    NestedEnumPremiseStatusWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedBoolFilter: ["equals", "not"],
    NestedBoolWithAggregatesFilter: ["equals", "not", "_count", "_min", "_max"],
    NestedEnumMergeRequestStatusFilter: ["equals", "in", "notIn", "not"],
    NestedEnumMergeRequestStatusWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    NestedIntWithAggregatesFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not", "_count", "_avg", "_sum", "_min", "_max"],
    NestedFloatFilter: ["equals", "in", "notIn", "lt", "lte", "gt", "gte", "not"],
    NestedEnumReactionFilter: ["equals", "in", "notIn", "not"],
    NestedEnumReactionWithAggregatesFilter: ["equals", "in", "notIn", "not", "_count", "_min", "_max"],
    UserCreateWithoutAccountsInput: ["id", "name", "email", "emailVerified", "updatedAt", "image", "sessions", "premises", "threads", "visions", "timelines", "ReactionOnThreads", "ReactionOnTimelines", "ReactionOnVisions"],
    UserCreateOrConnectWithoutAccountsInput: ["where", "create"],
    UserUpsertWithoutAccountsInput: ["update", "create"],
    UserUpdateWithoutAccountsInput: ["id", "name", "email", "emailVerified", "updatedAt", "image", "sessions", "premises", "threads", "visions", "timelines", "ReactionOnThreads", "ReactionOnTimelines", "ReactionOnVisions"],
    UserCreateWithoutSessionsInput: ["id", "name", "email", "emailVerified", "updatedAt", "image", "accounts", "premises", "threads", "visions", "timelines", "ReactionOnThreads", "ReactionOnTimelines", "ReactionOnVisions"],
    UserCreateOrConnectWithoutSessionsInput: ["where", "create"],
    UserUpsertWithoutSessionsInput: ["update", "create"],
    UserUpdateWithoutSessionsInput: ["id", "name", "email", "emailVerified", "updatedAt", "image", "accounts", "premises", "threads", "visions", "timelines", "ReactionOnThreads", "ReactionOnTimelines", "ReactionOnVisions"],
    AccountCreateWithoutUserInput: ["id", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state"],
    AccountCreateOrConnectWithoutUserInput: ["where", "create"],
    AccountCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
    SessionCreateWithoutUserInput: ["id", "sessionToken", "expires"],
    SessionCreateOrConnectWithoutUserInput: ["where", "create"],
    SessionCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
    PremiseCreateWithoutAuthorInput: ["id", "title", "createdAt", "updatedAt", "status", "vision", "premisesOnTimelines", "tagsOnPremises", "threadsOnPremise"],
    PremiseCreateOrConnectWithoutAuthorInput: ["where", "create"],
    PremiseCreateManyAuthorInputEnvelope: ["data", "skipDuplicates"],
    ThreadCreateWithoutAuthorInput: ["id", "title", "activityDate", "description", "createdAt", "reference", "parentThread", "childThreads", "threadsOnPremise", "threadsOnTimeline", "threadsOnVision", "threadsOnMergeRequest", "ReactionOnThreads"],
    ThreadCreateOrConnectWithoutAuthorInput: ["where", "create"],
    ThreadCreateManyAuthorInputEnvelope: ["data", "skipDuplicates"],
    VisionCreateWithoutAuthorInput: ["id", "title", "activityDate", "description", "updatedAt", "createdAt", "reference", "premise", "thumbnail", "draftMode", "prevVision", "nextVisions", "threadsOnVision", "mergeRequest", "ReactionOnVisions"],
    VisionCreateOrConnectWithoutAuthorInput: ["where", "create"],
    VisionCreateManyAuthorInputEnvelope: ["data", "skipDuplicates"],
    TimelineCreateWithoutAuthorInput: ["id", "title", "description", "status", "premisesOnTimelines", "tagsOnTimelines", "threadsOnTimeline", "ReactionOnTimelines"],
    TimelineCreateOrConnectWithoutAuthorInput: ["where", "create"],
    TimelineCreateManyAuthorInputEnvelope: ["data", "skipDuplicates"],
    ReactionOnThreadsCreateWithoutUserInput: ["thread", "reaction", "createdAt"],
    ReactionOnThreadsCreateOrConnectWithoutUserInput: ["where", "create"],
    ReactionOnThreadsCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
    ReactionOnTimelinesCreateWithoutUserInput: ["timeline", "reaction", "createdAt"],
    ReactionOnTimelinesCreateOrConnectWithoutUserInput: ["where", "create"],
    ReactionOnTimelinesCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
    ReactionOnVisionsCreateWithoutUserInput: ["vision", "reaction", "createdAt"],
    ReactionOnVisionsCreateOrConnectWithoutUserInput: ["where", "create"],
    ReactionOnVisionsCreateManyUserInputEnvelope: ["data", "skipDuplicates"],
    AccountUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
    AccountUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
    AccountUpdateManyWithWhereWithoutUserInput: ["where", "data"],
    AccountScalarWhereInput: ["AND", "OR", "NOT", "id", "userId", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state"],
    SessionUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
    SessionUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
    SessionUpdateManyWithWhereWithoutUserInput: ["where", "data"],
    SessionScalarWhereInput: ["AND", "OR", "NOT", "id", "sessionToken", "userId", "expires"],
    PremiseUpsertWithWhereUniqueWithoutAuthorInput: ["where", "update", "create"],
    PremiseUpdateWithWhereUniqueWithoutAuthorInput: ["where", "data"],
    PremiseUpdateManyWithWhereWithoutAuthorInput: ["where", "data"],
    PremiseScalarWhereInput: ["AND", "OR", "NOT", "id", "title", "createdAt", "updatedAt", "status", "authorId"],
    ThreadUpsertWithWhereUniqueWithoutAuthorInput: ["where", "update", "create"],
    ThreadUpdateWithWhereUniqueWithoutAuthorInput: ["where", "data"],
    ThreadUpdateManyWithWhereWithoutAuthorInput: ["where", "data"],
    ThreadScalarWhereInput: ["AND", "OR", "NOT", "id", "title", "activityDate", "description", "createdAt", "reference", "authorId", "parentThreadId"],
    VisionUpsertWithWhereUniqueWithoutAuthorInput: ["where", "update", "create"],
    VisionUpdateWithWhereUniqueWithoutAuthorInput: ["where", "data"],
    VisionUpdateManyWithWhereWithoutAuthorInput: ["where", "data"],
    VisionScalarWhereInput: ["AND", "OR", "NOT", "id", "title", "activityDate", "description", "updatedAt", "createdAt", "referenceId", "authorId", "thumbnail", "premiseId", "draftMode", "prevVisionId"],
    TimelineUpsertWithWhereUniqueWithoutAuthorInput: ["where", "update", "create"],
    TimelineUpdateWithWhereUniqueWithoutAuthorInput: ["where", "data"],
    TimelineUpdateManyWithWhereWithoutAuthorInput: ["where", "data"],
    TimelineScalarWhereInput: ["AND", "OR", "NOT", "id", "title", "description", "status", "authorId"],
    ReactionOnThreadsUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
    ReactionOnThreadsUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
    ReactionOnThreadsUpdateManyWithWhereWithoutUserInput: ["where", "data"],
    ReactionOnThreadsScalarWhereInput: ["AND", "OR", "NOT", "userId", "threadId", "reaction", "createdAt"],
    ReactionOnTimelinesUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
    ReactionOnTimelinesUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
    ReactionOnTimelinesUpdateManyWithWhereWithoutUserInput: ["where", "data"],
    ReactionOnTimelinesScalarWhereInput: ["AND", "OR", "NOT", "userId", "timelineId", "reaction", "createdAt"],
    ReactionOnVisionsUpsertWithWhereUniqueWithoutUserInput: ["where", "update", "create"],
    ReactionOnVisionsUpdateWithWhereUniqueWithoutUserInput: ["where", "data"],
    ReactionOnVisionsUpdateManyWithWhereWithoutUserInput: ["where", "data"],
    ReactionOnVisionsScalarWhereInput: ["AND", "OR", "NOT", "userId", "visionId", "reaction", "createdAt"],
    UserCreateWithoutPremisesInput: ["id", "name", "email", "emailVerified", "updatedAt", "image", "accounts", "sessions", "threads", "visions", "timelines", "ReactionOnThreads", "ReactionOnTimelines", "ReactionOnVisions"],
    UserCreateOrConnectWithoutPremisesInput: ["where", "create"],
    VisionCreateWithoutPremiseInput: ["id", "title", "activityDate", "description", "updatedAt", "createdAt", "reference", "author", "thumbnail", "draftMode", "prevVision", "nextVisions", "threadsOnVision", "mergeRequest", "ReactionOnVisions"],
    VisionCreateOrConnectWithoutPremiseInput: ["where", "create"],
    VisionCreateManyPremiseInputEnvelope: ["data", "skipDuplicates"],
    PremisesOnTimelinesCreateWithoutPremiseInput: ["timeline", "assignedAt"],
    PremisesOnTimelinesCreateOrConnectWithoutPremiseInput: ["where", "create"],
    PremisesOnTimelinesCreateManyPremiseInputEnvelope: ["data", "skipDuplicates"],
    TagsOnPremisesCreateWithoutPremiseInput: ["tag", "assignedAt"],
    TagsOnPremisesCreateOrConnectWithoutPremiseInput: ["where", "create"],
    TagsOnPremisesCreateManyPremiseInputEnvelope: ["data", "skipDuplicates"],
    ThreadsOnPremiseCreateWithoutPremiseInput: ["thread", "assignedAt"],
    ThreadsOnPremiseCreateOrConnectWithoutPremiseInput: ["where", "create"],
    ThreadsOnPremiseCreateManyPremiseInputEnvelope: ["data", "skipDuplicates"],
    UserUpsertWithoutPremisesInput: ["update", "create"],
    UserUpdateWithoutPremisesInput: ["id", "name", "email", "emailVerified", "updatedAt", "image", "accounts", "sessions", "threads", "visions", "timelines", "ReactionOnThreads", "ReactionOnTimelines", "ReactionOnVisions"],
    VisionUpsertWithWhereUniqueWithoutPremiseInput: ["where", "update", "create"],
    VisionUpdateWithWhereUniqueWithoutPremiseInput: ["where", "data"],
    VisionUpdateManyWithWhereWithoutPremiseInput: ["where", "data"],
    PremisesOnTimelinesUpsertWithWhereUniqueWithoutPremiseInput: ["where", "update", "create"],
    PremisesOnTimelinesUpdateWithWhereUniqueWithoutPremiseInput: ["where", "data"],
    PremisesOnTimelinesUpdateManyWithWhereWithoutPremiseInput: ["where", "data"],
    PremisesOnTimelinesScalarWhereInput: ["AND", "OR", "NOT", "timelineId", "premiseId", "assignedAt"],
    TagsOnPremisesUpsertWithWhereUniqueWithoutPremiseInput: ["where", "update", "create"],
    TagsOnPremisesUpdateWithWhereUniqueWithoutPremiseInput: ["where", "data"],
    TagsOnPremisesUpdateManyWithWhereWithoutPremiseInput: ["where", "data"],
    TagsOnPremisesScalarWhereInput: ["AND", "OR", "NOT", "tagId", "premiseId", "assignedAt"],
    ThreadsOnPremiseUpsertWithWhereUniqueWithoutPremiseInput: ["where", "update", "create"],
    ThreadsOnPremiseUpdateWithWhereUniqueWithoutPremiseInput: ["where", "data"],
    ThreadsOnPremiseUpdateManyWithWhereWithoutPremiseInput: ["where", "data"],
    ThreadsOnPremiseScalarWhereInput: ["AND", "OR", "NOT", "threadId", "premiseId", "assignedAt"],
    ReferenceCreateWithoutVisionInput: ["id", "snapshots"],
    ReferenceCreateOrConnectWithoutVisionInput: ["where", "create"],
    UserCreateWithoutVisionsInput: ["id", "name", "email", "emailVerified", "updatedAt", "image", "accounts", "sessions", "premises", "threads", "timelines", "ReactionOnThreads", "ReactionOnTimelines", "ReactionOnVisions"],
    UserCreateOrConnectWithoutVisionsInput: ["where", "create"],
    PremiseCreateWithoutVisionInput: ["id", "title", "createdAt", "updatedAt", "status", "author", "premisesOnTimelines", "tagsOnPremises", "threadsOnPremise"],
    PremiseCreateOrConnectWithoutVisionInput: ["where", "create"],
    VisionCreateWithoutNextVisionsInput: ["id", "title", "activityDate", "description", "updatedAt", "createdAt", "reference", "author", "premise", "thumbnail", "draftMode", "prevVision", "threadsOnVision", "mergeRequest", "ReactionOnVisions"],
    VisionCreateOrConnectWithoutNextVisionsInput: ["where", "create"],
    VisionCreateWithoutPrevVisionInput: ["id", "title", "activityDate", "description", "updatedAt", "createdAt", "reference", "author", "premise", "thumbnail", "draftMode", "nextVisions", "threadsOnVision", "mergeRequest", "ReactionOnVisions"],
    VisionCreateOrConnectWithoutPrevVisionInput: ["where", "create"],
    VisionCreateManyPrevVisionInputEnvelope: ["data", "skipDuplicates"],
    ThreadsOnVisionCreateWithoutVisionInput: ["thread", "assignedAt"],
    ThreadsOnVisionCreateOrConnectWithoutVisionInput: ["where", "create"],
    ThreadsOnVisionCreateManyVisionInputEnvelope: ["data", "skipDuplicates"],
    MergeRequestCreateWithoutVisionInput: ["id", "title", "description", "status", "threadsOnMergeRequest"],
    MergeRequestCreateOrConnectWithoutVisionInput: ["where", "create"],
    ReactionOnVisionsCreateWithoutVisionInput: ["user", "reaction", "createdAt"],
    ReactionOnVisionsCreateOrConnectWithoutVisionInput: ["where", "create"],
    ReactionOnVisionsCreateManyVisionInputEnvelope: ["data", "skipDuplicates"],
    ReferenceUpsertWithoutVisionInput: ["update", "create"],
    ReferenceUpdateWithoutVisionInput: ["id", "snapshots"],
    UserUpsertWithoutVisionsInput: ["update", "create"],
    UserUpdateWithoutVisionsInput: ["id", "name", "email", "emailVerified", "updatedAt", "image", "accounts", "sessions", "premises", "threads", "timelines", "ReactionOnThreads", "ReactionOnTimelines", "ReactionOnVisions"],
    PremiseUpsertWithoutVisionInput: ["update", "create"],
    PremiseUpdateWithoutVisionInput: ["id", "title", "createdAt", "updatedAt", "status", "author", "premisesOnTimelines", "tagsOnPremises", "threadsOnPremise"],
    VisionUpsertWithoutNextVisionsInput: ["update", "create"],
    VisionUpdateWithoutNextVisionsInput: ["id", "title", "activityDate", "description", "updatedAt", "createdAt", "reference", "author", "premise", "thumbnail", "draftMode", "prevVision", "threadsOnVision", "mergeRequest", "ReactionOnVisions"],
    VisionUpsertWithWhereUniqueWithoutPrevVisionInput: ["where", "update", "create"],
    VisionUpdateWithWhereUniqueWithoutPrevVisionInput: ["where", "data"],
    VisionUpdateManyWithWhereWithoutPrevVisionInput: ["where", "data"],
    ThreadsOnVisionUpsertWithWhereUniqueWithoutVisionInput: ["where", "update", "create"],
    ThreadsOnVisionUpdateWithWhereUniqueWithoutVisionInput: ["where", "data"],
    ThreadsOnVisionUpdateManyWithWhereWithoutVisionInput: ["where", "data"],
    ThreadsOnVisionScalarWhereInput: ["AND", "OR", "NOT", "threadId", "visionId", "assignedAt"],
    MergeRequestUpsertWithoutVisionInput: ["update", "create"],
    MergeRequestUpdateWithoutVisionInput: ["id", "title", "description", "status", "threadsOnMergeRequest"],
    ReactionOnVisionsUpsertWithWhereUniqueWithoutVisionInput: ["where", "update", "create"],
    ReactionOnVisionsUpdateWithWhereUniqueWithoutVisionInput: ["where", "data"],
    ReactionOnVisionsUpdateManyWithWhereWithoutVisionInput: ["where", "data"],
    SnapshotCreateWithoutReferencesInput: ["id", "createdAt", "versionId", "s3Url", "sourceUrl", "caption"],
    SnapshotCreateOrConnectWithoutReferencesInput: ["where", "create"],
    VisionCreateWithoutReferenceInput: ["id", "title", "activityDate", "description", "updatedAt", "createdAt", "author", "premise", "thumbnail", "draftMode", "prevVision", "nextVisions", "threadsOnVision", "mergeRequest", "ReactionOnVisions"],
    VisionCreateOrConnectWithoutReferenceInput: ["where", "create"],
    VisionCreateManyReferenceInputEnvelope: ["data", "skipDuplicates"],
    SnapshotUpsertWithWhereUniqueWithoutReferencesInput: ["where", "update", "create"],
    SnapshotUpdateWithWhereUniqueWithoutReferencesInput: ["where", "data"],
    SnapshotUpdateManyWithWhereWithoutReferencesInput: ["where", "data"],
    SnapshotScalarWhereInput: ["AND", "OR", "NOT", "id", "createdAt", "versionId", "s3Url", "sourceUrl", "caption"],
    VisionUpsertWithWhereUniqueWithoutReferenceInput: ["where", "update", "create"],
    VisionUpdateWithWhereUniqueWithoutReferenceInput: ["where", "data"],
    VisionUpdateManyWithWhereWithoutReferenceInput: ["where", "data"],
    VisionCreateWithoutMergeRequestInput: ["id", "title", "activityDate", "description", "updatedAt", "createdAt", "reference", "author", "premise", "thumbnail", "draftMode", "prevVision", "nextVisions", "threadsOnVision", "ReactionOnVisions"],
    VisionCreateOrConnectWithoutMergeRequestInput: ["where", "create"],
    ThreadsOnMergeRequestCreateWithoutMergeRequestInput: ["thread", "assignedAt"],
    ThreadsOnMergeRequestCreateOrConnectWithoutMergeRequestInput: ["where", "create"],
    ThreadsOnMergeRequestCreateManyMergeRequestInputEnvelope: ["data", "skipDuplicates"],
    VisionUpsertWithoutMergeRequestInput: ["update", "create"],
    VisionUpdateWithoutMergeRequestInput: ["id", "title", "activityDate", "description", "updatedAt", "createdAt", "reference", "author", "premise", "thumbnail", "draftMode", "prevVision", "nextVisions", "threadsOnVision", "ReactionOnVisions"],
    ThreadsOnMergeRequestUpsertWithWhereUniqueWithoutMergeRequestInput: ["where", "update", "create"],
    ThreadsOnMergeRequestUpdateWithWhereUniqueWithoutMergeRequestInput: ["where", "data"],
    ThreadsOnMergeRequestUpdateManyWithWhereWithoutMergeRequestInput: ["where", "data"],
    ThreadsOnMergeRequestScalarWhereInput: ["AND", "OR", "NOT", "threadId", "mergeRequestId", "assignedAt"],
    UserCreateWithoutTimelinesInput: ["id", "name", "email", "emailVerified", "updatedAt", "image", "accounts", "sessions", "premises", "threads", "visions", "ReactionOnThreads", "ReactionOnTimelines", "ReactionOnVisions"],
    UserCreateOrConnectWithoutTimelinesInput: ["where", "create"],
    PremisesOnTimelinesCreateWithoutTimelineInput: ["premise", "assignedAt"],
    PremisesOnTimelinesCreateOrConnectWithoutTimelineInput: ["where", "create"],
    PremisesOnTimelinesCreateManyTimelineInputEnvelope: ["data", "skipDuplicates"],
    TagsOnTimelinesCreateWithoutTimelineInput: ["tag", "assignedAt"],
    TagsOnTimelinesCreateOrConnectWithoutTimelineInput: ["where", "create"],
    TagsOnTimelinesCreateManyTimelineInputEnvelope: ["data", "skipDuplicates"],
    ThreadsOnTimelineCreateWithoutTimelineInput: ["thread", "assignedAt"],
    ThreadsOnTimelineCreateOrConnectWithoutTimelineInput: ["where", "create"],
    ThreadsOnTimelineCreateManyTimelineInputEnvelope: ["data", "skipDuplicates"],
    ReactionOnTimelinesCreateWithoutTimelineInput: ["user", "reaction", "createdAt"],
    ReactionOnTimelinesCreateOrConnectWithoutTimelineInput: ["where", "create"],
    ReactionOnTimelinesCreateManyTimelineInputEnvelope: ["data", "skipDuplicates"],
    UserUpsertWithoutTimelinesInput: ["update", "create"],
    UserUpdateWithoutTimelinesInput: ["id", "name", "email", "emailVerified", "updatedAt", "image", "accounts", "sessions", "premises", "threads", "visions", "ReactionOnThreads", "ReactionOnTimelines", "ReactionOnVisions"],
    PremisesOnTimelinesUpsertWithWhereUniqueWithoutTimelineInput: ["where", "update", "create"],
    PremisesOnTimelinesUpdateWithWhereUniqueWithoutTimelineInput: ["where", "data"],
    PremisesOnTimelinesUpdateManyWithWhereWithoutTimelineInput: ["where", "data"],
    TagsOnTimelinesUpsertWithWhereUniqueWithoutTimelineInput: ["where", "update", "create"],
    TagsOnTimelinesUpdateWithWhereUniqueWithoutTimelineInput: ["where", "data"],
    TagsOnTimelinesUpdateManyWithWhereWithoutTimelineInput: ["where", "data"],
    TagsOnTimelinesScalarWhereInput: ["AND", "OR", "NOT", "tagId", "timelineId", "assignedAt"],
    ThreadsOnTimelineUpsertWithWhereUniqueWithoutTimelineInput: ["where", "update", "create"],
    ThreadsOnTimelineUpdateWithWhereUniqueWithoutTimelineInput: ["where", "data"],
    ThreadsOnTimelineUpdateManyWithWhereWithoutTimelineInput: ["where", "data"],
    ThreadsOnTimelineScalarWhereInput: ["AND", "OR", "NOT", "threadId", "timelineId", "assignedAt"],
    ReactionOnTimelinesUpsertWithWhereUniqueWithoutTimelineInput: ["where", "update", "create"],
    ReactionOnTimelinesUpdateWithWhereUniqueWithoutTimelineInput: ["where", "data"],
    ReactionOnTimelinesUpdateManyWithWhereWithoutTimelineInput: ["where", "data"],
    TagsOnPremisesCreateWithoutTagInput: ["premise", "assignedAt"],
    TagsOnPremisesCreateOrConnectWithoutTagInput: ["where", "create"],
    TagsOnPremisesCreateManyTagInputEnvelope: ["data", "skipDuplicates"],
    TagsOnTimelinesCreateWithoutTagInput: ["timeline", "assignedAt"],
    TagsOnTimelinesCreateOrConnectWithoutTagInput: ["where", "create"],
    TagsOnTimelinesCreateManyTagInputEnvelope: ["data", "skipDuplicates"],
    TagsOnPremisesUpsertWithWhereUniqueWithoutTagInput: ["where", "update", "create"],
    TagsOnPremisesUpdateWithWhereUniqueWithoutTagInput: ["where", "data"],
    TagsOnPremisesUpdateManyWithWhereWithoutTagInput: ["where", "data"],
    TagsOnTimelinesUpsertWithWhereUniqueWithoutTagInput: ["where", "update", "create"],
    TagsOnTimelinesUpdateWithWhereUniqueWithoutTagInput: ["where", "data"],
    TagsOnTimelinesUpdateManyWithWhereWithoutTagInput: ["where", "data"],
    TagCreateWithoutTagsOnPremisesInput: ["label", "tagsOnTimelines"],
    TagCreateOrConnectWithoutTagsOnPremisesInput: ["where", "create"],
    PremiseCreateWithoutTagsOnPremisesInput: ["id", "title", "createdAt", "updatedAt", "status", "author", "vision", "premisesOnTimelines", "threadsOnPremise"],
    PremiseCreateOrConnectWithoutTagsOnPremisesInput: ["where", "create"],
    TagUpsertWithoutTagsOnPremisesInput: ["update", "create"],
    TagUpdateWithoutTagsOnPremisesInput: ["label", "tagsOnTimelines"],
    PremiseUpsertWithoutTagsOnPremisesInput: ["update", "create"],
    PremiseUpdateWithoutTagsOnPremisesInput: ["id", "title", "createdAt", "updatedAt", "status", "author", "vision", "premisesOnTimelines", "threadsOnPremise"],
    TagCreateWithoutTagsOnTimelinesInput: ["label", "tagsOnPremises"],
    TagCreateOrConnectWithoutTagsOnTimelinesInput: ["where", "create"],
    TimelineCreateWithoutTagsOnTimelinesInput: ["id", "title", "description", "status", "author", "premisesOnTimelines", "threadsOnTimeline", "ReactionOnTimelines"],
    TimelineCreateOrConnectWithoutTagsOnTimelinesInput: ["where", "create"],
    TagUpsertWithoutTagsOnTimelinesInput: ["update", "create"],
    TagUpdateWithoutTagsOnTimelinesInput: ["label", "tagsOnPremises"],
    TimelineUpsertWithoutTagsOnTimelinesInput: ["update", "create"],
    TimelineUpdateWithoutTagsOnTimelinesInput: ["id", "title", "description", "status", "author", "premisesOnTimelines", "threadsOnTimeline", "ReactionOnTimelines"],
    TimelineCreateWithoutPremisesOnTimelinesInput: ["id", "title", "description", "status", "author", "tagsOnTimelines", "threadsOnTimeline", "ReactionOnTimelines"],
    TimelineCreateOrConnectWithoutPremisesOnTimelinesInput: ["where", "create"],
    PremiseCreateWithoutPremisesOnTimelinesInput: ["id", "title", "createdAt", "updatedAt", "status", "author", "vision", "tagsOnPremises", "threadsOnPremise"],
    PremiseCreateOrConnectWithoutPremisesOnTimelinesInput: ["where", "create"],
    TimelineUpsertWithoutPremisesOnTimelinesInput: ["update", "create"],
    TimelineUpdateWithoutPremisesOnTimelinesInput: ["id", "title", "description", "status", "author", "tagsOnTimelines", "threadsOnTimeline", "ReactionOnTimelines"],
    PremiseUpsertWithoutPremisesOnTimelinesInput: ["update", "create"],
    PremiseUpdateWithoutPremisesOnTimelinesInput: ["id", "title", "createdAt", "updatedAt", "status", "author", "vision", "tagsOnPremises", "threadsOnPremise"],
    ReferenceCreateWithoutSnapshotsInput: ["id", "Vision"],
    ReferenceCreateOrConnectWithoutSnapshotsInput: ["where", "create"],
    ReferenceUpsertWithWhereUniqueWithoutSnapshotsInput: ["where", "update", "create"],
    ReferenceUpdateWithWhereUniqueWithoutSnapshotsInput: ["where", "data"],
    ReferenceUpdateManyWithWhereWithoutSnapshotsInput: ["where", "data"],
    ReferenceScalarWhereInput: ["AND", "OR", "NOT", "id"],
    UserCreateWithoutThreadsInput: ["id", "name", "email", "emailVerified", "updatedAt", "image", "accounts", "sessions", "premises", "visions", "timelines", "ReactionOnThreads", "ReactionOnTimelines", "ReactionOnVisions"],
    UserCreateOrConnectWithoutThreadsInput: ["where", "create"],
    ThreadCreateWithoutChildThreadsInput: ["id", "title", "activityDate", "description", "createdAt", "reference", "author", "parentThread", "threadsOnPremise", "threadsOnTimeline", "threadsOnVision", "threadsOnMergeRequest", "ReactionOnThreads"],
    ThreadCreateOrConnectWithoutChildThreadsInput: ["where", "create"],
    ThreadCreateWithoutParentThreadInput: ["id", "title", "activityDate", "description", "createdAt", "reference", "author", "childThreads", "threadsOnPremise", "threadsOnTimeline", "threadsOnVision", "threadsOnMergeRequest", "ReactionOnThreads"],
    ThreadCreateOrConnectWithoutParentThreadInput: ["where", "create"],
    ThreadCreateManyParentThreadInputEnvelope: ["data", "skipDuplicates"],
    ThreadsOnPremiseCreateWithoutThreadInput: ["premise", "assignedAt"],
    ThreadsOnPremiseCreateOrConnectWithoutThreadInput: ["where", "create"],
    ThreadsOnTimelineCreateWithoutThreadInput: ["timeline", "assignedAt"],
    ThreadsOnTimelineCreateOrConnectWithoutThreadInput: ["where", "create"],
    ThreadsOnVisionCreateWithoutThreadInput: ["vision", "assignedAt"],
    ThreadsOnVisionCreateOrConnectWithoutThreadInput: ["where", "create"],
    ThreadsOnMergeRequestCreateWithoutThreadInput: ["mergeRequest", "assignedAt"],
    ThreadsOnMergeRequestCreateOrConnectWithoutThreadInput: ["where", "create"],
    ReactionOnThreadsCreateWithoutThreadInput: ["user", "reaction", "createdAt"],
    ReactionOnThreadsCreateOrConnectWithoutThreadInput: ["where", "create"],
    ReactionOnThreadsCreateManyThreadInputEnvelope: ["data", "skipDuplicates"],
    UserUpsertWithoutThreadsInput: ["update", "create"],
    UserUpdateWithoutThreadsInput: ["id", "name", "email", "emailVerified", "updatedAt", "image", "accounts", "sessions", "premises", "visions", "timelines", "ReactionOnThreads", "ReactionOnTimelines", "ReactionOnVisions"],
    ThreadUpsertWithoutChildThreadsInput: ["update", "create"],
    ThreadUpdateWithoutChildThreadsInput: ["id", "title", "activityDate", "description", "createdAt", "reference", "author", "parentThread", "threadsOnPremise", "threadsOnTimeline", "threadsOnVision", "threadsOnMergeRequest", "ReactionOnThreads"],
    ThreadUpsertWithWhereUniqueWithoutParentThreadInput: ["where", "update", "create"],
    ThreadUpdateWithWhereUniqueWithoutParentThreadInput: ["where", "data"],
    ThreadUpdateManyWithWhereWithoutParentThreadInput: ["where", "data"],
    ThreadsOnPremiseUpsertWithoutThreadInput: ["update", "create"],
    ThreadsOnPremiseUpdateWithoutThreadInput: ["premise", "assignedAt"],
    ThreadsOnTimelineUpsertWithoutThreadInput: ["update", "create"],
    ThreadsOnTimelineUpdateWithoutThreadInput: ["timeline", "assignedAt"],
    ThreadsOnVisionUpsertWithoutThreadInput: ["update", "create"],
    ThreadsOnVisionUpdateWithoutThreadInput: ["vision", "assignedAt"],
    ThreadsOnMergeRequestUpsertWithoutThreadInput: ["update", "create"],
    ThreadsOnMergeRequestUpdateWithoutThreadInput: ["mergeRequest", "assignedAt"],
    ReactionOnThreadsUpsertWithWhereUniqueWithoutThreadInput: ["where", "update", "create"],
    ReactionOnThreadsUpdateWithWhereUniqueWithoutThreadInput: ["where", "data"],
    ReactionOnThreadsUpdateManyWithWhereWithoutThreadInput: ["where", "data"],
    ThreadCreateWithoutThreadsOnMergeRequestInput: ["id", "title", "activityDate", "description", "createdAt", "reference", "author", "parentThread", "childThreads", "threadsOnPremise", "threadsOnTimeline", "threadsOnVision", "ReactionOnThreads"],
    ThreadCreateOrConnectWithoutThreadsOnMergeRequestInput: ["where", "create"],
    MergeRequestCreateWithoutThreadsOnMergeRequestInput: ["id", "title", "description", "status", "vision"],
    MergeRequestCreateOrConnectWithoutThreadsOnMergeRequestInput: ["where", "create"],
    ThreadUpsertWithoutThreadsOnMergeRequestInput: ["update", "create"],
    ThreadUpdateWithoutThreadsOnMergeRequestInput: ["id", "title", "activityDate", "description", "createdAt", "reference", "author", "parentThread", "childThreads", "threadsOnPremise", "threadsOnTimeline", "threadsOnVision", "ReactionOnThreads"],
    MergeRequestUpsertWithoutThreadsOnMergeRequestInput: ["update", "create"],
    MergeRequestUpdateWithoutThreadsOnMergeRequestInput: ["id", "title", "description", "status", "vision"],
    ThreadCreateWithoutThreadsOnPremiseInput: ["id", "title", "activityDate", "description", "createdAt", "reference", "author", "parentThread", "childThreads", "threadsOnTimeline", "threadsOnVision", "threadsOnMergeRequest", "ReactionOnThreads"],
    ThreadCreateOrConnectWithoutThreadsOnPremiseInput: ["where", "create"],
    PremiseCreateWithoutThreadsOnPremiseInput: ["id", "title", "createdAt", "updatedAt", "status", "author", "vision", "premisesOnTimelines", "tagsOnPremises"],
    PremiseCreateOrConnectWithoutThreadsOnPremiseInput: ["where", "create"],
    ThreadUpsertWithoutThreadsOnPremiseInput: ["update", "create"],
    ThreadUpdateWithoutThreadsOnPremiseInput: ["id", "title", "activityDate", "description", "createdAt", "reference", "author", "parentThread", "childThreads", "threadsOnTimeline", "threadsOnVision", "threadsOnMergeRequest", "ReactionOnThreads"],
    PremiseUpsertWithoutThreadsOnPremiseInput: ["update", "create"],
    PremiseUpdateWithoutThreadsOnPremiseInput: ["id", "title", "createdAt", "updatedAt", "status", "author", "vision", "premisesOnTimelines", "tagsOnPremises"],
    ThreadCreateWithoutThreadsOnTimelineInput: ["id", "title", "activityDate", "description", "createdAt", "reference", "author", "parentThread", "childThreads", "threadsOnPremise", "threadsOnVision", "threadsOnMergeRequest", "ReactionOnThreads"],
    ThreadCreateOrConnectWithoutThreadsOnTimelineInput: ["where", "create"],
    TimelineCreateWithoutThreadsOnTimelineInput: ["id", "title", "description", "status", "author", "premisesOnTimelines", "tagsOnTimelines", "ReactionOnTimelines"],
    TimelineCreateOrConnectWithoutThreadsOnTimelineInput: ["where", "create"],
    ThreadUpsertWithoutThreadsOnTimelineInput: ["update", "create"],
    ThreadUpdateWithoutThreadsOnTimelineInput: ["id", "title", "activityDate", "description", "createdAt", "reference", "author", "parentThread", "childThreads", "threadsOnPremise", "threadsOnVision", "threadsOnMergeRequest", "ReactionOnThreads"],
    TimelineUpsertWithoutThreadsOnTimelineInput: ["update", "create"],
    TimelineUpdateWithoutThreadsOnTimelineInput: ["id", "title", "description", "status", "author", "premisesOnTimelines", "tagsOnTimelines", "ReactionOnTimelines"],
    UserCreateWithoutReactionOnThreadsInput: ["id", "name", "email", "emailVerified", "updatedAt", "image", "accounts", "sessions", "premises", "threads", "visions", "timelines", "ReactionOnTimelines", "ReactionOnVisions"],
    UserCreateOrConnectWithoutReactionOnThreadsInput: ["where", "create"],
    ThreadCreateWithoutReactionOnThreadsInput: ["id", "title", "activityDate", "description", "createdAt", "reference", "author", "parentThread", "childThreads", "threadsOnPremise", "threadsOnTimeline", "threadsOnVision", "threadsOnMergeRequest"],
    ThreadCreateOrConnectWithoutReactionOnThreadsInput: ["where", "create"],
    UserUpsertWithoutReactionOnThreadsInput: ["update", "create"],
    UserUpdateWithoutReactionOnThreadsInput: ["id", "name", "email", "emailVerified", "updatedAt", "image", "accounts", "sessions", "premises", "threads", "visions", "timelines", "ReactionOnTimelines", "ReactionOnVisions"],
    ThreadUpsertWithoutReactionOnThreadsInput: ["update", "create"],
    ThreadUpdateWithoutReactionOnThreadsInput: ["id", "title", "activityDate", "description", "createdAt", "reference", "author", "parentThread", "childThreads", "threadsOnPremise", "threadsOnTimeline", "threadsOnVision", "threadsOnMergeRequest"],
    UserCreateWithoutReactionOnTimelinesInput: ["id", "name", "email", "emailVerified", "updatedAt", "image", "accounts", "sessions", "premises", "threads", "visions", "timelines", "ReactionOnThreads", "ReactionOnVisions"],
    UserCreateOrConnectWithoutReactionOnTimelinesInput: ["where", "create"],
    TimelineCreateWithoutReactionOnTimelinesInput: ["id", "title", "description", "status", "author", "premisesOnTimelines", "tagsOnTimelines", "threadsOnTimeline"],
    TimelineCreateOrConnectWithoutReactionOnTimelinesInput: ["where", "create"],
    UserUpsertWithoutReactionOnTimelinesInput: ["update", "create"],
    UserUpdateWithoutReactionOnTimelinesInput: ["id", "name", "email", "emailVerified", "updatedAt", "image", "accounts", "sessions", "premises", "threads", "visions", "timelines", "ReactionOnThreads", "ReactionOnVisions"],
    TimelineUpsertWithoutReactionOnTimelinesInput: ["update", "create"],
    TimelineUpdateWithoutReactionOnTimelinesInput: ["id", "title", "description", "status", "author", "premisesOnTimelines", "tagsOnTimelines", "threadsOnTimeline"],
    UserCreateWithoutReactionOnVisionsInput: ["id", "name", "email", "emailVerified", "updatedAt", "image", "accounts", "sessions", "premises", "threads", "visions", "timelines", "ReactionOnThreads", "ReactionOnTimelines"],
    UserCreateOrConnectWithoutReactionOnVisionsInput: ["where", "create"],
    VisionCreateWithoutReactionOnVisionsInput: ["id", "title", "activityDate", "description", "updatedAt", "createdAt", "reference", "author", "premise", "thumbnail", "draftMode", "prevVision", "nextVisions", "threadsOnVision", "mergeRequest"],
    VisionCreateOrConnectWithoutReactionOnVisionsInput: ["where", "create"],
    UserUpsertWithoutReactionOnVisionsInput: ["update", "create"],
    UserUpdateWithoutReactionOnVisionsInput: ["id", "name", "email", "emailVerified", "updatedAt", "image", "accounts", "sessions", "premises", "threads", "visions", "timelines", "ReactionOnThreads", "ReactionOnTimelines"],
    VisionUpsertWithoutReactionOnVisionsInput: ["update", "create"],
    VisionUpdateWithoutReactionOnVisionsInput: ["id", "title", "activityDate", "description", "updatedAt", "createdAt", "reference", "author", "premise", "thumbnail", "draftMode", "prevVision", "nextVisions", "threadsOnVision", "mergeRequest"],
    ThreadCreateWithoutThreadsOnVisionInput: ["id", "title", "activityDate", "description", "createdAt", "reference", "author", "parentThread", "childThreads", "threadsOnPremise", "threadsOnTimeline", "threadsOnMergeRequest", "ReactionOnThreads"],
    ThreadCreateOrConnectWithoutThreadsOnVisionInput: ["where", "create"],
    VisionCreateWithoutThreadsOnVisionInput: ["id", "title", "activityDate", "description", "updatedAt", "createdAt", "reference", "author", "premise", "thumbnail", "draftMode", "prevVision", "nextVisions", "mergeRequest", "ReactionOnVisions"],
    VisionCreateOrConnectWithoutThreadsOnVisionInput: ["where", "create"],
    ThreadUpsertWithoutThreadsOnVisionInput: ["update", "create"],
    ThreadUpdateWithoutThreadsOnVisionInput: ["id", "title", "activityDate", "description", "createdAt", "reference", "author", "parentThread", "childThreads", "threadsOnPremise", "threadsOnTimeline", "threadsOnMergeRequest", "ReactionOnThreads"],
    VisionUpsertWithoutThreadsOnVisionInput: ["update", "create"],
    VisionUpdateWithoutThreadsOnVisionInput: ["id", "title", "activityDate", "description", "updatedAt", "createdAt", "reference", "author", "premise", "thumbnail", "draftMode", "prevVision", "nextVisions", "mergeRequest", "ReactionOnVisions"],
    AccountCreateManyUserInput: ["id", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state"],
    SessionCreateManyUserInput: ["id", "sessionToken", "expires"],
    PremiseCreateManyAuthorInput: ["id", "title", "createdAt", "updatedAt", "status"],
    ThreadCreateManyAuthorInput: ["id", "title", "activityDate", "description", "createdAt", "reference", "parentThreadId"],
    VisionCreateManyAuthorInput: ["id", "title", "activityDate", "description", "updatedAt", "createdAt", "referenceId", "thumbnail", "premiseId", "draftMode", "prevVisionId"],
    TimelineCreateManyAuthorInput: ["id", "title", "description", "status"],
    ReactionOnThreadsCreateManyUserInput: ["threadId", "reaction", "createdAt"],
    ReactionOnTimelinesCreateManyUserInput: ["timelineId", "reaction", "createdAt"],
    ReactionOnVisionsCreateManyUserInput: ["visionId", "reaction", "createdAt"],
    AccountUpdateWithoutUserInput: ["id", "type", "provider", "providerAccountId", "refresh_token", "access_token", "expires_at", "token_type", "scope", "id_token", "session_state"],
    SessionUpdateWithoutUserInput: ["id", "sessionToken", "expires"],
    PremiseUpdateWithoutAuthorInput: ["id", "title", "createdAt", "updatedAt", "status", "vision", "premisesOnTimelines", "tagsOnPremises", "threadsOnPremise"],
    ThreadUpdateWithoutAuthorInput: ["id", "title", "activityDate", "description", "createdAt", "reference", "parentThread", "childThreads", "threadsOnPremise", "threadsOnTimeline", "threadsOnVision", "threadsOnMergeRequest", "ReactionOnThreads"],
    VisionUpdateWithoutAuthorInput: ["id", "title", "activityDate", "description", "updatedAt", "createdAt", "reference", "premise", "thumbnail", "draftMode", "prevVision", "nextVisions", "threadsOnVision", "mergeRequest", "ReactionOnVisions"],
    TimelineUpdateWithoutAuthorInput: ["id", "title", "description", "status", "premisesOnTimelines", "tagsOnTimelines", "threadsOnTimeline", "ReactionOnTimelines"],
    ReactionOnThreadsUpdateWithoutUserInput: ["thread", "reaction", "createdAt"],
    ReactionOnTimelinesUpdateWithoutUserInput: ["timeline", "reaction", "createdAt"],
    ReactionOnVisionsUpdateWithoutUserInput: ["vision", "reaction", "createdAt"],
    VisionCreateManyPremiseInput: ["id", "title", "activityDate", "description", "updatedAt", "createdAt", "referenceId", "authorId", "thumbnail", "draftMode", "prevVisionId"],
    PremisesOnTimelinesCreateManyPremiseInput: ["timelineId", "assignedAt"],
    TagsOnPremisesCreateManyPremiseInput: ["tagId", "assignedAt"],
    ThreadsOnPremiseCreateManyPremiseInput: ["threadId", "assignedAt"],
    VisionUpdateWithoutPremiseInput: ["id", "title", "activityDate", "description", "updatedAt", "createdAt", "reference", "author", "thumbnail", "draftMode", "prevVision", "nextVisions", "threadsOnVision", "mergeRequest", "ReactionOnVisions"],
    PremisesOnTimelinesUpdateWithoutPremiseInput: ["timeline", "assignedAt"],
    TagsOnPremisesUpdateWithoutPremiseInput: ["tag", "assignedAt"],
    ThreadsOnPremiseUpdateWithoutPremiseInput: ["thread", "assignedAt"],
    VisionCreateManyPrevVisionInput: ["id", "title", "activityDate", "description", "updatedAt", "createdAt", "referenceId", "authorId", "thumbnail", "premiseId", "draftMode"],
    ThreadsOnVisionCreateManyVisionInput: ["threadId", "assignedAt"],
    ReactionOnVisionsCreateManyVisionInput: ["userId", "reaction", "createdAt"],
    VisionUpdateWithoutPrevVisionInput: ["id", "title", "activityDate", "description", "updatedAt", "createdAt", "reference", "author", "premise", "thumbnail", "draftMode", "nextVisions", "threadsOnVision", "mergeRequest", "ReactionOnVisions"],
    ThreadsOnVisionUpdateWithoutVisionInput: ["thread", "assignedAt"],
    ReactionOnVisionsUpdateWithoutVisionInput: ["user", "reaction", "createdAt"],
    VisionCreateManyReferenceInput: ["id", "title", "activityDate", "description", "updatedAt", "createdAt", "authorId", "thumbnail", "premiseId", "draftMode", "prevVisionId"],
    SnapshotUpdateWithoutReferencesInput: ["id", "createdAt", "versionId", "s3Url", "sourceUrl", "caption"],
    VisionUpdateWithoutReferenceInput: ["id", "title", "activityDate", "description", "updatedAt", "createdAt", "author", "premise", "thumbnail", "draftMode", "prevVision", "nextVisions", "threadsOnVision", "mergeRequest", "ReactionOnVisions"],
    ThreadsOnMergeRequestCreateManyMergeRequestInput: ["threadId", "assignedAt"],
    ThreadsOnMergeRequestUpdateWithoutMergeRequestInput: ["thread", "assignedAt"],
    PremisesOnTimelinesCreateManyTimelineInput: ["premiseId", "assignedAt"],
    TagsOnTimelinesCreateManyTimelineInput: ["tagId", "assignedAt"],
    ThreadsOnTimelineCreateManyTimelineInput: ["threadId", "assignedAt"],
    ReactionOnTimelinesCreateManyTimelineInput: ["userId", "reaction", "createdAt"],
    PremisesOnTimelinesUpdateWithoutTimelineInput: ["premise", "assignedAt"],
    TagsOnTimelinesUpdateWithoutTimelineInput: ["tag", "assignedAt"],
    ThreadsOnTimelineUpdateWithoutTimelineInput: ["thread", "assignedAt"],
    ReactionOnTimelinesUpdateWithoutTimelineInput: ["user", "reaction", "createdAt"],
    TagsOnPremisesCreateManyTagInput: ["premiseId", "assignedAt"],
    TagsOnTimelinesCreateManyTagInput: ["timelineId", "assignedAt"],
    TagsOnPremisesUpdateWithoutTagInput: ["premise", "assignedAt"],
    TagsOnTimelinesUpdateWithoutTagInput: ["timeline", "assignedAt"],
    ReferenceUpdateWithoutSnapshotsInput: ["id", "Vision"],
    ThreadCreateManyParentThreadInput: ["id", "title", "activityDate", "description", "createdAt", "reference", "authorId"],
    ReactionOnThreadsCreateManyThreadInput: ["userId", "reaction", "createdAt"],
    ThreadUpdateWithoutParentThreadInput: ["id", "title", "activityDate", "description", "createdAt", "reference", "author", "childThreads", "threadsOnPremise", "threadsOnTimeline", "threadsOnVision", "threadsOnMergeRequest", "ReactionOnThreads"],
    ReactionOnThreadsUpdateWithoutThreadInput: ["user", "reaction", "createdAt"]
};
function applyInputTypesEnhanceMap(inputTypesEnhanceMap) {
    for (const inputTypeEnhanceMapKey of Object.keys(inputTypesEnhanceMap)) {
        const inputTypeName = inputTypeEnhanceMapKey;
        const typeConfig = inputTypesEnhanceMap[inputTypeName];
        const typeClass = inputTypes[inputTypeName];
        const typeTarget = typeClass.prototype;
        applyTypeClassEnhanceConfig(typeConfig, typeClass, typeTarget, inputsInfo[inputTypeName]);
    }
}
exports.applyInputTypesEnhanceMap = applyInputTypesEnhanceMap;
