# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Account {
  access_token: String
  expires_at: Int
  id: String!
  id_token: String
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
  user: User!
  userId: String!
}

type AccountAvgAggregate {
  expires_at: Float
}

input AccountAvgOrderByAggregateInput {
  expires_at: SortOrder
}

type AccountCountAggregate {
  _all: Int!
  access_token: Int!
  expires_at: Int!
  id: Int!
  id_token: Int!
  provider: Int!
  providerAccountId: Int!
  refresh_token: Int!
  scope: Int!
  session_state: Int!
  token_type: Int!
  type: Int!
  userId: Int!
}

input AccountCountOrderByAggregateInput {
  access_token: SortOrder
  expires_at: SortOrder
  id: SortOrder
  id_token: SortOrder
  provider: SortOrder
  providerAccountId: SortOrder
  refresh_token: SortOrder
  scope: SortOrder
  session_state: SortOrder
  token_type: SortOrder
  type: SortOrder
  userId: SortOrder
}

input AccountCreateInput {
  access_token: String
  expires_at: Int
  id: String
  id_token: String
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
  user: UserCreateNestedOneWithoutAccountsInput!
}

input AccountCreateManyInput {
  access_token: String
  expires_at: Int
  id: String
  id_token: String
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
  userId: String!
}

input AccountCreateManyUserInput {
  access_token: String
  expires_at: Int
  id: String
  id_token: String
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
}

input AccountCreateManyUserInputEnvelope {
  data: [AccountCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input AccountCreateNestedManyWithoutUserInput {
  connect: [AccountWhereUniqueInput!]
  connectOrCreate: [AccountCreateOrConnectWithoutUserInput!]
  create: [AccountCreateWithoutUserInput!]
  createMany: AccountCreateManyUserInputEnvelope
}

input AccountCreateOrConnectWithoutUserInput {
  create: AccountCreateWithoutUserInput!
  where: AccountWhereUniqueInput!
}

input AccountCreateWithoutUserInput {
  access_token: String
  expires_at: Int
  id: String
  id_token: String
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
}

type AccountGroupBy {
  _avg: AccountAvgAggregate
  _count: AccountCountAggregate
  _max: AccountMaxAggregate
  _min: AccountMinAggregate
  _sum: AccountSumAggregate
  access_token: String
  expires_at: Int
  id: String!
  id_token: String
  provider: String!
  providerAccountId: String!
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String!
  userId: String!
}

input AccountListRelationFilter {
  every: AccountWhereInput
  none: AccountWhereInput
  some: AccountWhereInput
}

type AccountMaxAggregate {
  access_token: String
  expires_at: Int
  id: String
  id_token: String
  provider: String
  providerAccountId: String
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String
  userId: String
}

input AccountMaxOrderByAggregateInput {
  access_token: SortOrder
  expires_at: SortOrder
  id: SortOrder
  id_token: SortOrder
  provider: SortOrder
  providerAccountId: SortOrder
  refresh_token: SortOrder
  scope: SortOrder
  session_state: SortOrder
  token_type: SortOrder
  type: SortOrder
  userId: SortOrder
}

type AccountMinAggregate {
  access_token: String
  expires_at: Int
  id: String
  id_token: String
  provider: String
  providerAccountId: String
  refresh_token: String
  scope: String
  session_state: String
  token_type: String
  type: String
  userId: String
}

input AccountMinOrderByAggregateInput {
  access_token: SortOrder
  expires_at: SortOrder
  id: SortOrder
  id_token: SortOrder
  provider: SortOrder
  providerAccountId: SortOrder
  refresh_token: SortOrder
  scope: SortOrder
  session_state: SortOrder
  token_type: SortOrder
  type: SortOrder
  userId: SortOrder
}

input AccountOrderByRelationAggregateInput {
  _count: SortOrder
}

input AccountOrderByWithAggregationInput {
  _avg: AccountAvgOrderByAggregateInput
  _count: AccountCountOrderByAggregateInput
  _max: AccountMaxOrderByAggregateInput
  _min: AccountMinOrderByAggregateInput
  _sum: AccountSumOrderByAggregateInput
  access_token: SortOrder
  expires_at: SortOrder
  id: SortOrder
  id_token: SortOrder
  provider: SortOrder
  providerAccountId: SortOrder
  refresh_token: SortOrder
  scope: SortOrder
  session_state: SortOrder
  token_type: SortOrder
  type: SortOrder
  userId: SortOrder
}

input AccountOrderByWithRelationInput {
  access_token: SortOrder
  expires_at: SortOrder
  id: SortOrder
  id_token: SortOrder
  provider: SortOrder
  providerAccountId: SortOrder
  refresh_token: SortOrder
  scope: SortOrder
  session_state: SortOrder
  token_type: SortOrder
  type: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

input AccountProviderProviderAccountIdCompoundUniqueInput {
  provider: String!
  providerAccountId: String!
}

enum AccountScalarFieldEnum {
  access_token
  expires_at
  id
  id_token
  provider
  providerAccountId
  refresh_token
  scope
  session_state
  token_type
  type
  userId
}

input AccountScalarWhereInput {
  AND: [AccountScalarWhereInput!]
  NOT: [AccountScalarWhereInput!]
  OR: [AccountScalarWhereInput!]
  access_token: StringNullableFilter
  expires_at: IntNullableFilter
  id: StringFilter
  id_token: StringNullableFilter
  provider: StringFilter
  providerAccountId: StringFilter
  refresh_token: StringNullableFilter
  scope: StringNullableFilter
  session_state: StringNullableFilter
  token_type: StringNullableFilter
  type: StringFilter
  userId: StringFilter
}

input AccountScalarWhereWithAggregatesInput {
  AND: [AccountScalarWhereWithAggregatesInput!]
  NOT: [AccountScalarWhereWithAggregatesInput!]
  OR: [AccountScalarWhereWithAggregatesInput!]
  access_token: StringNullableWithAggregatesFilter
  expires_at: IntNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  id_token: StringNullableWithAggregatesFilter
  provider: StringWithAggregatesFilter
  providerAccountId: StringWithAggregatesFilter
  refresh_token: StringNullableWithAggregatesFilter
  scope: StringNullableWithAggregatesFilter
  session_state: StringNullableWithAggregatesFilter
  token_type: StringNullableWithAggregatesFilter
  type: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

type AccountSumAggregate {
  expires_at: Int
}

input AccountSumOrderByAggregateInput {
  expires_at: SortOrder
}

input AccountUpdateInput {
  access_token: NullableStringFieldUpdateOperationsInput
  expires_at: NullableIntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  id_token: NullableStringFieldUpdateOperationsInput
  provider: StringFieldUpdateOperationsInput
  providerAccountId: StringFieldUpdateOperationsInput
  refresh_token: NullableStringFieldUpdateOperationsInput
  scope: NullableStringFieldUpdateOperationsInput
  session_state: NullableStringFieldUpdateOperationsInput
  token_type: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutAccountsInput
}

input AccountUpdateManyMutationInput {
  access_token: NullableStringFieldUpdateOperationsInput
  expires_at: NullableIntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  id_token: NullableStringFieldUpdateOperationsInput
  provider: StringFieldUpdateOperationsInput
  providerAccountId: StringFieldUpdateOperationsInput
  refresh_token: NullableStringFieldUpdateOperationsInput
  scope: NullableStringFieldUpdateOperationsInput
  session_state: NullableStringFieldUpdateOperationsInput
  token_type: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
}

input AccountUpdateManyWithWhereWithoutUserInput {
  data: AccountUpdateManyMutationInput!
  where: AccountScalarWhereInput!
}

input AccountUpdateManyWithoutUserInput {
  connect: [AccountWhereUniqueInput!]
  connectOrCreate: [AccountCreateOrConnectWithoutUserInput!]
  create: [AccountCreateWithoutUserInput!]
  createMany: AccountCreateManyUserInputEnvelope
  delete: [AccountWhereUniqueInput!]
  deleteMany: [AccountScalarWhereInput!]
  disconnect: [AccountWhereUniqueInput!]
  set: [AccountWhereUniqueInput!]
  update: [AccountUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [AccountUpdateManyWithWhereWithoutUserInput!]
  upsert: [AccountUpsertWithWhereUniqueWithoutUserInput!]
}

input AccountUpdateWithWhereUniqueWithoutUserInput {
  data: AccountUpdateWithoutUserInput!
  where: AccountWhereUniqueInput!
}

input AccountUpdateWithoutUserInput {
  access_token: NullableStringFieldUpdateOperationsInput
  expires_at: NullableIntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  id_token: NullableStringFieldUpdateOperationsInput
  provider: StringFieldUpdateOperationsInput
  providerAccountId: StringFieldUpdateOperationsInput
  refresh_token: NullableStringFieldUpdateOperationsInput
  scope: NullableStringFieldUpdateOperationsInput
  session_state: NullableStringFieldUpdateOperationsInput
  token_type: NullableStringFieldUpdateOperationsInput
  type: StringFieldUpdateOperationsInput
}

input AccountUpsertWithWhereUniqueWithoutUserInput {
  create: AccountCreateWithoutUserInput!
  update: AccountUpdateWithoutUserInput!
  where: AccountWhereUniqueInput!
}

input AccountWhereInput {
  AND: [AccountWhereInput!]
  NOT: [AccountWhereInput!]
  OR: [AccountWhereInput!]
  access_token: StringNullableFilter
  expires_at: IntNullableFilter
  id: StringFilter
  id_token: StringNullableFilter
  provider: StringFilter
  providerAccountId: StringFilter
  refresh_token: StringNullableFilter
  scope: StringNullableFilter
  session_state: StringNullableFilter
  token_type: StringNullableFilter
  type: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

input AccountWhereUniqueInput {
  id: String
  provider_providerAccountId: AccountProviderProviderAccountIdCompoundUniqueInput
}

type AffectedRowsOutput {
  count: Int!
}

type AggregateAccount {
  _avg: AccountAvgAggregate
  _count: AccountCountAggregate
  _max: AccountMaxAggregate
  _min: AccountMinAggregate
  _sum: AccountSumAggregate
}

type AggregateLabel {
  _count: LabelCountAggregate
  _max: LabelMaxAggregate
  _min: LabelMinAggregate
}

type AggregateLabelOnMergeRequest {
  _count: LabelOnMergeRequestCountAggregate
  _max: LabelOnMergeRequestMaxAggregate
  _min: LabelOnMergeRequestMinAggregate
}

type AggregateLabelOnVision {
  _count: LabelOnVisionCountAggregate
  _max: LabelOnVisionMaxAggregate
  _min: LabelOnVisionMinAggregate
}

type AggregateMergeRequest {
  _count: MergeRequestCountAggregate
  _max: MergeRequestMaxAggregate
  _min: MergeRequestMinAggregate
}

type AggregatePremise {
  _count: PremiseCountAggregate
  _max: PremiseMaxAggregate
  _min: PremiseMinAggregate
}

type AggregatePremisesOnTimelines {
  _count: PremisesOnTimelinesCountAggregate
  _max: PremisesOnTimelinesMaxAggregate
  _min: PremisesOnTimelinesMinAggregate
}

type AggregateReactionOnThreads {
  _count: ReactionOnThreadsCountAggregate
  _max: ReactionOnThreadsMaxAggregate
  _min: ReactionOnThreadsMinAggregate
}

type AggregateReactionOnTimelines {
  _count: ReactionOnTimelinesCountAggregate
  _max: ReactionOnTimelinesMaxAggregate
  _min: ReactionOnTimelinesMinAggregate
}

type AggregateReactionOnVisions {
  _count: ReactionOnVisionsCountAggregate
  _max: ReactionOnVisionsMaxAggregate
  _min: ReactionOnVisionsMinAggregate
}

type AggregateReference {
  _count: ReferenceCountAggregate
  _max: ReferenceMaxAggregate
  _min: ReferenceMinAggregate
}

type AggregateRelationBetweenVisions {
  _count: RelationBetweenVisionsCountAggregate
  _max: RelationBetweenVisionsMaxAggregate
  _min: RelationBetweenVisionsMinAggregate
}

type AggregateRelationBetweenVisionsStatus {
  _count: RelationBetweenVisionsStatusCountAggregate
  _max: RelationBetweenVisionsStatusMaxAggregate
  _min: RelationBetweenVisionsStatusMinAggregate
}

type AggregateReputationRecord {
  _avg: ReputationRecordAvgAggregate
  _count: ReputationRecordCountAggregate
  _max: ReputationRecordMaxAggregate
  _min: ReputationRecordMinAggregate
  _sum: ReputationRecordSumAggregate
}

type AggregateSession {
  _count: SessionCountAggregate
  _max: SessionMaxAggregate
  _min: SessionMinAggregate
}

type AggregateSnapshot {
  _count: SnapshotCountAggregate
  _max: SnapshotMaxAggregate
  _min: SnapshotMinAggregate
}

type AggregateSubscriptionsOnPremises {
  _count: SubscriptionsOnPremisesCountAggregate
  _max: SubscriptionsOnPremisesMaxAggregate
  _min: SubscriptionsOnPremisesMinAggregate
}

type AggregateSubscriptionsOnTimelines {
  _count: SubscriptionsOnTimelinesCountAggregate
  _max: SubscriptionsOnTimelinesMaxAggregate
  _min: SubscriptionsOnTimelinesMinAggregate
}

type AggregateTag {
  _avg: TagAvgAggregate
  _count: TagCountAggregate
  _max: TagMaxAggregate
  _min: TagMinAggregate
  _sum: TagSumAggregate
}

type AggregateTagsOnPremises {
  _avg: TagsOnPremisesAvgAggregate
  _count: TagsOnPremisesCountAggregate
  _max: TagsOnPremisesMaxAggregate
  _min: TagsOnPremisesMinAggregate
  _sum: TagsOnPremisesSumAggregate
}

type AggregateTagsOnTimelines {
  _avg: TagsOnTimelinesAvgAggregate
  _count: TagsOnTimelinesCountAggregate
  _max: TagsOnTimelinesMaxAggregate
  _min: TagsOnTimelinesMinAggregate
  _sum: TagsOnTimelinesSumAggregate
}

type AggregateTagsOnVisions {
  _avg: TagsOnVisionsAvgAggregate
  _count: TagsOnVisionsCountAggregate
  _max: TagsOnVisionsMaxAggregate
  _min: TagsOnVisionsMinAggregate
  _sum: TagsOnVisionsSumAggregate
}

type AggregateThread {
  _count: ThreadCountAggregate
  _max: ThreadMaxAggregate
  _min: ThreadMinAggregate
}

type AggregateThreadsOnMergeRequest {
  _count: ThreadsOnMergeRequestCountAggregate
  _max: ThreadsOnMergeRequestMaxAggregate
  _min: ThreadsOnMergeRequestMinAggregate
}

type AggregateThreadsOnPremise {
  _count: ThreadsOnPremiseCountAggregate
  _max: ThreadsOnPremiseMaxAggregate
  _min: ThreadsOnPremiseMinAggregate
}

type AggregateThreadsOnTimeline {
  _count: ThreadsOnTimelineCountAggregate
  _max: ThreadsOnTimelineMaxAggregate
  _min: ThreadsOnTimelineMinAggregate
}

type AggregateThreadsOnVision {
  _count: ThreadsOnVisionCountAggregate
  _max: ThreadsOnVisionMaxAggregate
  _min: ThreadsOnVisionMinAggregate
}

type AggregateTimeline {
  _count: TimelineCountAggregate
  _max: TimelineMaxAggregate
  _min: TimelineMinAggregate
}

type AggregateUser {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
}

type AggregateVerificationToken {
  _count: VerificationTokenCountAggregate
  _max: VerificationTokenMaxAggregate
  _min: VerificationTokenMinAggregate
}

type AggregateVision {
  _count: VisionCountAggregate
  _max: VisionMaxAggregate
  _min: VisionMinAggregate
}

type AggregateVisionViewsHistory {
  _count: VisionViewsHistoryCountAggregate
  _max: VisionViewsHistoryMaxAggregate
  _min: VisionViewsHistoryMinAggregate
}

type AggregateVotesOnPremise {
  _avg: VotesOnPremiseAvgAggregate
  _count: VotesOnPremiseCountAggregate
  _max: VotesOnPremiseMaxAggregate
  _min: VotesOnPremiseMinAggregate
  _sum: VotesOnPremiseSumAggregate
}

type AggregateVotesOnThread {
  _avg: VotesOnThreadAvgAggregate
  _count: VotesOnThreadCountAggregate
  _max: VotesOnThreadMaxAggregate
  _min: VotesOnThreadMinAggregate
  _sum: VotesOnThreadSumAggregate
}

type AggregateVotesOnTimeline {
  _avg: VotesOnTimelineAvgAggregate
  _count: VotesOnTimelineCountAggregate
  _max: VotesOnTimelineMaxAggregate
  _min: VotesOnTimelineMinAggregate
  _sum: VotesOnTimelineSumAggregate
}

type AggregateVotesOnVision {
  _avg: VotesOnVisionAvgAggregate
  _count: VotesOnVisionCountAggregate
  _max: VotesOnVisionMaxAggregate
  _min: VotesOnVisionMinAggregate
  _sum: VotesOnVisionSumAggregate
}

input BoolFieldUpdateOperationsInput {
  set: Boolean
}

input BoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input BoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input DateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input DateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input DateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime!]
}

input DateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input EnumMergeRequestStatusFieldUpdateOperationsInput {
  set: MergeRequestStatus
}

input EnumMergeRequestStatusFilter {
  equals: MergeRequestStatus
  in: [MergeRequestStatus!]
  not: NestedEnumMergeRequestStatusFilter
  notIn: [MergeRequestStatus!]
}

input EnumMergeRequestStatusWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumMergeRequestStatusFilter
  _min: NestedEnumMergeRequestStatusFilter
  equals: MergeRequestStatus
  in: [MergeRequestStatus!]
  not: NestedEnumMergeRequestStatusWithAggregatesFilter
  notIn: [MergeRequestStatus!]
}

input EnumReactionFieldUpdateOperationsInput {
  set: Reaction
}

input EnumReactionFilter {
  equals: Reaction
  in: [Reaction!]
  not: NestedEnumReactionFilter
  notIn: [Reaction!]
}

input EnumReactionWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumReactionFilter
  _min: NestedEnumReactionFilter
  equals: Reaction
  in: [Reaction!]
  not: NestedEnumReactionWithAggregatesFilter
  notIn: [Reaction!]
}

input EnumSubscriptionStatusFieldUpdateOperationsInput {
  set: SubscriptionStatus
}

input EnumSubscriptionStatusFilter {
  equals: SubscriptionStatus
  in: [SubscriptionStatus!]
  not: NestedEnumSubscriptionStatusFilter
  notIn: [SubscriptionStatus!]
}

input EnumSubscriptionStatusWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumSubscriptionStatusFilter
  _min: NestedEnumSubscriptionStatusFilter
  equals: SubscriptionStatus
  in: [SubscriptionStatus!]
  not: NestedEnumSubscriptionStatusWithAggregatesFilter
  notIn: [SubscriptionStatus!]
}

input EnumSubscriptionTypeFieldUpdateOperationsInput {
  set: SubscriptionType
}

input EnumSubscriptionTypeFilter {
  equals: SubscriptionType
  in: [SubscriptionType!]
  not: NestedEnumSubscriptionTypeFilter
  notIn: [SubscriptionType!]
}

input EnumSubscriptionTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumSubscriptionTypeFilter
  _min: NestedEnumSubscriptionTypeFilter
  equals: SubscriptionType
  in: [SubscriptionType!]
  not: NestedEnumSubscriptionTypeWithAggregatesFilter
  notIn: [SubscriptionType!]
}

input IntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input IntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input IntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input IntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input IntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

type Label {
  _count: LabelCount
  color: String!
  description: String
  id: String!
  labelOnMergeRequests(cursor: LabelOnMergeRequestWhereUniqueInput, distinct: [LabelOnMergeRequestScalarFieldEnum!], orderBy: [LabelOnMergeRequestOrderByWithRelationInput!], skip: Int, take: Int, where: LabelOnMergeRequestWhereInput): [LabelOnMergeRequest!]!
  labelOnVisions(cursor: LabelOnVisionWhereUniqueInput, distinct: [LabelOnVisionScalarFieldEnum!], orderBy: [LabelOnVisionOrderByWithRelationInput!], skip: Int, take: Int, where: LabelOnVisionWhereInput): [LabelOnVision!]!
  name: String!
}

type LabelCount {
  labelOnMergeRequests: Int!
  labelOnVisions: Int!
}

type LabelCountAggregate {
  _all: Int!
  color: Int!
  description: Int!
  id: Int!
  name: Int!
}

input LabelCountOrderByAggregateInput {
  color: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
}

input LabelCreateInput {
  color: String!
  description: String
  id: String
  labelOnMergeRequests: LabelOnMergeRequestCreateNestedManyWithoutLabelInput
  labelOnVisions: LabelOnVisionCreateNestedManyWithoutLabelInput
  name: String!
}

input LabelCreateManyInput {
  color: String!
  description: String
  id: String
  name: String!
}

input LabelCreateNestedOneWithoutLabelOnMergeRequestsInput {
  connect: LabelWhereUniqueInput
  connectOrCreate: LabelCreateOrConnectWithoutLabelOnMergeRequestsInput
  create: LabelCreateWithoutLabelOnMergeRequestsInput
}

input LabelCreateNestedOneWithoutLabelOnVisionsInput {
  connect: LabelWhereUniqueInput
  connectOrCreate: LabelCreateOrConnectWithoutLabelOnVisionsInput
  create: LabelCreateWithoutLabelOnVisionsInput
}

input LabelCreateOrConnectWithoutLabelOnMergeRequestsInput {
  create: LabelCreateWithoutLabelOnMergeRequestsInput!
  where: LabelWhereUniqueInput!
}

input LabelCreateOrConnectWithoutLabelOnVisionsInput {
  create: LabelCreateWithoutLabelOnVisionsInput!
  where: LabelWhereUniqueInput!
}

input LabelCreateWithoutLabelOnMergeRequestsInput {
  color: String!
  description: String
  id: String
  labelOnVisions: LabelOnVisionCreateNestedManyWithoutLabelInput
  name: String!
}

input LabelCreateWithoutLabelOnVisionsInput {
  color: String!
  description: String
  id: String
  labelOnMergeRequests: LabelOnMergeRequestCreateNestedManyWithoutLabelInput
  name: String!
}

type LabelGroupBy {
  _count: LabelCountAggregate
  _max: LabelMaxAggregate
  _min: LabelMinAggregate
  color: String!
  description: String
  id: String!
  name: String!
}

type LabelMaxAggregate {
  color: String
  description: String
  id: String
  name: String
}

input LabelMaxOrderByAggregateInput {
  color: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
}

type LabelMinAggregate {
  color: String
  description: String
  id: String
  name: String
}

input LabelMinOrderByAggregateInput {
  color: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
}

type LabelOnMergeRequest {
  id: String!
  label: Label!
  labelId: String!
  mergeRequest: MergeRequest!
  mergeRequestId: String!
}

type LabelOnMergeRequestCountAggregate {
  _all: Int!
  id: Int!
  labelId: Int!
  mergeRequestId: Int!
}

input LabelOnMergeRequestCountOrderByAggregateInput {
  id: SortOrder
  labelId: SortOrder
  mergeRequestId: SortOrder
}

input LabelOnMergeRequestCreateInput {
  id: String
  label: LabelCreateNestedOneWithoutLabelOnMergeRequestsInput!
  mergeRequest: MergeRequestCreateNestedOneWithoutLabelsOnMergeRequestInput!
}

input LabelOnMergeRequestCreateManyInput {
  id: String
  labelId: String!
  mergeRequestId: String!
}

input LabelOnMergeRequestCreateManyLabelInput {
  id: String
  mergeRequestId: String!
}

input LabelOnMergeRequestCreateManyLabelInputEnvelope {
  data: [LabelOnMergeRequestCreateManyLabelInput!]!
  skipDuplicates: Boolean
}

input LabelOnMergeRequestCreateManyMergeRequestInput {
  id: String
  labelId: String!
}

input LabelOnMergeRequestCreateManyMergeRequestInputEnvelope {
  data: [LabelOnMergeRequestCreateManyMergeRequestInput!]!
  skipDuplicates: Boolean
}

input LabelOnMergeRequestCreateNestedManyWithoutLabelInput {
  connect: [LabelOnMergeRequestWhereUniqueInput!]
  connectOrCreate: [LabelOnMergeRequestCreateOrConnectWithoutLabelInput!]
  create: [LabelOnMergeRequestCreateWithoutLabelInput!]
  createMany: LabelOnMergeRequestCreateManyLabelInputEnvelope
}

input LabelOnMergeRequestCreateNestedManyWithoutMergeRequestInput {
  connect: [LabelOnMergeRequestWhereUniqueInput!]
  connectOrCreate: [LabelOnMergeRequestCreateOrConnectWithoutMergeRequestInput!]
  create: [LabelOnMergeRequestCreateWithoutMergeRequestInput!]
  createMany: LabelOnMergeRequestCreateManyMergeRequestInputEnvelope
}

input LabelOnMergeRequestCreateOrConnectWithoutLabelInput {
  create: LabelOnMergeRequestCreateWithoutLabelInput!
  where: LabelOnMergeRequestWhereUniqueInput!
}

input LabelOnMergeRequestCreateOrConnectWithoutMergeRequestInput {
  create: LabelOnMergeRequestCreateWithoutMergeRequestInput!
  where: LabelOnMergeRequestWhereUniqueInput!
}

input LabelOnMergeRequestCreateWithoutLabelInput {
  id: String
  mergeRequest: MergeRequestCreateNestedOneWithoutLabelsOnMergeRequestInput!
}

input LabelOnMergeRequestCreateWithoutMergeRequestInput {
  id: String
  label: LabelCreateNestedOneWithoutLabelOnMergeRequestsInput!
}

type LabelOnMergeRequestGroupBy {
  _count: LabelOnMergeRequestCountAggregate
  _max: LabelOnMergeRequestMaxAggregate
  _min: LabelOnMergeRequestMinAggregate
  id: String!
  labelId: String!
  mergeRequestId: String!
}

input LabelOnMergeRequestListRelationFilter {
  every: LabelOnMergeRequestWhereInput
  none: LabelOnMergeRequestWhereInput
  some: LabelOnMergeRequestWhereInput
}

type LabelOnMergeRequestMaxAggregate {
  id: String
  labelId: String
  mergeRequestId: String
}

input LabelOnMergeRequestMaxOrderByAggregateInput {
  id: SortOrder
  labelId: SortOrder
  mergeRequestId: SortOrder
}

type LabelOnMergeRequestMinAggregate {
  id: String
  labelId: String
  mergeRequestId: String
}

input LabelOnMergeRequestMinOrderByAggregateInput {
  id: SortOrder
  labelId: SortOrder
  mergeRequestId: SortOrder
}

input LabelOnMergeRequestOrderByRelationAggregateInput {
  _count: SortOrder
}

input LabelOnMergeRequestOrderByWithAggregationInput {
  _count: LabelOnMergeRequestCountOrderByAggregateInput
  _max: LabelOnMergeRequestMaxOrderByAggregateInput
  _min: LabelOnMergeRequestMinOrderByAggregateInput
  id: SortOrder
  labelId: SortOrder
  mergeRequestId: SortOrder
}

input LabelOnMergeRequestOrderByWithRelationInput {
  id: SortOrder
  label: LabelOrderByWithRelationInput
  labelId: SortOrder
  mergeRequest: MergeRequestOrderByWithRelationInput
  mergeRequestId: SortOrder
}

enum LabelOnMergeRequestScalarFieldEnum {
  id
  labelId
  mergeRequestId
}

input LabelOnMergeRequestScalarWhereInput {
  AND: [LabelOnMergeRequestScalarWhereInput!]
  NOT: [LabelOnMergeRequestScalarWhereInput!]
  OR: [LabelOnMergeRequestScalarWhereInput!]
  id: StringFilter
  labelId: StringFilter
  mergeRequestId: StringFilter
}

input LabelOnMergeRequestScalarWhereWithAggregatesInput {
  AND: [LabelOnMergeRequestScalarWhereWithAggregatesInput!]
  NOT: [LabelOnMergeRequestScalarWhereWithAggregatesInput!]
  OR: [LabelOnMergeRequestScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  labelId: StringWithAggregatesFilter
  mergeRequestId: StringWithAggregatesFilter
}

input LabelOnMergeRequestUpdateInput {
  id: StringFieldUpdateOperationsInput
  label: LabelUpdateOneRequiredWithoutLabelOnMergeRequestsInput
  mergeRequest: MergeRequestUpdateOneRequiredWithoutLabelsOnMergeRequestInput
}

input LabelOnMergeRequestUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
}

input LabelOnMergeRequestUpdateManyWithWhereWithoutLabelInput {
  data: LabelOnMergeRequestUpdateManyMutationInput!
  where: LabelOnMergeRequestScalarWhereInput!
}

input LabelOnMergeRequestUpdateManyWithWhereWithoutMergeRequestInput {
  data: LabelOnMergeRequestUpdateManyMutationInput!
  where: LabelOnMergeRequestScalarWhereInput!
}

input LabelOnMergeRequestUpdateManyWithoutLabelInput {
  connect: [LabelOnMergeRequestWhereUniqueInput!]
  connectOrCreate: [LabelOnMergeRequestCreateOrConnectWithoutLabelInput!]
  create: [LabelOnMergeRequestCreateWithoutLabelInput!]
  createMany: LabelOnMergeRequestCreateManyLabelInputEnvelope
  delete: [LabelOnMergeRequestWhereUniqueInput!]
  deleteMany: [LabelOnMergeRequestScalarWhereInput!]
  disconnect: [LabelOnMergeRequestWhereUniqueInput!]
  set: [LabelOnMergeRequestWhereUniqueInput!]
  update: [LabelOnMergeRequestUpdateWithWhereUniqueWithoutLabelInput!]
  updateMany: [LabelOnMergeRequestUpdateManyWithWhereWithoutLabelInput!]
  upsert: [LabelOnMergeRequestUpsertWithWhereUniqueWithoutLabelInput!]
}

input LabelOnMergeRequestUpdateManyWithoutMergeRequestInput {
  connect: [LabelOnMergeRequestWhereUniqueInput!]
  connectOrCreate: [LabelOnMergeRequestCreateOrConnectWithoutMergeRequestInput!]
  create: [LabelOnMergeRequestCreateWithoutMergeRequestInput!]
  createMany: LabelOnMergeRequestCreateManyMergeRequestInputEnvelope
  delete: [LabelOnMergeRequestWhereUniqueInput!]
  deleteMany: [LabelOnMergeRequestScalarWhereInput!]
  disconnect: [LabelOnMergeRequestWhereUniqueInput!]
  set: [LabelOnMergeRequestWhereUniqueInput!]
  update: [LabelOnMergeRequestUpdateWithWhereUniqueWithoutMergeRequestInput!]
  updateMany: [LabelOnMergeRequestUpdateManyWithWhereWithoutMergeRequestInput!]
  upsert: [LabelOnMergeRequestUpsertWithWhereUniqueWithoutMergeRequestInput!]
}

input LabelOnMergeRequestUpdateWithWhereUniqueWithoutLabelInput {
  data: LabelOnMergeRequestUpdateWithoutLabelInput!
  where: LabelOnMergeRequestWhereUniqueInput!
}

input LabelOnMergeRequestUpdateWithWhereUniqueWithoutMergeRequestInput {
  data: LabelOnMergeRequestUpdateWithoutMergeRequestInput!
  where: LabelOnMergeRequestWhereUniqueInput!
}

input LabelOnMergeRequestUpdateWithoutLabelInput {
  id: StringFieldUpdateOperationsInput
  mergeRequest: MergeRequestUpdateOneRequiredWithoutLabelsOnMergeRequestInput
}

input LabelOnMergeRequestUpdateWithoutMergeRequestInput {
  id: StringFieldUpdateOperationsInput
  label: LabelUpdateOneRequiredWithoutLabelOnMergeRequestsInput
}

input LabelOnMergeRequestUpsertWithWhereUniqueWithoutLabelInput {
  create: LabelOnMergeRequestCreateWithoutLabelInput!
  update: LabelOnMergeRequestUpdateWithoutLabelInput!
  where: LabelOnMergeRequestWhereUniqueInput!
}

input LabelOnMergeRequestUpsertWithWhereUniqueWithoutMergeRequestInput {
  create: LabelOnMergeRequestCreateWithoutMergeRequestInput!
  update: LabelOnMergeRequestUpdateWithoutMergeRequestInput!
  where: LabelOnMergeRequestWhereUniqueInput!
}

input LabelOnMergeRequestWhereInput {
  AND: [LabelOnMergeRequestWhereInput!]
  NOT: [LabelOnMergeRequestWhereInput!]
  OR: [LabelOnMergeRequestWhereInput!]
  id: StringFilter
  label: LabelRelationFilter
  labelId: StringFilter
  mergeRequest: MergeRequestRelationFilter
  mergeRequestId: StringFilter
}

input LabelOnMergeRequestWhereUniqueInput {
  id: String
}

type LabelOnVision {
  id: String!
  label: Label!
  labelId: String!
  vision: Vision!
  visionId: String!
}

type LabelOnVisionCountAggregate {
  _all: Int!
  id: Int!
  labelId: Int!
  visionId: Int!
}

input LabelOnVisionCountOrderByAggregateInput {
  id: SortOrder
  labelId: SortOrder
  visionId: SortOrder
}

input LabelOnVisionCreateInput {
  id: String
  label: LabelCreateNestedOneWithoutLabelOnVisionsInput!
  vision: VisionCreateNestedOneWithoutLabelsOnVisionInput!
}

input LabelOnVisionCreateManyInput {
  id: String
  labelId: String!
  visionId: String!
}

input LabelOnVisionCreateManyLabelInput {
  id: String
  visionId: String!
}

input LabelOnVisionCreateManyLabelInputEnvelope {
  data: [LabelOnVisionCreateManyLabelInput!]!
  skipDuplicates: Boolean
}

input LabelOnVisionCreateManyVisionInput {
  id: String
  labelId: String!
}

input LabelOnVisionCreateManyVisionInputEnvelope {
  data: [LabelOnVisionCreateManyVisionInput!]!
  skipDuplicates: Boolean
}

input LabelOnVisionCreateNestedManyWithoutLabelInput {
  connect: [LabelOnVisionWhereUniqueInput!]
  connectOrCreate: [LabelOnVisionCreateOrConnectWithoutLabelInput!]
  create: [LabelOnVisionCreateWithoutLabelInput!]
  createMany: LabelOnVisionCreateManyLabelInputEnvelope
}

input LabelOnVisionCreateNestedManyWithoutVisionInput {
  connect: [LabelOnVisionWhereUniqueInput!]
  connectOrCreate: [LabelOnVisionCreateOrConnectWithoutVisionInput!]
  create: [LabelOnVisionCreateWithoutVisionInput!]
  createMany: LabelOnVisionCreateManyVisionInputEnvelope
}

input LabelOnVisionCreateOrConnectWithoutLabelInput {
  create: LabelOnVisionCreateWithoutLabelInput!
  where: LabelOnVisionWhereUniqueInput!
}

input LabelOnVisionCreateOrConnectWithoutVisionInput {
  create: LabelOnVisionCreateWithoutVisionInput!
  where: LabelOnVisionWhereUniqueInput!
}

input LabelOnVisionCreateWithoutLabelInput {
  id: String
  vision: VisionCreateNestedOneWithoutLabelsOnVisionInput!
}

input LabelOnVisionCreateWithoutVisionInput {
  id: String
  label: LabelCreateNestedOneWithoutLabelOnVisionsInput!
}

type LabelOnVisionGroupBy {
  _count: LabelOnVisionCountAggregate
  _max: LabelOnVisionMaxAggregate
  _min: LabelOnVisionMinAggregate
  id: String!
  labelId: String!
  visionId: String!
}

input LabelOnVisionListRelationFilter {
  every: LabelOnVisionWhereInput
  none: LabelOnVisionWhereInput
  some: LabelOnVisionWhereInput
}

type LabelOnVisionMaxAggregate {
  id: String
  labelId: String
  visionId: String
}

input LabelOnVisionMaxOrderByAggregateInput {
  id: SortOrder
  labelId: SortOrder
  visionId: SortOrder
}

type LabelOnVisionMinAggregate {
  id: String
  labelId: String
  visionId: String
}

input LabelOnVisionMinOrderByAggregateInput {
  id: SortOrder
  labelId: SortOrder
  visionId: SortOrder
}

input LabelOnVisionOrderByRelationAggregateInput {
  _count: SortOrder
}

input LabelOnVisionOrderByWithAggregationInput {
  _count: LabelOnVisionCountOrderByAggregateInput
  _max: LabelOnVisionMaxOrderByAggregateInput
  _min: LabelOnVisionMinOrderByAggregateInput
  id: SortOrder
  labelId: SortOrder
  visionId: SortOrder
}

input LabelOnVisionOrderByWithRelationInput {
  id: SortOrder
  label: LabelOrderByWithRelationInput
  labelId: SortOrder
  vision: VisionOrderByWithRelationInput
  visionId: SortOrder
}

enum LabelOnVisionScalarFieldEnum {
  id
  labelId
  visionId
}

input LabelOnVisionScalarWhereInput {
  AND: [LabelOnVisionScalarWhereInput!]
  NOT: [LabelOnVisionScalarWhereInput!]
  OR: [LabelOnVisionScalarWhereInput!]
  id: StringFilter
  labelId: StringFilter
  visionId: StringFilter
}

input LabelOnVisionScalarWhereWithAggregatesInput {
  AND: [LabelOnVisionScalarWhereWithAggregatesInput!]
  NOT: [LabelOnVisionScalarWhereWithAggregatesInput!]
  OR: [LabelOnVisionScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
  labelId: StringWithAggregatesFilter
  visionId: StringWithAggregatesFilter
}

input LabelOnVisionUpdateInput {
  id: StringFieldUpdateOperationsInput
  label: LabelUpdateOneRequiredWithoutLabelOnVisionsInput
  vision: VisionUpdateOneRequiredWithoutLabelsOnVisionInput
}

input LabelOnVisionUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
}

input LabelOnVisionUpdateManyWithWhereWithoutLabelInput {
  data: LabelOnVisionUpdateManyMutationInput!
  where: LabelOnVisionScalarWhereInput!
}

input LabelOnVisionUpdateManyWithWhereWithoutVisionInput {
  data: LabelOnVisionUpdateManyMutationInput!
  where: LabelOnVisionScalarWhereInput!
}

input LabelOnVisionUpdateManyWithoutLabelInput {
  connect: [LabelOnVisionWhereUniqueInput!]
  connectOrCreate: [LabelOnVisionCreateOrConnectWithoutLabelInput!]
  create: [LabelOnVisionCreateWithoutLabelInput!]
  createMany: LabelOnVisionCreateManyLabelInputEnvelope
  delete: [LabelOnVisionWhereUniqueInput!]
  deleteMany: [LabelOnVisionScalarWhereInput!]
  disconnect: [LabelOnVisionWhereUniqueInput!]
  set: [LabelOnVisionWhereUniqueInput!]
  update: [LabelOnVisionUpdateWithWhereUniqueWithoutLabelInput!]
  updateMany: [LabelOnVisionUpdateManyWithWhereWithoutLabelInput!]
  upsert: [LabelOnVisionUpsertWithWhereUniqueWithoutLabelInput!]
}

input LabelOnVisionUpdateManyWithoutVisionInput {
  connect: [LabelOnVisionWhereUniqueInput!]
  connectOrCreate: [LabelOnVisionCreateOrConnectWithoutVisionInput!]
  create: [LabelOnVisionCreateWithoutVisionInput!]
  createMany: LabelOnVisionCreateManyVisionInputEnvelope
  delete: [LabelOnVisionWhereUniqueInput!]
  deleteMany: [LabelOnVisionScalarWhereInput!]
  disconnect: [LabelOnVisionWhereUniqueInput!]
  set: [LabelOnVisionWhereUniqueInput!]
  update: [LabelOnVisionUpdateWithWhereUniqueWithoutVisionInput!]
  updateMany: [LabelOnVisionUpdateManyWithWhereWithoutVisionInput!]
  upsert: [LabelOnVisionUpsertWithWhereUniqueWithoutVisionInput!]
}

input LabelOnVisionUpdateWithWhereUniqueWithoutLabelInput {
  data: LabelOnVisionUpdateWithoutLabelInput!
  where: LabelOnVisionWhereUniqueInput!
}

input LabelOnVisionUpdateWithWhereUniqueWithoutVisionInput {
  data: LabelOnVisionUpdateWithoutVisionInput!
  where: LabelOnVisionWhereUniqueInput!
}

input LabelOnVisionUpdateWithoutLabelInput {
  id: StringFieldUpdateOperationsInput
  vision: VisionUpdateOneRequiredWithoutLabelsOnVisionInput
}

input LabelOnVisionUpdateWithoutVisionInput {
  id: StringFieldUpdateOperationsInput
  label: LabelUpdateOneRequiredWithoutLabelOnVisionsInput
}

input LabelOnVisionUpsertWithWhereUniqueWithoutLabelInput {
  create: LabelOnVisionCreateWithoutLabelInput!
  update: LabelOnVisionUpdateWithoutLabelInput!
  where: LabelOnVisionWhereUniqueInput!
}

input LabelOnVisionUpsertWithWhereUniqueWithoutVisionInput {
  create: LabelOnVisionCreateWithoutVisionInput!
  update: LabelOnVisionUpdateWithoutVisionInput!
  where: LabelOnVisionWhereUniqueInput!
}

input LabelOnVisionWhereInput {
  AND: [LabelOnVisionWhereInput!]
  NOT: [LabelOnVisionWhereInput!]
  OR: [LabelOnVisionWhereInput!]
  id: StringFilter
  label: LabelRelationFilter
  labelId: StringFilter
  vision: VisionRelationFilter
  visionId: StringFilter
}

input LabelOnVisionWhereUniqueInput {
  id: String
}

input LabelOrderByWithAggregationInput {
  _count: LabelCountOrderByAggregateInput
  _max: LabelMaxOrderByAggregateInput
  _min: LabelMinOrderByAggregateInput
  color: SortOrder
  description: SortOrder
  id: SortOrder
  name: SortOrder
}

input LabelOrderByWithRelationInput {
  color: SortOrder
  description: SortOrder
  id: SortOrder
  labelOnMergeRequests: LabelOnMergeRequestOrderByRelationAggregateInput
  labelOnVisions: LabelOnVisionOrderByRelationAggregateInput
  name: SortOrder
}

input LabelRelationFilter {
  is: LabelWhereInput
  isNot: LabelWhereInput
}

enum LabelScalarFieldEnum {
  color
  description
  id
  name
}

input LabelScalarWhereWithAggregatesInput {
  AND: [LabelScalarWhereWithAggregatesInput!]
  NOT: [LabelScalarWhereWithAggregatesInput!]
  OR: [LabelScalarWhereWithAggregatesInput!]
  color: StringWithAggregatesFilter
  description: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  name: StringWithAggregatesFilter
}

input LabelUpdateInput {
  color: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  labelOnMergeRequests: LabelOnMergeRequestUpdateManyWithoutLabelInput
  labelOnVisions: LabelOnVisionUpdateManyWithoutLabelInput
  name: StringFieldUpdateOperationsInput
}

input LabelUpdateManyMutationInput {
  color: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  name: StringFieldUpdateOperationsInput
}

input LabelUpdateOneRequiredWithoutLabelOnMergeRequestsInput {
  connect: LabelWhereUniqueInput
  connectOrCreate: LabelCreateOrConnectWithoutLabelOnMergeRequestsInput
  create: LabelCreateWithoutLabelOnMergeRequestsInput
  update: LabelUpdateWithoutLabelOnMergeRequestsInput
  upsert: LabelUpsertWithoutLabelOnMergeRequestsInput
}

input LabelUpdateOneRequiredWithoutLabelOnVisionsInput {
  connect: LabelWhereUniqueInput
  connectOrCreate: LabelCreateOrConnectWithoutLabelOnVisionsInput
  create: LabelCreateWithoutLabelOnVisionsInput
  update: LabelUpdateWithoutLabelOnVisionsInput
  upsert: LabelUpsertWithoutLabelOnVisionsInput
}

input LabelUpdateWithoutLabelOnMergeRequestsInput {
  color: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  labelOnVisions: LabelOnVisionUpdateManyWithoutLabelInput
  name: StringFieldUpdateOperationsInput
}

input LabelUpdateWithoutLabelOnVisionsInput {
  color: StringFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  labelOnMergeRequests: LabelOnMergeRequestUpdateManyWithoutLabelInput
  name: StringFieldUpdateOperationsInput
}

input LabelUpsertWithoutLabelOnMergeRequestsInput {
  create: LabelCreateWithoutLabelOnMergeRequestsInput!
  update: LabelUpdateWithoutLabelOnMergeRequestsInput!
}

input LabelUpsertWithoutLabelOnVisionsInput {
  create: LabelCreateWithoutLabelOnVisionsInput!
  update: LabelUpdateWithoutLabelOnVisionsInput!
}

input LabelWhereInput {
  AND: [LabelWhereInput!]
  NOT: [LabelWhereInput!]
  OR: [LabelWhereInput!]
  color: StringFilter
  description: StringNullableFilter
  id: StringFilter
  labelOnMergeRequests: LabelOnMergeRequestListRelationFilter
  labelOnVisions: LabelOnVisionListRelationFilter
  name: StringFilter
}

input LabelWhereUniqueInput {
  id: String
  name: String
}

type MergeRequest {
  _count: MergeRequestCount
  author: User
  authorId: String

  """long, descriptive mood description of the change"""
  description: String
  id: String!

  """labels shows the merge request type"""
  labelsOnMergeRequest(cursor: LabelOnMergeRequestWhereUniqueInput, distinct: [LabelOnMergeRequestScalarFieldEnum!], orderBy: [LabelOnMergeRequestOrderByWithRelationInput!], skip: Int, take: Int, where: LabelOnMergeRequestWhereInput): [LabelOnMergeRequest!]!

  """the relation need to be change to the target vision"""
  relationChanges(cursor: RelationBetweenVisionsWhereUniqueInput, distinct: [RelationBetweenVisionsScalarFieldEnum!], orderBy: [RelationBetweenVisionsOrderByWithRelationInput!], skip: Int, take: Int, where: RelationBetweenVisionsWhereInput): [RelationBetweenVisions!]!
  status: MergeRequestStatus!

  """threads related to the merge request"""
  threadsOnMergeRequest(cursor: ThreadsOnMergeRequestWhereUniqueInput, distinct: [ThreadsOnMergeRequestScalarFieldEnum!], orderBy: [ThreadsOnMergeRequestOrderByWithRelationInput!], skip: Int, take: Int, where: ThreadsOnMergeRequestWhereInput): [ThreadsOnMergeRequest!]!

  """short, imperative mood description of the change"""
  title: String!

  """the vision attached to the merge request"""
  vision: Vision
  visionId: String
}

type MergeRequestCount {
  labelsOnMergeRequest: Int!
  relationChanges: Int!
  threadsOnMergeRequest: Int!
}

type MergeRequestCountAggregate {
  _all: Int!
  authorId: Int!
  description: Int!
  id: Int!
  status: Int!
  title: Int!
  visionId: Int!
}

input MergeRequestCountOrderByAggregateInput {
  authorId: SortOrder
  description: SortOrder
  id: SortOrder
  status: SortOrder
  title: SortOrder
  visionId: SortOrder
}

input MergeRequestCreateInput {
  author: UserCreateNestedOneWithoutMergedRequestsInput
  description: String
  id: String
  labelsOnMergeRequest: LabelOnMergeRequestCreateNestedManyWithoutMergeRequestInput
  relationChanges: RelationBetweenVisionsCreateNestedManyWithoutMergeRequestInput
  status: MergeRequestStatus
  threadsOnMergeRequest: ThreadsOnMergeRequestCreateNestedManyWithoutMergeRequestInput
  title: String!
  vision: VisionCreateNestedOneWithoutMergeRequestInput
}

input MergeRequestCreateManyAuthorInput {
  description: String
  id: String
  status: MergeRequestStatus
  title: String!
  visionId: String
}

input MergeRequestCreateManyAuthorInputEnvelope {
  data: [MergeRequestCreateManyAuthorInput!]!
  skipDuplicates: Boolean
}

input MergeRequestCreateManyInput {
  authorId: String
  description: String
  id: String
  status: MergeRequestStatus
  title: String!
  visionId: String
}

input MergeRequestCreateNestedManyWithoutAuthorInput {
  connect: [MergeRequestWhereUniqueInput!]
  connectOrCreate: [MergeRequestCreateOrConnectWithoutAuthorInput!]
  create: [MergeRequestCreateWithoutAuthorInput!]
  createMany: MergeRequestCreateManyAuthorInputEnvelope
}

input MergeRequestCreateNestedOneWithoutLabelsOnMergeRequestInput {
  connect: MergeRequestWhereUniqueInput
  connectOrCreate: MergeRequestCreateOrConnectWithoutLabelsOnMergeRequestInput
  create: MergeRequestCreateWithoutLabelsOnMergeRequestInput
}

input MergeRequestCreateNestedOneWithoutRelationChangesInput {
  connect: MergeRequestWhereUniqueInput
  connectOrCreate: MergeRequestCreateOrConnectWithoutRelationChangesInput
  create: MergeRequestCreateWithoutRelationChangesInput
}

input MergeRequestCreateNestedOneWithoutThreadsOnMergeRequestInput {
  connect: MergeRequestWhereUniqueInput
  connectOrCreate: MergeRequestCreateOrConnectWithoutThreadsOnMergeRequestInput
  create: MergeRequestCreateWithoutThreadsOnMergeRequestInput
}

input MergeRequestCreateNestedOneWithoutVisionInput {
  connect: MergeRequestWhereUniqueInput
  connectOrCreate: MergeRequestCreateOrConnectWithoutVisionInput
  create: MergeRequestCreateWithoutVisionInput
}

input MergeRequestCreateOrConnectWithoutAuthorInput {
  create: MergeRequestCreateWithoutAuthorInput!
  where: MergeRequestWhereUniqueInput!
}

input MergeRequestCreateOrConnectWithoutLabelsOnMergeRequestInput {
  create: MergeRequestCreateWithoutLabelsOnMergeRequestInput!
  where: MergeRequestWhereUniqueInput!
}

input MergeRequestCreateOrConnectWithoutRelationChangesInput {
  create: MergeRequestCreateWithoutRelationChangesInput!
  where: MergeRequestWhereUniqueInput!
}

input MergeRequestCreateOrConnectWithoutThreadsOnMergeRequestInput {
  create: MergeRequestCreateWithoutThreadsOnMergeRequestInput!
  where: MergeRequestWhereUniqueInput!
}

input MergeRequestCreateOrConnectWithoutVisionInput {
  create: MergeRequestCreateWithoutVisionInput!
  where: MergeRequestWhereUniqueInput!
}

input MergeRequestCreateWithoutAuthorInput {
  description: String
  id: String
  labelsOnMergeRequest: LabelOnMergeRequestCreateNestedManyWithoutMergeRequestInput
  relationChanges: RelationBetweenVisionsCreateNestedManyWithoutMergeRequestInput
  status: MergeRequestStatus
  threadsOnMergeRequest: ThreadsOnMergeRequestCreateNestedManyWithoutMergeRequestInput
  title: String!
  vision: VisionCreateNestedOneWithoutMergeRequestInput
}

input MergeRequestCreateWithoutLabelsOnMergeRequestInput {
  author: UserCreateNestedOneWithoutMergedRequestsInput
  description: String
  id: String
  relationChanges: RelationBetweenVisionsCreateNestedManyWithoutMergeRequestInput
  status: MergeRequestStatus
  threadsOnMergeRequest: ThreadsOnMergeRequestCreateNestedManyWithoutMergeRequestInput
  title: String!
  vision: VisionCreateNestedOneWithoutMergeRequestInput
}

input MergeRequestCreateWithoutRelationChangesInput {
  author: UserCreateNestedOneWithoutMergedRequestsInput
  description: String
  id: String
  labelsOnMergeRequest: LabelOnMergeRequestCreateNestedManyWithoutMergeRequestInput
  status: MergeRequestStatus
  threadsOnMergeRequest: ThreadsOnMergeRequestCreateNestedManyWithoutMergeRequestInput
  title: String!
  vision: VisionCreateNestedOneWithoutMergeRequestInput
}

input MergeRequestCreateWithoutThreadsOnMergeRequestInput {
  author: UserCreateNestedOneWithoutMergedRequestsInput
  description: String
  id: String
  labelsOnMergeRequest: LabelOnMergeRequestCreateNestedManyWithoutMergeRequestInput
  relationChanges: RelationBetweenVisionsCreateNestedManyWithoutMergeRequestInput
  status: MergeRequestStatus
  title: String!
  vision: VisionCreateNestedOneWithoutMergeRequestInput
}

input MergeRequestCreateWithoutVisionInput {
  author: UserCreateNestedOneWithoutMergedRequestsInput
  description: String
  id: String
  labelsOnMergeRequest: LabelOnMergeRequestCreateNestedManyWithoutMergeRequestInput
  relationChanges: RelationBetweenVisionsCreateNestedManyWithoutMergeRequestInput
  status: MergeRequestStatus
  threadsOnMergeRequest: ThreadsOnMergeRequestCreateNestedManyWithoutMergeRequestInput
  title: String!
}

type MergeRequestGroupBy {
  _count: MergeRequestCountAggregate
  _max: MergeRequestMaxAggregate
  _min: MergeRequestMinAggregate
  authorId: String
  description: String
  id: String!
  status: MergeRequestStatus!
  title: String!
  visionId: String
}

input MergeRequestListRelationFilter {
  every: MergeRequestWhereInput
  none: MergeRequestWhereInput
  some: MergeRequestWhereInput
}

type MergeRequestMaxAggregate {
  authorId: String
  description: String
  id: String
  status: MergeRequestStatus
  title: String
  visionId: String
}

input MergeRequestMaxOrderByAggregateInput {
  authorId: SortOrder
  description: SortOrder
  id: SortOrder
  status: SortOrder
  title: SortOrder
  visionId: SortOrder
}

type MergeRequestMinAggregate {
  authorId: String
  description: String
  id: String
  status: MergeRequestStatus
  title: String
  visionId: String
}

input MergeRequestMinOrderByAggregateInput {
  authorId: SortOrder
  description: SortOrder
  id: SortOrder
  status: SortOrder
  title: SortOrder
  visionId: SortOrder
}

input MergeRequestOrderByRelationAggregateInput {
  _count: SortOrder
}

input MergeRequestOrderByWithAggregationInput {
  _count: MergeRequestCountOrderByAggregateInput
  _max: MergeRequestMaxOrderByAggregateInput
  _min: MergeRequestMinOrderByAggregateInput
  authorId: SortOrder
  description: SortOrder
  id: SortOrder
  status: SortOrder
  title: SortOrder
  visionId: SortOrder
}

input MergeRequestOrderByWithRelationInput {
  author: UserOrderByWithRelationInput
  authorId: SortOrder
  description: SortOrder
  id: SortOrder
  labelsOnMergeRequest: LabelOnMergeRequestOrderByRelationAggregateInput
  relationChanges: RelationBetweenVisionsOrderByRelationAggregateInput
  status: SortOrder
  threadsOnMergeRequest: ThreadsOnMergeRequestOrderByRelationAggregateInput
  title: SortOrder
  vision: VisionOrderByWithRelationInput
  visionId: SortOrder
}

input MergeRequestRelationFilter {
  is: MergeRequestWhereInput
  isNot: MergeRequestWhereInput
}

enum MergeRequestScalarFieldEnum {
  authorId
  description
  id
  status
  title
  visionId
}

input MergeRequestScalarWhereInput {
  AND: [MergeRequestScalarWhereInput!]
  NOT: [MergeRequestScalarWhereInput!]
  OR: [MergeRequestScalarWhereInput!]
  authorId: StringNullableFilter
  description: StringNullableFilter
  id: StringFilter
  status: EnumMergeRequestStatusFilter
  title: StringFilter
  visionId: StringNullableFilter
}

input MergeRequestScalarWhereWithAggregatesInput {
  AND: [MergeRequestScalarWhereWithAggregatesInput!]
  NOT: [MergeRequestScalarWhereWithAggregatesInput!]
  OR: [MergeRequestScalarWhereWithAggregatesInput!]
  authorId: StringNullableWithAggregatesFilter
  description: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  status: EnumMergeRequestStatusWithAggregatesFilter
  title: StringWithAggregatesFilter
  visionId: StringNullableWithAggregatesFilter
}

enum MergeRequestStatus {
  CLOSE
  MERGED
  OPEN
}

input MergeRequestUpdateInput {
  author: UserUpdateOneWithoutMergedRequestsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  labelsOnMergeRequest: LabelOnMergeRequestUpdateManyWithoutMergeRequestInput
  relationChanges: RelationBetweenVisionsUpdateManyWithoutMergeRequestInput
  status: EnumMergeRequestStatusFieldUpdateOperationsInput
  threadsOnMergeRequest: ThreadsOnMergeRequestUpdateManyWithoutMergeRequestInput
  title: StringFieldUpdateOperationsInput
  vision: VisionUpdateOneWithoutMergeRequestInput
}

input MergeRequestUpdateManyMutationInput {
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  status: EnumMergeRequestStatusFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input MergeRequestUpdateManyWithWhereWithoutAuthorInput {
  data: MergeRequestUpdateManyMutationInput!
  where: MergeRequestScalarWhereInput!
}

input MergeRequestUpdateManyWithoutAuthorInput {
  connect: [MergeRequestWhereUniqueInput!]
  connectOrCreate: [MergeRequestCreateOrConnectWithoutAuthorInput!]
  create: [MergeRequestCreateWithoutAuthorInput!]
  createMany: MergeRequestCreateManyAuthorInputEnvelope
  delete: [MergeRequestWhereUniqueInput!]
  deleteMany: [MergeRequestScalarWhereInput!]
  disconnect: [MergeRequestWhereUniqueInput!]
  set: [MergeRequestWhereUniqueInput!]
  update: [MergeRequestUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [MergeRequestUpdateManyWithWhereWithoutAuthorInput!]
  upsert: [MergeRequestUpsertWithWhereUniqueWithoutAuthorInput!]
}

input MergeRequestUpdateOneRequiredWithoutLabelsOnMergeRequestInput {
  connect: MergeRequestWhereUniqueInput
  connectOrCreate: MergeRequestCreateOrConnectWithoutLabelsOnMergeRequestInput
  create: MergeRequestCreateWithoutLabelsOnMergeRequestInput
  update: MergeRequestUpdateWithoutLabelsOnMergeRequestInput
  upsert: MergeRequestUpsertWithoutLabelsOnMergeRequestInput
}

input MergeRequestUpdateOneRequiredWithoutThreadsOnMergeRequestInput {
  connect: MergeRequestWhereUniqueInput
  connectOrCreate: MergeRequestCreateOrConnectWithoutThreadsOnMergeRequestInput
  create: MergeRequestCreateWithoutThreadsOnMergeRequestInput
  update: MergeRequestUpdateWithoutThreadsOnMergeRequestInput
  upsert: MergeRequestUpsertWithoutThreadsOnMergeRequestInput
}

input MergeRequestUpdateOneWithoutRelationChangesInput {
  connect: MergeRequestWhereUniqueInput
  connectOrCreate: MergeRequestCreateOrConnectWithoutRelationChangesInput
  create: MergeRequestCreateWithoutRelationChangesInput
  delete: Boolean
  disconnect: Boolean
  update: MergeRequestUpdateWithoutRelationChangesInput
  upsert: MergeRequestUpsertWithoutRelationChangesInput
}

input MergeRequestUpdateOneWithoutVisionInput {
  connect: MergeRequestWhereUniqueInput
  connectOrCreate: MergeRequestCreateOrConnectWithoutVisionInput
  create: MergeRequestCreateWithoutVisionInput
  delete: Boolean
  disconnect: Boolean
  update: MergeRequestUpdateWithoutVisionInput
  upsert: MergeRequestUpsertWithoutVisionInput
}

input MergeRequestUpdateWithWhereUniqueWithoutAuthorInput {
  data: MergeRequestUpdateWithoutAuthorInput!
  where: MergeRequestWhereUniqueInput!
}

input MergeRequestUpdateWithoutAuthorInput {
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  labelsOnMergeRequest: LabelOnMergeRequestUpdateManyWithoutMergeRequestInput
  relationChanges: RelationBetweenVisionsUpdateManyWithoutMergeRequestInput
  status: EnumMergeRequestStatusFieldUpdateOperationsInput
  threadsOnMergeRequest: ThreadsOnMergeRequestUpdateManyWithoutMergeRequestInput
  title: StringFieldUpdateOperationsInput
  vision: VisionUpdateOneWithoutMergeRequestInput
}

input MergeRequestUpdateWithoutLabelsOnMergeRequestInput {
  author: UserUpdateOneWithoutMergedRequestsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  relationChanges: RelationBetweenVisionsUpdateManyWithoutMergeRequestInput
  status: EnumMergeRequestStatusFieldUpdateOperationsInput
  threadsOnMergeRequest: ThreadsOnMergeRequestUpdateManyWithoutMergeRequestInput
  title: StringFieldUpdateOperationsInput
  vision: VisionUpdateOneWithoutMergeRequestInput
}

input MergeRequestUpdateWithoutRelationChangesInput {
  author: UserUpdateOneWithoutMergedRequestsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  labelsOnMergeRequest: LabelOnMergeRequestUpdateManyWithoutMergeRequestInput
  status: EnumMergeRequestStatusFieldUpdateOperationsInput
  threadsOnMergeRequest: ThreadsOnMergeRequestUpdateManyWithoutMergeRequestInput
  title: StringFieldUpdateOperationsInput
  vision: VisionUpdateOneWithoutMergeRequestInput
}

input MergeRequestUpdateWithoutThreadsOnMergeRequestInput {
  author: UserUpdateOneWithoutMergedRequestsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  labelsOnMergeRequest: LabelOnMergeRequestUpdateManyWithoutMergeRequestInput
  relationChanges: RelationBetweenVisionsUpdateManyWithoutMergeRequestInput
  status: EnumMergeRequestStatusFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  vision: VisionUpdateOneWithoutMergeRequestInput
}

input MergeRequestUpdateWithoutVisionInput {
  author: UserUpdateOneWithoutMergedRequestsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  labelsOnMergeRequest: LabelOnMergeRequestUpdateManyWithoutMergeRequestInput
  relationChanges: RelationBetweenVisionsUpdateManyWithoutMergeRequestInput
  status: EnumMergeRequestStatusFieldUpdateOperationsInput
  threadsOnMergeRequest: ThreadsOnMergeRequestUpdateManyWithoutMergeRequestInput
  title: StringFieldUpdateOperationsInput
}

input MergeRequestUpsertWithWhereUniqueWithoutAuthorInput {
  create: MergeRequestCreateWithoutAuthorInput!
  update: MergeRequestUpdateWithoutAuthorInput!
  where: MergeRequestWhereUniqueInput!
}

input MergeRequestUpsertWithoutLabelsOnMergeRequestInput {
  create: MergeRequestCreateWithoutLabelsOnMergeRequestInput!
  update: MergeRequestUpdateWithoutLabelsOnMergeRequestInput!
}

input MergeRequestUpsertWithoutRelationChangesInput {
  create: MergeRequestCreateWithoutRelationChangesInput!
  update: MergeRequestUpdateWithoutRelationChangesInput!
}

input MergeRequestUpsertWithoutThreadsOnMergeRequestInput {
  create: MergeRequestCreateWithoutThreadsOnMergeRequestInput!
  update: MergeRequestUpdateWithoutThreadsOnMergeRequestInput!
}

input MergeRequestUpsertWithoutVisionInput {
  create: MergeRequestCreateWithoutVisionInput!
  update: MergeRequestUpdateWithoutVisionInput!
}

input MergeRequestWhereInput {
  AND: [MergeRequestWhereInput!]
  NOT: [MergeRequestWhereInput!]
  OR: [MergeRequestWhereInput!]
  author: UserRelationFilter
  authorId: StringNullableFilter
  description: StringNullableFilter
  id: StringFilter
  labelsOnMergeRequest: LabelOnMergeRequestListRelationFilter
  relationChanges: RelationBetweenVisionsListRelationFilter
  status: EnumMergeRequestStatusFilter
  threadsOnMergeRequest: ThreadsOnMergeRequestListRelationFilter
  title: StringFilter
  vision: VisionRelationFilter
  visionId: StringNullableFilter
}

input MergeRequestWhereUniqueInput {
  id: String
  visionId: String
}

type Mutation {
  createAccount(data: AccountCreateInput!): Account!
  createLabel(data: LabelCreateInput!): Label!
  createLabelOnMergeRequest(data: LabelOnMergeRequestCreateInput!): LabelOnMergeRequest!
  createLabelOnVision(data: LabelOnVisionCreateInput!): LabelOnVision!
  createManyAccount(data: [AccountCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyLabel(data: [LabelCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyLabelOnMergeRequest(data: [LabelOnMergeRequestCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyLabelOnVision(data: [LabelOnVisionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyMergeRequest(data: [MergeRequestCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyPremise(data: [PremiseCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyPremisesOnTimelines(data: [PremisesOnTimelinesCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyReactionOnThreads(data: [ReactionOnThreadsCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyReactionOnTimelines(data: [ReactionOnTimelinesCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyReactionOnVisions(data: [ReactionOnVisionsCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyReference(data: [ReferenceCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyRelationBetweenVisions(data: [RelationBetweenVisionsCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyRelationBetweenVisionsStatus(data: [RelationBetweenVisionsStatusCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyReputationRecord(data: [ReputationRecordCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManySession(data: [SessionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManySnapshot(data: [SnapshotCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManySubscriptionsOnPremises(data: [SubscriptionsOnPremisesCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManySubscriptionsOnTimelines(data: [SubscriptionsOnTimelinesCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyTag(data: [TagCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyTagsOnPremises(data: [TagsOnPremisesCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyTagsOnTimelines(data: [TagsOnTimelinesCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyTagsOnVisions(data: [TagsOnVisionsCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyThread(data: [ThreadCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyThreadsOnMergeRequest(data: [ThreadsOnMergeRequestCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyThreadsOnPremise(data: [ThreadsOnPremiseCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyThreadsOnTimeline(data: [ThreadsOnTimelineCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyThreadsOnVision(data: [ThreadsOnVisionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyTimeline(data: [TimelineCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyUser(data: [UserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyVerificationToken(data: [VerificationTokenCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyVision(data: [VisionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyVisionViewsHistory(data: [VisionViewsHistoryCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyVotesOnPremise(data: [VotesOnPremiseCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyVotesOnThread(data: [VotesOnThreadCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyVotesOnTimeline(data: [VotesOnTimelineCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createManyVotesOnVision(data: [VotesOnVisionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
  createMergeRequest(data: MergeRequestCreateInput!): MergeRequest!
  createPremise(data: PremiseCreateInput!): Premise!
  createPremisesOnTimelines(data: PremisesOnTimelinesCreateInput!): PremisesOnTimelines!
  createReactionOnThreads(data: ReactionOnThreadsCreateInput!): ReactionOnThreads!
  createReactionOnTimelines(data: ReactionOnTimelinesCreateInput!): ReactionOnTimelines!
  createReactionOnVisions(data: ReactionOnVisionsCreateInput!): ReactionOnVisions!
  createReference(data: ReferenceCreateInput!): Reference!
  createRelationBetweenVisions(data: RelationBetweenVisionsCreateInput!): RelationBetweenVisions!
  createRelationBetweenVisionsStatus(data: RelationBetweenVisionsStatusCreateInput!): RelationBetweenVisionsStatus!
  createReputationRecord(data: ReputationRecordCreateInput!): ReputationRecord!
  createSession(data: SessionCreateInput!): Session!
  createSnapshot(data: SnapshotCreateInput!): Snapshot!
  createSubscriptionsOnPremises(data: SubscriptionsOnPremisesCreateInput!): SubscriptionsOnPremises!
  createSubscriptionsOnTimelines(data: SubscriptionsOnTimelinesCreateInput!): SubscriptionsOnTimelines!
  createTag(data: TagCreateInput!): Tag!
  createTagsOnPremises(data: TagsOnPremisesCreateInput!): TagsOnPremises!
  createTagsOnTimelines(data: TagsOnTimelinesCreateInput!): TagsOnTimelines!
  createTagsOnVisions(data: TagsOnVisionsCreateInput!): TagsOnVisions!
  createThread(data: ThreadCreateInput!): Thread!
  createThreadsOnMergeRequest(data: ThreadsOnMergeRequestCreateInput!): ThreadsOnMergeRequest!
  createThreadsOnPremise(data: ThreadsOnPremiseCreateInput!): ThreadsOnPremise!
  createThreadsOnTimeline(data: ThreadsOnTimelineCreateInput!): ThreadsOnTimeline!
  createThreadsOnVision(data: ThreadsOnVisionCreateInput!): ThreadsOnVision!
  createTimeline(data: TimelineCreateInput!): Timeline!
  createUser(data: UserCreateInput!): User!
  createVerificationToken(data: VerificationTokenCreateInput!): VerificationToken!
  createVision(data: VisionCreateInput!): Vision!
  createVisionViewsHistory(data: VisionViewsHistoryCreateInput!): VisionViewsHistory!
  createVotesOnPremise(data: VotesOnPremiseCreateInput!): VotesOnPremise!
  createVotesOnThread(data: VotesOnThreadCreateInput!): VotesOnThread!
  createVotesOnTimeline(data: VotesOnTimelineCreateInput!): VotesOnTimeline!
  createVotesOnVision(data: VotesOnVisionCreateInput!): VotesOnVision!
  deleteAccount(where: AccountWhereUniqueInput!): Account
  deleteLabel(where: LabelWhereUniqueInput!): Label
  deleteLabelOnMergeRequest(where: LabelOnMergeRequestWhereUniqueInput!): LabelOnMergeRequest
  deleteLabelOnVision(where: LabelOnVisionWhereUniqueInput!): LabelOnVision
  deleteManyAccount(where: AccountWhereInput): AffectedRowsOutput!
  deleteManyLabel(where: LabelWhereInput): AffectedRowsOutput!
  deleteManyLabelOnMergeRequest(where: LabelOnMergeRequestWhereInput): AffectedRowsOutput!
  deleteManyLabelOnVision(where: LabelOnVisionWhereInput): AffectedRowsOutput!
  deleteManyMergeRequest(where: MergeRequestWhereInput): AffectedRowsOutput!
  deleteManyPremise(where: PremiseWhereInput): AffectedRowsOutput!
  deleteManyPremisesOnTimelines(where: PremisesOnTimelinesWhereInput): AffectedRowsOutput!
  deleteManyReactionOnThreads(where: ReactionOnThreadsWhereInput): AffectedRowsOutput!
  deleteManyReactionOnTimelines(where: ReactionOnTimelinesWhereInput): AffectedRowsOutput!
  deleteManyReactionOnVisions(where: ReactionOnVisionsWhereInput): AffectedRowsOutput!
  deleteManyReference(where: ReferenceWhereInput): AffectedRowsOutput!
  deleteManyRelationBetweenVisions(where: RelationBetweenVisionsWhereInput): AffectedRowsOutput!
  deleteManyRelationBetweenVisionsStatus(where: RelationBetweenVisionsStatusWhereInput): AffectedRowsOutput!
  deleteManyReputationRecord(where: ReputationRecordWhereInput): AffectedRowsOutput!
  deleteManySession(where: SessionWhereInput): AffectedRowsOutput!
  deleteManySnapshot(where: SnapshotWhereInput): AffectedRowsOutput!
  deleteManySubscriptionsOnPremises(where: SubscriptionsOnPremisesWhereInput): AffectedRowsOutput!
  deleteManySubscriptionsOnTimelines(where: SubscriptionsOnTimelinesWhereInput): AffectedRowsOutput!
  deleteManyTag(where: TagWhereInput): AffectedRowsOutput!
  deleteManyTagsOnPremises(where: TagsOnPremisesWhereInput): AffectedRowsOutput!
  deleteManyTagsOnTimelines(where: TagsOnTimelinesWhereInput): AffectedRowsOutput!
  deleteManyTagsOnVisions(where: TagsOnVisionsWhereInput): AffectedRowsOutput!
  deleteManyThread(where: ThreadWhereInput): AffectedRowsOutput!
  deleteManyThreadsOnMergeRequest(where: ThreadsOnMergeRequestWhereInput): AffectedRowsOutput!
  deleteManyThreadsOnPremise(where: ThreadsOnPremiseWhereInput): AffectedRowsOutput!
  deleteManyThreadsOnTimeline(where: ThreadsOnTimelineWhereInput): AffectedRowsOutput!
  deleteManyThreadsOnVision(where: ThreadsOnVisionWhereInput): AffectedRowsOutput!
  deleteManyTimeline(where: TimelineWhereInput): AffectedRowsOutput!
  deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
  deleteManyVerificationToken(where: VerificationTokenWhereInput): AffectedRowsOutput!
  deleteManyVision(where: VisionWhereInput): AffectedRowsOutput!
  deleteManyVisionViewsHistory(where: VisionViewsHistoryWhereInput): AffectedRowsOutput!
  deleteManyVotesOnPremise(where: VotesOnPremiseWhereInput): AffectedRowsOutput!
  deleteManyVotesOnThread(where: VotesOnThreadWhereInput): AffectedRowsOutput!
  deleteManyVotesOnTimeline(where: VotesOnTimelineWhereInput): AffectedRowsOutput!
  deleteManyVotesOnVision(where: VotesOnVisionWhereInput): AffectedRowsOutput!
  deleteMergeRequest(where: MergeRequestWhereUniqueInput!): MergeRequest
  deletePremise(where: PremiseWhereUniqueInput!): Premise
  deletePremisesOnTimelines(where: PremisesOnTimelinesWhereUniqueInput!): PremisesOnTimelines
  deleteReactionOnThreads(where: ReactionOnThreadsWhereUniqueInput!): ReactionOnThreads
  deleteReactionOnTimelines(where: ReactionOnTimelinesWhereUniqueInput!): ReactionOnTimelines
  deleteReactionOnVisions(where: ReactionOnVisionsWhereUniqueInput!): ReactionOnVisions
  deleteReference(where: ReferenceWhereUniqueInput!): Reference
  deleteRelationBetweenVisions(where: RelationBetweenVisionsWhereUniqueInput!): RelationBetweenVisions
  deleteRelationBetweenVisionsStatus(where: RelationBetweenVisionsStatusWhereUniqueInput!): RelationBetweenVisionsStatus
  deleteReputationRecord(where: ReputationRecordWhereUniqueInput!): ReputationRecord
  deleteSession(where: SessionWhereUniqueInput!): Session
  deleteSnapshot(where: SnapshotWhereUniqueInput!): Snapshot
  deleteSubscriptionsOnPremises(where: SubscriptionsOnPremisesWhereUniqueInput!): SubscriptionsOnPremises
  deleteSubscriptionsOnTimelines(where: SubscriptionsOnTimelinesWhereUniqueInput!): SubscriptionsOnTimelines
  deleteTag(where: TagWhereUniqueInput!): Tag
  deleteTagsOnPremises(where: TagsOnPremisesWhereUniqueInput!): TagsOnPremises
  deleteTagsOnTimelines(where: TagsOnTimelinesWhereUniqueInput!): TagsOnTimelines
  deleteTagsOnVisions(where: TagsOnVisionsWhereUniqueInput!): TagsOnVisions
  deleteThread(where: ThreadWhereUniqueInput!): Thread
  deleteThreadsOnMergeRequest(where: ThreadsOnMergeRequestWhereUniqueInput!): ThreadsOnMergeRequest
  deleteThreadsOnPremise(where: ThreadsOnPremiseWhereUniqueInput!): ThreadsOnPremise
  deleteThreadsOnTimeline(where: ThreadsOnTimelineWhereUniqueInput!): ThreadsOnTimeline
  deleteThreadsOnVision(where: ThreadsOnVisionWhereUniqueInput!): ThreadsOnVision
  deleteTimeline(where: TimelineWhereUniqueInput!): Timeline
  deleteUser(where: UserWhereUniqueInput!): User
  deleteVerificationToken(where: VerificationTokenWhereUniqueInput!): VerificationToken
  deleteVision(where: VisionWhereUniqueInput!): Vision
  deleteVisionViewsHistory(where: VisionViewsHistoryWhereUniqueInput!): VisionViewsHistory
  deleteVotesOnPremise(where: VotesOnPremiseWhereUniqueInput!): VotesOnPremise
  deleteVotesOnThread(where: VotesOnThreadWhereUniqueInput!): VotesOnThread
  deleteVotesOnTimeline(where: VotesOnTimelineWhereUniqueInput!): VotesOnTimeline
  deleteVotesOnVision(where: VotesOnVisionWhereUniqueInput!): VotesOnVision
  updateAccount(data: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account
  updateLabel(data: LabelUpdateInput!, where: LabelWhereUniqueInput!): Label
  updateLabelOnMergeRequest(data: LabelOnMergeRequestUpdateInput!, where: LabelOnMergeRequestWhereUniqueInput!): LabelOnMergeRequest
  updateLabelOnVision(data: LabelOnVisionUpdateInput!, where: LabelOnVisionWhereUniqueInput!): LabelOnVision
  updateManyAccount(data: AccountUpdateManyMutationInput!, where: AccountWhereInput): AffectedRowsOutput!
  updateManyLabel(data: LabelUpdateManyMutationInput!, where: LabelWhereInput): AffectedRowsOutput!
  updateManyLabelOnMergeRequest(data: LabelOnMergeRequestUpdateManyMutationInput!, where: LabelOnMergeRequestWhereInput): AffectedRowsOutput!
  updateManyLabelOnVision(data: LabelOnVisionUpdateManyMutationInput!, where: LabelOnVisionWhereInput): AffectedRowsOutput!
  updateManyMergeRequest(data: MergeRequestUpdateManyMutationInput!, where: MergeRequestWhereInput): AffectedRowsOutput!
  updateManyPremise(data: PremiseUpdateManyMutationInput!, where: PremiseWhereInput): AffectedRowsOutput!
  updateManyPremisesOnTimelines(data: PremisesOnTimelinesUpdateManyMutationInput!, where: PremisesOnTimelinesWhereInput): AffectedRowsOutput!
  updateManyReactionOnThreads(data: ReactionOnThreadsUpdateManyMutationInput!, where: ReactionOnThreadsWhereInput): AffectedRowsOutput!
  updateManyReactionOnTimelines(data: ReactionOnTimelinesUpdateManyMutationInput!, where: ReactionOnTimelinesWhereInput): AffectedRowsOutput!
  updateManyReactionOnVisions(data: ReactionOnVisionsUpdateManyMutationInput!, where: ReactionOnVisionsWhereInput): AffectedRowsOutput!
  updateManyReference(data: ReferenceUpdateManyMutationInput!, where: ReferenceWhereInput): AffectedRowsOutput!
  updateManyRelationBetweenVisions(data: RelationBetweenVisionsUpdateManyMutationInput!, where: RelationBetweenVisionsWhereInput): AffectedRowsOutput!
  updateManyRelationBetweenVisionsStatus(data: RelationBetweenVisionsStatusUpdateManyMutationInput!, where: RelationBetweenVisionsStatusWhereInput): AffectedRowsOutput!
  updateManyReputationRecord(data: ReputationRecordUpdateManyMutationInput!, where: ReputationRecordWhereInput): AffectedRowsOutput!
  updateManySession(data: SessionUpdateManyMutationInput!, where: SessionWhereInput): AffectedRowsOutput!
  updateManySnapshot(data: SnapshotUpdateManyMutationInput!, where: SnapshotWhereInput): AffectedRowsOutput!
  updateManySubscriptionsOnPremises(data: SubscriptionsOnPremisesUpdateManyMutationInput!, where: SubscriptionsOnPremisesWhereInput): AffectedRowsOutput!
  updateManySubscriptionsOnTimelines(data: SubscriptionsOnTimelinesUpdateManyMutationInput!, where: SubscriptionsOnTimelinesWhereInput): AffectedRowsOutput!
  updateManyTag(data: TagUpdateManyMutationInput!, where: TagWhereInput): AffectedRowsOutput!
  updateManyTagsOnPremises(data: TagsOnPremisesUpdateManyMutationInput!, where: TagsOnPremisesWhereInput): AffectedRowsOutput!
  updateManyTagsOnTimelines(data: TagsOnTimelinesUpdateManyMutationInput!, where: TagsOnTimelinesWhereInput): AffectedRowsOutput!
  updateManyTagsOnVisions(data: TagsOnVisionsUpdateManyMutationInput!, where: TagsOnVisionsWhereInput): AffectedRowsOutput!
  updateManyThread(data: ThreadUpdateManyMutationInput!, where: ThreadWhereInput): AffectedRowsOutput!
  updateManyThreadsOnMergeRequest(data: ThreadsOnMergeRequestUpdateManyMutationInput!, where: ThreadsOnMergeRequestWhereInput): AffectedRowsOutput!
  updateManyThreadsOnPremise(data: ThreadsOnPremiseUpdateManyMutationInput!, where: ThreadsOnPremiseWhereInput): AffectedRowsOutput!
  updateManyThreadsOnTimeline(data: ThreadsOnTimelineUpdateManyMutationInput!, where: ThreadsOnTimelineWhereInput): AffectedRowsOutput!
  updateManyThreadsOnVision(data: ThreadsOnVisionUpdateManyMutationInput!, where: ThreadsOnVisionWhereInput): AffectedRowsOutput!
  updateManyTimeline(data: TimelineUpdateManyMutationInput!, where: TimelineWhereInput): AffectedRowsOutput!
  updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
  updateManyVerificationToken(data: VerificationTokenUpdateManyMutationInput!, where: VerificationTokenWhereInput): AffectedRowsOutput!
  updateManyVision(data: VisionUpdateManyMutationInput!, where: VisionWhereInput): AffectedRowsOutput!
  updateManyVisionViewsHistory(data: VisionViewsHistoryUpdateManyMutationInput!, where: VisionViewsHistoryWhereInput): AffectedRowsOutput!
  updateManyVotesOnPremise(data: VotesOnPremiseUpdateManyMutationInput!, where: VotesOnPremiseWhereInput): AffectedRowsOutput!
  updateManyVotesOnThread(data: VotesOnThreadUpdateManyMutationInput!, where: VotesOnThreadWhereInput): AffectedRowsOutput!
  updateManyVotesOnTimeline(data: VotesOnTimelineUpdateManyMutationInput!, where: VotesOnTimelineWhereInput): AffectedRowsOutput!
  updateManyVotesOnVision(data: VotesOnVisionUpdateManyMutationInput!, where: VotesOnVisionWhereInput): AffectedRowsOutput!
  updateMergeRequest(data: MergeRequestUpdateInput!, where: MergeRequestWhereUniqueInput!): MergeRequest
  updatePremise(data: PremiseUpdateInput!, where: PremiseWhereUniqueInput!): Premise
  updatePremisesOnTimelines(data: PremisesOnTimelinesUpdateInput!, where: PremisesOnTimelinesWhereUniqueInput!): PremisesOnTimelines
  updateReactionOnThreads(data: ReactionOnThreadsUpdateInput!, where: ReactionOnThreadsWhereUniqueInput!): ReactionOnThreads
  updateReactionOnTimelines(data: ReactionOnTimelinesUpdateInput!, where: ReactionOnTimelinesWhereUniqueInput!): ReactionOnTimelines
  updateReactionOnVisions(data: ReactionOnVisionsUpdateInput!, where: ReactionOnVisionsWhereUniqueInput!): ReactionOnVisions
  updateReference(data: ReferenceUpdateInput!, where: ReferenceWhereUniqueInput!): Reference
  updateRelationBetweenVisions(data: RelationBetweenVisionsUpdateInput!, where: RelationBetweenVisionsWhereUniqueInput!): RelationBetweenVisions
  updateRelationBetweenVisionsStatus(data: RelationBetweenVisionsStatusUpdateInput!, where: RelationBetweenVisionsStatusWhereUniqueInput!): RelationBetweenVisionsStatus
  updateReputationRecord(data: ReputationRecordUpdateInput!, where: ReputationRecordWhereUniqueInput!): ReputationRecord
  updateSession(data: SessionUpdateInput!, where: SessionWhereUniqueInput!): Session
  updateSnapshot(data: SnapshotUpdateInput!, where: SnapshotWhereUniqueInput!): Snapshot
  updateSubscriptionsOnPremises(data: SubscriptionsOnPremisesUpdateInput!, where: SubscriptionsOnPremisesWhereUniqueInput!): SubscriptionsOnPremises
  updateSubscriptionsOnTimelines(data: SubscriptionsOnTimelinesUpdateInput!, where: SubscriptionsOnTimelinesWhereUniqueInput!): SubscriptionsOnTimelines
  updateTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
  updateTagsOnPremises(data: TagsOnPremisesUpdateInput!, where: TagsOnPremisesWhereUniqueInput!): TagsOnPremises
  updateTagsOnTimelines(data: TagsOnTimelinesUpdateInput!, where: TagsOnTimelinesWhereUniqueInput!): TagsOnTimelines
  updateTagsOnVisions(data: TagsOnVisionsUpdateInput!, where: TagsOnVisionsWhereUniqueInput!): TagsOnVisions
  updateThread(data: ThreadUpdateInput!, where: ThreadWhereUniqueInput!): Thread
  updateThreadsOnMergeRequest(data: ThreadsOnMergeRequestUpdateInput!, where: ThreadsOnMergeRequestWhereUniqueInput!): ThreadsOnMergeRequest
  updateThreadsOnPremise(data: ThreadsOnPremiseUpdateInput!, where: ThreadsOnPremiseWhereUniqueInput!): ThreadsOnPremise
  updateThreadsOnTimeline(data: ThreadsOnTimelineUpdateInput!, where: ThreadsOnTimelineWhereUniqueInput!): ThreadsOnTimeline
  updateThreadsOnVision(data: ThreadsOnVisionUpdateInput!, where: ThreadsOnVisionWhereUniqueInput!): ThreadsOnVision
  updateTimeline(data: TimelineUpdateInput!, where: TimelineWhereUniqueInput!): Timeline
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updateVerificationToken(data: VerificationTokenUpdateInput!, where: VerificationTokenWhereUniqueInput!): VerificationToken
  updateVision(data: VisionUpdateInput!, where: VisionWhereUniqueInput!): Vision
  updateVisionViewsHistory(data: VisionViewsHistoryUpdateInput!, where: VisionViewsHistoryWhereUniqueInput!): VisionViewsHistory
  updateVotesOnPremise(data: VotesOnPremiseUpdateInput!, where: VotesOnPremiseWhereUniqueInput!): VotesOnPremise
  updateVotesOnThread(data: VotesOnThreadUpdateInput!, where: VotesOnThreadWhereUniqueInput!): VotesOnThread
  updateVotesOnTimeline(data: VotesOnTimelineUpdateInput!, where: VotesOnTimelineWhereUniqueInput!): VotesOnTimeline
  updateVotesOnVision(data: VotesOnVisionUpdateInput!, where: VotesOnVisionWhereUniqueInput!): VotesOnVision
  upsertAccount(create: AccountCreateInput!, update: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account!
  upsertLabel(create: LabelCreateInput!, update: LabelUpdateInput!, where: LabelWhereUniqueInput!): Label!
  upsertLabelOnMergeRequest(create: LabelOnMergeRequestCreateInput!, update: LabelOnMergeRequestUpdateInput!, where: LabelOnMergeRequestWhereUniqueInput!): LabelOnMergeRequest!
  upsertLabelOnVision(create: LabelOnVisionCreateInput!, update: LabelOnVisionUpdateInput!, where: LabelOnVisionWhereUniqueInput!): LabelOnVision!
  upsertMergeRequest(create: MergeRequestCreateInput!, update: MergeRequestUpdateInput!, where: MergeRequestWhereUniqueInput!): MergeRequest!
  upsertPremise(create: PremiseCreateInput!, update: PremiseUpdateInput!, where: PremiseWhereUniqueInput!): Premise!
  upsertPremisesOnTimelines(create: PremisesOnTimelinesCreateInput!, update: PremisesOnTimelinesUpdateInput!, where: PremisesOnTimelinesWhereUniqueInput!): PremisesOnTimelines!
  upsertReactionOnThreads(create: ReactionOnThreadsCreateInput!, update: ReactionOnThreadsUpdateInput!, where: ReactionOnThreadsWhereUniqueInput!): ReactionOnThreads!
  upsertReactionOnTimelines(create: ReactionOnTimelinesCreateInput!, update: ReactionOnTimelinesUpdateInput!, where: ReactionOnTimelinesWhereUniqueInput!): ReactionOnTimelines!
  upsertReactionOnVisions(create: ReactionOnVisionsCreateInput!, update: ReactionOnVisionsUpdateInput!, where: ReactionOnVisionsWhereUniqueInput!): ReactionOnVisions!
  upsertReference(create: ReferenceCreateInput!, update: ReferenceUpdateInput!, where: ReferenceWhereUniqueInput!): Reference!
  upsertRelationBetweenVisions(create: RelationBetweenVisionsCreateInput!, update: RelationBetweenVisionsUpdateInput!, where: RelationBetweenVisionsWhereUniqueInput!): RelationBetweenVisions!
  upsertRelationBetweenVisionsStatus(create: RelationBetweenVisionsStatusCreateInput!, update: RelationBetweenVisionsStatusUpdateInput!, where: RelationBetweenVisionsStatusWhereUniqueInput!): RelationBetweenVisionsStatus!
  upsertReputationRecord(create: ReputationRecordCreateInput!, update: ReputationRecordUpdateInput!, where: ReputationRecordWhereUniqueInput!): ReputationRecord!
  upsertSession(create: SessionCreateInput!, update: SessionUpdateInput!, where: SessionWhereUniqueInput!): Session!
  upsertSnapshot(create: SnapshotCreateInput!, update: SnapshotUpdateInput!, where: SnapshotWhereUniqueInput!): Snapshot!
  upsertSubscriptionsOnPremises(create: SubscriptionsOnPremisesCreateInput!, update: SubscriptionsOnPremisesUpdateInput!, where: SubscriptionsOnPremisesWhereUniqueInput!): SubscriptionsOnPremises!
  upsertSubscriptionsOnTimelines(create: SubscriptionsOnTimelinesCreateInput!, update: SubscriptionsOnTimelinesUpdateInput!, where: SubscriptionsOnTimelinesWhereUniqueInput!): SubscriptionsOnTimelines!
  upsertTag(create: TagCreateInput!, update: TagUpdateInput!, where: TagWhereUniqueInput!): Tag!
  upsertTagsOnPremises(create: TagsOnPremisesCreateInput!, update: TagsOnPremisesUpdateInput!, where: TagsOnPremisesWhereUniqueInput!): TagsOnPremises!
  upsertTagsOnTimelines(create: TagsOnTimelinesCreateInput!, update: TagsOnTimelinesUpdateInput!, where: TagsOnTimelinesWhereUniqueInput!): TagsOnTimelines!
  upsertTagsOnVisions(create: TagsOnVisionsCreateInput!, update: TagsOnVisionsUpdateInput!, where: TagsOnVisionsWhereUniqueInput!): TagsOnVisions!
  upsertThread(create: ThreadCreateInput!, update: ThreadUpdateInput!, where: ThreadWhereUniqueInput!): Thread!
  upsertThreadsOnMergeRequest(create: ThreadsOnMergeRequestCreateInput!, update: ThreadsOnMergeRequestUpdateInput!, where: ThreadsOnMergeRequestWhereUniqueInput!): ThreadsOnMergeRequest!
  upsertThreadsOnPremise(create: ThreadsOnPremiseCreateInput!, update: ThreadsOnPremiseUpdateInput!, where: ThreadsOnPremiseWhereUniqueInput!): ThreadsOnPremise!
  upsertThreadsOnTimeline(create: ThreadsOnTimelineCreateInput!, update: ThreadsOnTimelineUpdateInput!, where: ThreadsOnTimelineWhereUniqueInput!): ThreadsOnTimeline!
  upsertThreadsOnVision(create: ThreadsOnVisionCreateInput!, update: ThreadsOnVisionUpdateInput!, where: ThreadsOnVisionWhereUniqueInput!): ThreadsOnVision!
  upsertTimeline(create: TimelineCreateInput!, update: TimelineUpdateInput!, where: TimelineWhereUniqueInput!): Timeline!
  upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
  upsertVerificationToken(create: VerificationTokenCreateInput!, update: VerificationTokenUpdateInput!, where: VerificationTokenWhereUniqueInput!): VerificationToken!
  upsertVision(create: VisionCreateInput!, update: VisionUpdateInput!, where: VisionWhereUniqueInput!): Vision!
  upsertVisionViewsHistory(create: VisionViewsHistoryCreateInput!, update: VisionViewsHistoryUpdateInput!, where: VisionViewsHistoryWhereUniqueInput!): VisionViewsHistory!
  upsertVotesOnPremise(create: VotesOnPremiseCreateInput!, update: VotesOnPremiseUpdateInput!, where: VotesOnPremiseWhereUniqueInput!): VotesOnPremise!
  upsertVotesOnThread(create: VotesOnThreadCreateInput!, update: VotesOnThreadUpdateInput!, where: VotesOnThreadWhereUniqueInput!): VotesOnThread!
  upsertVotesOnTimeline(create: VotesOnTimelineCreateInput!, update: VotesOnTimelineUpdateInput!, where: VotesOnTimelineWhereUniqueInput!): VotesOnTimeline!
  upsertVotesOnVision(create: VotesOnVisionCreateInput!, update: VotesOnVisionUpdateInput!, where: VotesOnVisionWhereUniqueInput!): VotesOnVision!
}

input NestedBoolFilter {
  equals: Boolean
  not: NestedBoolFilter
}

input NestedBoolWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedBoolFilter
  _min: NestedBoolFilter
  equals: Boolean
  not: NestedBoolWithAggregatesFilter
}

input NestedDateTimeFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableFilter
  notIn: [DateTime!]
}

input NestedDateTimeNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedDateTimeNullableFilter
  _min: NestedDateTimeNullableFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeNullableWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedDateTimeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedDateTimeFilter
  _min: NestedDateTimeFilter
  equals: DateTime
  gt: DateTime
  gte: DateTime
  in: [DateTime!]
  lt: DateTime
  lte: DateTime
  not: NestedDateTimeWithAggregatesFilter
  notIn: [DateTime!]
}

input NestedEnumMergeRequestStatusFilter {
  equals: MergeRequestStatus
  in: [MergeRequestStatus!]
  not: NestedEnumMergeRequestStatusFilter
  notIn: [MergeRequestStatus!]
}

input NestedEnumMergeRequestStatusWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumMergeRequestStatusFilter
  _min: NestedEnumMergeRequestStatusFilter
  equals: MergeRequestStatus
  in: [MergeRequestStatus!]
  not: NestedEnumMergeRequestStatusWithAggregatesFilter
  notIn: [MergeRequestStatus!]
}

input NestedEnumReactionFilter {
  equals: Reaction
  in: [Reaction!]
  not: NestedEnumReactionFilter
  notIn: [Reaction!]
}

input NestedEnumReactionWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumReactionFilter
  _min: NestedEnumReactionFilter
  equals: Reaction
  in: [Reaction!]
  not: NestedEnumReactionWithAggregatesFilter
  notIn: [Reaction!]
}

input NestedEnumSubscriptionStatusFilter {
  equals: SubscriptionStatus
  in: [SubscriptionStatus!]
  not: NestedEnumSubscriptionStatusFilter
  notIn: [SubscriptionStatus!]
}

input NestedEnumSubscriptionStatusWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumSubscriptionStatusFilter
  _min: NestedEnumSubscriptionStatusFilter
  equals: SubscriptionStatus
  in: [SubscriptionStatus!]
  not: NestedEnumSubscriptionStatusWithAggregatesFilter
  notIn: [SubscriptionStatus!]
}

input NestedEnumSubscriptionTypeFilter {
  equals: SubscriptionType
  in: [SubscriptionType!]
  not: NestedEnumSubscriptionTypeFilter
  notIn: [SubscriptionType!]
}

input NestedEnumSubscriptionTypeWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedEnumSubscriptionTypeFilter
  _min: NestedEnumSubscriptionTypeFilter
  equals: SubscriptionType
  in: [SubscriptionType!]
  not: NestedEnumSubscriptionTypeWithAggregatesFilter
  notIn: [SubscriptionType!]
}

input NestedFloatFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatFilter
  notIn: [Float!]
}

input NestedFloatNullableFilter {
  equals: Float
  gt: Float
  gte: Float
  in: [Float!]
  lt: Float
  lte: Float
  not: NestedFloatNullableFilter
  notIn: [Float!]
}

input NestedIntFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntFilter
  notIn: [Int!]
}

input NestedIntNullableFilter {
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableFilter
  notIn: [Int!]
}

input NestedIntNullableWithAggregatesFilter {
  _avg: NestedFloatNullableFilter
  _count: NestedIntNullableFilter
  _max: NestedIntNullableFilter
  _min: NestedIntNullableFilter
  _sum: NestedIntNullableFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntNullableWithAggregatesFilter
  notIn: [Int!]
}

input NestedIntWithAggregatesFilter {
  _avg: NestedFloatFilter
  _count: NestedIntFilter
  _max: NestedIntFilter
  _min: NestedIntFilter
  _sum: NestedIntFilter
  equals: Int
  gt: Int
  gte: Int
  in: [Int!]
  lt: Int
  lte: Int
  not: NestedIntWithAggregatesFilter
  notIn: [Int!]
}

input NestedStringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NestedStringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
  set: DateTime
}

input NullableIntFieldUpdateOperationsInput {
  decrement: Int
  divide: Int
  increment: Int
  multiply: Int
  set: Int
}

input NullableStringFieldUpdateOperationsInput {
  set: String
}

type Premise {
  _count: PremiseCount
  author: User
  authorId: String
  createdAt: DateTime!
  id: String!
  premisesOnTimelines(cursor: PremisesOnTimelinesWhereUniqueInput, distinct: [PremisesOnTimelinesScalarFieldEnum!], orderBy: [PremisesOnTimelinesOrderByWithRelationInput!], skip: Int, take: Int, where: PremisesOnTimelinesWhereInput): [PremisesOnTimelines!]!
  subscriptionsOnPremises(cursor: SubscriptionsOnPremisesWhereUniqueInput, distinct: [SubscriptionsOnPremisesScalarFieldEnum!], orderBy: [SubscriptionsOnPremisesOrderByWithRelationInput!], skip: Int, take: Int, where: SubscriptionsOnPremisesWhereInput): [SubscriptionsOnPremises!]!
  tagsOnPremises(cursor: TagsOnPremisesWhereUniqueInput, distinct: [TagsOnPremisesScalarFieldEnum!], orderBy: [TagsOnPremisesOrderByWithRelationInput!], skip: Int, take: Int, where: TagsOnPremisesWhereInput): [TagsOnPremises!]!
  threadsOnPremise(cursor: ThreadsOnPremiseWhereUniqueInput, distinct: [ThreadsOnPremiseScalarFieldEnum!], orderBy: [ThreadsOnPremiseOrderByWithRelationInput!], skip: Int, take: Int, where: ThreadsOnPremiseWhereInput): [ThreadsOnPremise!]!
  title: String!
  updatedAt: DateTime!
  vision(cursor: VisionWhereUniqueInput, distinct: [VisionScalarFieldEnum!], orderBy: [VisionOrderByWithRelationInput!], skip: Int, take: Int, where: VisionWhereInput): [Vision!]!
  votesOnPremise(cursor: VotesOnPremiseWhereUniqueInput, distinct: [VotesOnPremiseScalarFieldEnum!], orderBy: [VotesOnPremiseOrderByWithRelationInput!], skip: Int, take: Int, where: VotesOnPremiseWhereInput): [VotesOnPremise!]!
}

type PremiseCount {
  premisesOnTimelines: Int!
  subscriptionsOnPremises: Int!
  tagsOnPremises: Int!
  threadsOnPremise: Int!
  vision: Int!
  votesOnPremise: Int!
}

type PremiseCountAggregate {
  _all: Int!
  authorId: Int!
  createdAt: Int!
  id: Int!
  title: Int!
  updatedAt: Int!
}

input PremiseCountOrderByAggregateInput {
  authorId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input PremiseCreateInput {
  author: UserCreateNestedOneWithoutPremisesInput
  createdAt: DateTime
  id: String
  premisesOnTimelines: PremisesOnTimelinesCreateNestedManyWithoutPremiseInput
  subscriptionsOnPremises: SubscriptionsOnPremisesCreateNestedManyWithoutPremiseInput
  tagsOnPremises: TagsOnPremisesCreateNestedManyWithoutPremiseInput
  threadsOnPremise: ThreadsOnPremiseCreateNestedManyWithoutPremiseInput
  title: String!
  updatedAt: DateTime
  vision: VisionCreateNestedManyWithoutPremiseInput
  votesOnPremise: VotesOnPremiseCreateNestedManyWithoutPremiseInput
}

input PremiseCreateManyAuthorInput {
  createdAt: DateTime
  id: String
  title: String!
  updatedAt: DateTime
}

input PremiseCreateManyAuthorInputEnvelope {
  data: [PremiseCreateManyAuthorInput!]!
  skipDuplicates: Boolean
}

input PremiseCreateManyInput {
  authorId: String
  createdAt: DateTime
  id: String
  title: String!
  updatedAt: DateTime
}

input PremiseCreateNestedManyWithoutAuthorInput {
  connect: [PremiseWhereUniqueInput!]
  connectOrCreate: [PremiseCreateOrConnectWithoutAuthorInput!]
  create: [PremiseCreateWithoutAuthorInput!]
  createMany: PremiseCreateManyAuthorInputEnvelope
}

input PremiseCreateNestedOneWithoutPremisesOnTimelinesInput {
  connect: PremiseWhereUniqueInput
  connectOrCreate: PremiseCreateOrConnectWithoutPremisesOnTimelinesInput
  create: PremiseCreateWithoutPremisesOnTimelinesInput
}

input PremiseCreateNestedOneWithoutSubscriptionsOnPremisesInput {
  connect: PremiseWhereUniqueInput
  connectOrCreate: PremiseCreateOrConnectWithoutSubscriptionsOnPremisesInput
  create: PremiseCreateWithoutSubscriptionsOnPremisesInput
}

input PremiseCreateNestedOneWithoutTagsOnPremisesInput {
  connect: PremiseWhereUniqueInput
  connectOrCreate: PremiseCreateOrConnectWithoutTagsOnPremisesInput
  create: PremiseCreateWithoutTagsOnPremisesInput
}

input PremiseCreateNestedOneWithoutThreadsOnPremiseInput {
  connect: PremiseWhereUniqueInput
  connectOrCreate: PremiseCreateOrConnectWithoutThreadsOnPremiseInput
  create: PremiseCreateWithoutThreadsOnPremiseInput
}

input PremiseCreateNestedOneWithoutVisionInput {
  connect: PremiseWhereUniqueInput
  connectOrCreate: PremiseCreateOrConnectWithoutVisionInput
  create: PremiseCreateWithoutVisionInput
}

input PremiseCreateNestedOneWithoutVotesOnPremiseInput {
  connect: PremiseWhereUniqueInput
  connectOrCreate: PremiseCreateOrConnectWithoutVotesOnPremiseInput
  create: PremiseCreateWithoutVotesOnPremiseInput
}

input PremiseCreateOrConnectWithoutAuthorInput {
  create: PremiseCreateWithoutAuthorInput!
  where: PremiseWhereUniqueInput!
}

input PremiseCreateOrConnectWithoutPremisesOnTimelinesInput {
  create: PremiseCreateWithoutPremisesOnTimelinesInput!
  where: PremiseWhereUniqueInput!
}

input PremiseCreateOrConnectWithoutSubscriptionsOnPremisesInput {
  create: PremiseCreateWithoutSubscriptionsOnPremisesInput!
  where: PremiseWhereUniqueInput!
}

input PremiseCreateOrConnectWithoutTagsOnPremisesInput {
  create: PremiseCreateWithoutTagsOnPremisesInput!
  where: PremiseWhereUniqueInput!
}

input PremiseCreateOrConnectWithoutThreadsOnPremiseInput {
  create: PremiseCreateWithoutThreadsOnPremiseInput!
  where: PremiseWhereUniqueInput!
}

input PremiseCreateOrConnectWithoutVisionInput {
  create: PremiseCreateWithoutVisionInput!
  where: PremiseWhereUniqueInput!
}

input PremiseCreateOrConnectWithoutVotesOnPremiseInput {
  create: PremiseCreateWithoutVotesOnPremiseInput!
  where: PremiseWhereUniqueInput!
}

input PremiseCreateWithoutAuthorInput {
  createdAt: DateTime
  id: String
  premisesOnTimelines: PremisesOnTimelinesCreateNestedManyWithoutPremiseInput
  subscriptionsOnPremises: SubscriptionsOnPremisesCreateNestedManyWithoutPremiseInput
  tagsOnPremises: TagsOnPremisesCreateNestedManyWithoutPremiseInput
  threadsOnPremise: ThreadsOnPremiseCreateNestedManyWithoutPremiseInput
  title: String!
  updatedAt: DateTime
  vision: VisionCreateNestedManyWithoutPremiseInput
  votesOnPremise: VotesOnPremiseCreateNestedManyWithoutPremiseInput
}

input PremiseCreateWithoutPremisesOnTimelinesInput {
  author: UserCreateNestedOneWithoutPremisesInput
  createdAt: DateTime
  id: String
  subscriptionsOnPremises: SubscriptionsOnPremisesCreateNestedManyWithoutPremiseInput
  tagsOnPremises: TagsOnPremisesCreateNestedManyWithoutPremiseInput
  threadsOnPremise: ThreadsOnPremiseCreateNestedManyWithoutPremiseInput
  title: String!
  updatedAt: DateTime
  vision: VisionCreateNestedManyWithoutPremiseInput
  votesOnPremise: VotesOnPremiseCreateNestedManyWithoutPremiseInput
}

input PremiseCreateWithoutSubscriptionsOnPremisesInput {
  author: UserCreateNestedOneWithoutPremisesInput
  createdAt: DateTime
  id: String
  premisesOnTimelines: PremisesOnTimelinesCreateNestedManyWithoutPremiseInput
  tagsOnPremises: TagsOnPremisesCreateNestedManyWithoutPremiseInput
  threadsOnPremise: ThreadsOnPremiseCreateNestedManyWithoutPremiseInput
  title: String!
  updatedAt: DateTime
  vision: VisionCreateNestedManyWithoutPremiseInput
  votesOnPremise: VotesOnPremiseCreateNestedManyWithoutPremiseInput
}

input PremiseCreateWithoutTagsOnPremisesInput {
  author: UserCreateNestedOneWithoutPremisesInput
  createdAt: DateTime
  id: String
  premisesOnTimelines: PremisesOnTimelinesCreateNestedManyWithoutPremiseInput
  subscriptionsOnPremises: SubscriptionsOnPremisesCreateNestedManyWithoutPremiseInput
  threadsOnPremise: ThreadsOnPremiseCreateNestedManyWithoutPremiseInput
  title: String!
  updatedAt: DateTime
  vision: VisionCreateNestedManyWithoutPremiseInput
  votesOnPremise: VotesOnPremiseCreateNestedManyWithoutPremiseInput
}

input PremiseCreateWithoutThreadsOnPremiseInput {
  author: UserCreateNestedOneWithoutPremisesInput
  createdAt: DateTime
  id: String
  premisesOnTimelines: PremisesOnTimelinesCreateNestedManyWithoutPremiseInput
  subscriptionsOnPremises: SubscriptionsOnPremisesCreateNestedManyWithoutPremiseInput
  tagsOnPremises: TagsOnPremisesCreateNestedManyWithoutPremiseInput
  title: String!
  updatedAt: DateTime
  vision: VisionCreateNestedManyWithoutPremiseInput
  votesOnPremise: VotesOnPremiseCreateNestedManyWithoutPremiseInput
}

input PremiseCreateWithoutVisionInput {
  author: UserCreateNestedOneWithoutPremisesInput
  createdAt: DateTime
  id: String
  premisesOnTimelines: PremisesOnTimelinesCreateNestedManyWithoutPremiseInput
  subscriptionsOnPremises: SubscriptionsOnPremisesCreateNestedManyWithoutPremiseInput
  tagsOnPremises: TagsOnPremisesCreateNestedManyWithoutPremiseInput
  threadsOnPremise: ThreadsOnPremiseCreateNestedManyWithoutPremiseInput
  title: String!
  updatedAt: DateTime
  votesOnPremise: VotesOnPremiseCreateNestedManyWithoutPremiseInput
}

input PremiseCreateWithoutVotesOnPremiseInput {
  author: UserCreateNestedOneWithoutPremisesInput
  createdAt: DateTime
  id: String
  premisesOnTimelines: PremisesOnTimelinesCreateNestedManyWithoutPremiseInput
  subscriptionsOnPremises: SubscriptionsOnPremisesCreateNestedManyWithoutPremiseInput
  tagsOnPremises: TagsOnPremisesCreateNestedManyWithoutPremiseInput
  threadsOnPremise: ThreadsOnPremiseCreateNestedManyWithoutPremiseInput
  title: String!
  updatedAt: DateTime
  vision: VisionCreateNestedManyWithoutPremiseInput
}

type PremiseGroupBy {
  _count: PremiseCountAggregate
  _max: PremiseMaxAggregate
  _min: PremiseMinAggregate
  authorId: String
  createdAt: DateTime!
  id: String!
  title: String!
  updatedAt: DateTime!
}

input PremiseListRelationFilter {
  every: PremiseWhereInput
  none: PremiseWhereInput
  some: PremiseWhereInput
}

type PremiseMaxAggregate {
  authorId: String
  createdAt: DateTime
  id: String
  title: String
  updatedAt: DateTime
}

input PremiseMaxOrderByAggregateInput {
  authorId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

type PremiseMinAggregate {
  authorId: String
  createdAt: DateTime
  id: String
  title: String
  updatedAt: DateTime
}

input PremiseMinOrderByAggregateInput {
  authorId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input PremiseOrderByRelationAggregateInput {
  _count: SortOrder
}

input PremiseOrderByWithAggregationInput {
  _count: PremiseCountOrderByAggregateInput
  _max: PremiseMaxOrderByAggregateInput
  _min: PremiseMinOrderByAggregateInput
  authorId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input PremiseOrderByWithRelationInput {
  author: UserOrderByWithRelationInput
  authorId: SortOrder
  createdAt: SortOrder
  id: SortOrder
  premisesOnTimelines: PremisesOnTimelinesOrderByRelationAggregateInput
  subscriptionsOnPremises: SubscriptionsOnPremisesOrderByRelationAggregateInput
  tagsOnPremises: TagsOnPremisesOrderByRelationAggregateInput
  threadsOnPremise: ThreadsOnPremiseOrderByRelationAggregateInput
  title: SortOrder
  updatedAt: SortOrder
  vision: VisionOrderByRelationAggregateInput
  votesOnPremise: VotesOnPremiseOrderByRelationAggregateInput
}

input PremiseRelationFilter {
  is: PremiseWhereInput
  isNot: PremiseWhereInput
}

enum PremiseScalarFieldEnum {
  authorId
  createdAt
  id
  title
  updatedAt
}

input PremiseScalarWhereInput {
  AND: [PremiseScalarWhereInput!]
  NOT: [PremiseScalarWhereInput!]
  OR: [PremiseScalarWhereInput!]
  authorId: StringNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input PremiseScalarWhereWithAggregatesInput {
  AND: [PremiseScalarWhereWithAggregatesInput!]
  NOT: [PremiseScalarWhereWithAggregatesInput!]
  OR: [PremiseScalarWhereWithAggregatesInput!]
  authorId: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  title: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input PremiseUpdateInput {
  author: UserUpdateOneWithoutPremisesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  premisesOnTimelines: PremisesOnTimelinesUpdateManyWithoutPremiseInput
  subscriptionsOnPremises: SubscriptionsOnPremisesUpdateManyWithoutPremiseInput
  tagsOnPremises: TagsOnPremisesUpdateManyWithoutPremiseInput
  threadsOnPremise: ThreadsOnPremiseUpdateManyWithoutPremiseInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  vision: VisionUpdateManyWithoutPremiseInput
  votesOnPremise: VotesOnPremiseUpdateManyWithoutPremiseInput
}

input PremiseUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input PremiseUpdateManyWithWhereWithoutAuthorInput {
  data: PremiseUpdateManyMutationInput!
  where: PremiseScalarWhereInput!
}

input PremiseUpdateManyWithoutAuthorInput {
  connect: [PremiseWhereUniqueInput!]
  connectOrCreate: [PremiseCreateOrConnectWithoutAuthorInput!]
  create: [PremiseCreateWithoutAuthorInput!]
  createMany: PremiseCreateManyAuthorInputEnvelope
  delete: [PremiseWhereUniqueInput!]
  deleteMany: [PremiseScalarWhereInput!]
  disconnect: [PremiseWhereUniqueInput!]
  set: [PremiseWhereUniqueInput!]
  update: [PremiseUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [PremiseUpdateManyWithWhereWithoutAuthorInput!]
  upsert: [PremiseUpsertWithWhereUniqueWithoutAuthorInput!]
}

input PremiseUpdateOneRequiredWithoutPremisesOnTimelinesInput {
  connect: PremiseWhereUniqueInput
  connectOrCreate: PremiseCreateOrConnectWithoutPremisesOnTimelinesInput
  create: PremiseCreateWithoutPremisesOnTimelinesInput
  update: PremiseUpdateWithoutPremisesOnTimelinesInput
  upsert: PremiseUpsertWithoutPremisesOnTimelinesInput
}

input PremiseUpdateOneRequiredWithoutSubscriptionsOnPremisesInput {
  connect: PremiseWhereUniqueInput
  connectOrCreate: PremiseCreateOrConnectWithoutSubscriptionsOnPremisesInput
  create: PremiseCreateWithoutSubscriptionsOnPremisesInput
  update: PremiseUpdateWithoutSubscriptionsOnPremisesInput
  upsert: PremiseUpsertWithoutSubscriptionsOnPremisesInput
}

input PremiseUpdateOneRequiredWithoutTagsOnPremisesInput {
  connect: PremiseWhereUniqueInput
  connectOrCreate: PremiseCreateOrConnectWithoutTagsOnPremisesInput
  create: PremiseCreateWithoutTagsOnPremisesInput
  update: PremiseUpdateWithoutTagsOnPremisesInput
  upsert: PremiseUpsertWithoutTagsOnPremisesInput
}

input PremiseUpdateOneRequiredWithoutThreadsOnPremiseInput {
  connect: PremiseWhereUniqueInput
  connectOrCreate: PremiseCreateOrConnectWithoutThreadsOnPremiseInput
  create: PremiseCreateWithoutThreadsOnPremiseInput
  update: PremiseUpdateWithoutThreadsOnPremiseInput
  upsert: PremiseUpsertWithoutThreadsOnPremiseInput
}

input PremiseUpdateOneRequiredWithoutVisionInput {
  connect: PremiseWhereUniqueInput
  connectOrCreate: PremiseCreateOrConnectWithoutVisionInput
  create: PremiseCreateWithoutVisionInput
  update: PremiseUpdateWithoutVisionInput
  upsert: PremiseUpsertWithoutVisionInput
}

input PremiseUpdateOneRequiredWithoutVotesOnPremiseInput {
  connect: PremiseWhereUniqueInput
  connectOrCreate: PremiseCreateOrConnectWithoutVotesOnPremiseInput
  create: PremiseCreateWithoutVotesOnPremiseInput
  update: PremiseUpdateWithoutVotesOnPremiseInput
  upsert: PremiseUpsertWithoutVotesOnPremiseInput
}

input PremiseUpdateWithWhereUniqueWithoutAuthorInput {
  data: PremiseUpdateWithoutAuthorInput!
  where: PremiseWhereUniqueInput!
}

input PremiseUpdateWithoutAuthorInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  premisesOnTimelines: PremisesOnTimelinesUpdateManyWithoutPremiseInput
  subscriptionsOnPremises: SubscriptionsOnPremisesUpdateManyWithoutPremiseInput
  tagsOnPremises: TagsOnPremisesUpdateManyWithoutPremiseInput
  threadsOnPremise: ThreadsOnPremiseUpdateManyWithoutPremiseInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  vision: VisionUpdateManyWithoutPremiseInput
  votesOnPremise: VotesOnPremiseUpdateManyWithoutPremiseInput
}

input PremiseUpdateWithoutPremisesOnTimelinesInput {
  author: UserUpdateOneWithoutPremisesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  subscriptionsOnPremises: SubscriptionsOnPremisesUpdateManyWithoutPremiseInput
  tagsOnPremises: TagsOnPremisesUpdateManyWithoutPremiseInput
  threadsOnPremise: ThreadsOnPremiseUpdateManyWithoutPremiseInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  vision: VisionUpdateManyWithoutPremiseInput
  votesOnPremise: VotesOnPremiseUpdateManyWithoutPremiseInput
}

input PremiseUpdateWithoutSubscriptionsOnPremisesInput {
  author: UserUpdateOneWithoutPremisesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  premisesOnTimelines: PremisesOnTimelinesUpdateManyWithoutPremiseInput
  tagsOnPremises: TagsOnPremisesUpdateManyWithoutPremiseInput
  threadsOnPremise: ThreadsOnPremiseUpdateManyWithoutPremiseInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  vision: VisionUpdateManyWithoutPremiseInput
  votesOnPremise: VotesOnPremiseUpdateManyWithoutPremiseInput
}

input PremiseUpdateWithoutTagsOnPremisesInput {
  author: UserUpdateOneWithoutPremisesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  premisesOnTimelines: PremisesOnTimelinesUpdateManyWithoutPremiseInput
  subscriptionsOnPremises: SubscriptionsOnPremisesUpdateManyWithoutPremiseInput
  threadsOnPremise: ThreadsOnPremiseUpdateManyWithoutPremiseInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  vision: VisionUpdateManyWithoutPremiseInput
  votesOnPremise: VotesOnPremiseUpdateManyWithoutPremiseInput
}

input PremiseUpdateWithoutThreadsOnPremiseInput {
  author: UserUpdateOneWithoutPremisesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  premisesOnTimelines: PremisesOnTimelinesUpdateManyWithoutPremiseInput
  subscriptionsOnPremises: SubscriptionsOnPremisesUpdateManyWithoutPremiseInput
  tagsOnPremises: TagsOnPremisesUpdateManyWithoutPremiseInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  vision: VisionUpdateManyWithoutPremiseInput
  votesOnPremise: VotesOnPremiseUpdateManyWithoutPremiseInput
}

input PremiseUpdateWithoutVisionInput {
  author: UserUpdateOneWithoutPremisesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  premisesOnTimelines: PremisesOnTimelinesUpdateManyWithoutPremiseInput
  subscriptionsOnPremises: SubscriptionsOnPremisesUpdateManyWithoutPremiseInput
  tagsOnPremises: TagsOnPremisesUpdateManyWithoutPremiseInput
  threadsOnPremise: ThreadsOnPremiseUpdateManyWithoutPremiseInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  votesOnPremise: VotesOnPremiseUpdateManyWithoutPremiseInput
}

input PremiseUpdateWithoutVotesOnPremiseInput {
  author: UserUpdateOneWithoutPremisesInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  premisesOnTimelines: PremisesOnTimelinesUpdateManyWithoutPremiseInput
  subscriptionsOnPremises: SubscriptionsOnPremisesUpdateManyWithoutPremiseInput
  tagsOnPremises: TagsOnPremisesUpdateManyWithoutPremiseInput
  threadsOnPremise: ThreadsOnPremiseUpdateManyWithoutPremiseInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  vision: VisionUpdateManyWithoutPremiseInput
}

input PremiseUpsertWithWhereUniqueWithoutAuthorInput {
  create: PremiseCreateWithoutAuthorInput!
  update: PremiseUpdateWithoutAuthorInput!
  where: PremiseWhereUniqueInput!
}

input PremiseUpsertWithoutPremisesOnTimelinesInput {
  create: PremiseCreateWithoutPremisesOnTimelinesInput!
  update: PremiseUpdateWithoutPremisesOnTimelinesInput!
}

input PremiseUpsertWithoutSubscriptionsOnPremisesInput {
  create: PremiseCreateWithoutSubscriptionsOnPremisesInput!
  update: PremiseUpdateWithoutSubscriptionsOnPremisesInput!
}

input PremiseUpsertWithoutTagsOnPremisesInput {
  create: PremiseCreateWithoutTagsOnPremisesInput!
  update: PremiseUpdateWithoutTagsOnPremisesInput!
}

input PremiseUpsertWithoutThreadsOnPremiseInput {
  create: PremiseCreateWithoutThreadsOnPremiseInput!
  update: PremiseUpdateWithoutThreadsOnPremiseInput!
}

input PremiseUpsertWithoutVisionInput {
  create: PremiseCreateWithoutVisionInput!
  update: PremiseUpdateWithoutVisionInput!
}

input PremiseUpsertWithoutVotesOnPremiseInput {
  create: PremiseCreateWithoutVotesOnPremiseInput!
  update: PremiseUpdateWithoutVotesOnPremiseInput!
}

input PremiseWhereInput {
  AND: [PremiseWhereInput!]
  NOT: [PremiseWhereInput!]
  OR: [PremiseWhereInput!]
  author: UserRelationFilter
  authorId: StringNullableFilter
  createdAt: DateTimeFilter
  id: StringFilter
  premisesOnTimelines: PremisesOnTimelinesListRelationFilter
  subscriptionsOnPremises: SubscriptionsOnPremisesListRelationFilter
  tagsOnPremises: TagsOnPremisesListRelationFilter
  threadsOnPremise: ThreadsOnPremiseListRelationFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  vision: VisionListRelationFilter
  votesOnPremise: VotesOnPremiseListRelationFilter
}

input PremiseWhereUniqueInput {
  id: String
}

type PremisesOnTimelines {
  assignedAt: DateTime!
  premise: Premise!
  premiseId: String!
  timeline: Timeline!
  timelineId: String!
}

type PremisesOnTimelinesCountAggregate {
  _all: Int!
  assignedAt: Int!
  premiseId: Int!
  timelineId: Int!
}

input PremisesOnTimelinesCountOrderByAggregateInput {
  assignedAt: SortOrder
  premiseId: SortOrder
  timelineId: SortOrder
}

input PremisesOnTimelinesCreateInput {
  assignedAt: DateTime
  premise: PremiseCreateNestedOneWithoutPremisesOnTimelinesInput!
  timeline: TimelineCreateNestedOneWithoutPremisesOnTimelinesInput!
}

input PremisesOnTimelinesCreateManyInput {
  assignedAt: DateTime
  premiseId: String!
  timelineId: String!
}

input PremisesOnTimelinesCreateManyPremiseInput {
  assignedAt: DateTime
  timelineId: String!
}

input PremisesOnTimelinesCreateManyPremiseInputEnvelope {
  data: [PremisesOnTimelinesCreateManyPremiseInput!]!
  skipDuplicates: Boolean
}

input PremisesOnTimelinesCreateManyTimelineInput {
  assignedAt: DateTime
  premiseId: String!
}

input PremisesOnTimelinesCreateManyTimelineInputEnvelope {
  data: [PremisesOnTimelinesCreateManyTimelineInput!]!
  skipDuplicates: Boolean
}

input PremisesOnTimelinesCreateNestedManyWithoutPremiseInput {
  connect: [PremisesOnTimelinesWhereUniqueInput!]
  connectOrCreate: [PremisesOnTimelinesCreateOrConnectWithoutPremiseInput!]
  create: [PremisesOnTimelinesCreateWithoutPremiseInput!]
  createMany: PremisesOnTimelinesCreateManyPremiseInputEnvelope
}

input PremisesOnTimelinesCreateNestedManyWithoutTimelineInput {
  connect: [PremisesOnTimelinesWhereUniqueInput!]
  connectOrCreate: [PremisesOnTimelinesCreateOrConnectWithoutTimelineInput!]
  create: [PremisesOnTimelinesCreateWithoutTimelineInput!]
  createMany: PremisesOnTimelinesCreateManyTimelineInputEnvelope
}

input PremisesOnTimelinesCreateOrConnectWithoutPremiseInput {
  create: PremisesOnTimelinesCreateWithoutPremiseInput!
  where: PremisesOnTimelinesWhereUniqueInput!
}

input PremisesOnTimelinesCreateOrConnectWithoutTimelineInput {
  create: PremisesOnTimelinesCreateWithoutTimelineInput!
  where: PremisesOnTimelinesWhereUniqueInput!
}

input PremisesOnTimelinesCreateWithoutPremiseInput {
  assignedAt: DateTime
  timeline: TimelineCreateNestedOneWithoutPremisesOnTimelinesInput!
}

input PremisesOnTimelinesCreateWithoutTimelineInput {
  assignedAt: DateTime
  premise: PremiseCreateNestedOneWithoutPremisesOnTimelinesInput!
}

type PremisesOnTimelinesGroupBy {
  _count: PremisesOnTimelinesCountAggregate
  _max: PremisesOnTimelinesMaxAggregate
  _min: PremisesOnTimelinesMinAggregate
  assignedAt: DateTime!
  premiseId: String!
  timelineId: String!
}

input PremisesOnTimelinesListRelationFilter {
  every: PremisesOnTimelinesWhereInput
  none: PremisesOnTimelinesWhereInput
  some: PremisesOnTimelinesWhereInput
}

type PremisesOnTimelinesMaxAggregate {
  assignedAt: DateTime
  premiseId: String
  timelineId: String
}

input PremisesOnTimelinesMaxOrderByAggregateInput {
  assignedAt: SortOrder
  premiseId: SortOrder
  timelineId: SortOrder
}

type PremisesOnTimelinesMinAggregate {
  assignedAt: DateTime
  premiseId: String
  timelineId: String
}

input PremisesOnTimelinesMinOrderByAggregateInput {
  assignedAt: SortOrder
  premiseId: SortOrder
  timelineId: SortOrder
}

input PremisesOnTimelinesOrderByRelationAggregateInput {
  _count: SortOrder
}

input PremisesOnTimelinesOrderByWithAggregationInput {
  _count: PremisesOnTimelinesCountOrderByAggregateInput
  _max: PremisesOnTimelinesMaxOrderByAggregateInput
  _min: PremisesOnTimelinesMinOrderByAggregateInput
  assignedAt: SortOrder
  premiseId: SortOrder
  timelineId: SortOrder
}

input PremisesOnTimelinesOrderByWithRelationInput {
  assignedAt: SortOrder
  premise: PremiseOrderByWithRelationInput
  premiseId: SortOrder
  timeline: TimelineOrderByWithRelationInput
  timelineId: SortOrder
}

input PremisesOnTimelinesPremiseIdTimelineIdCompoundUniqueInput {
  premiseId: String!
  timelineId: String!
}

enum PremisesOnTimelinesScalarFieldEnum {
  assignedAt
  premiseId
  timelineId
}

input PremisesOnTimelinesScalarWhereInput {
  AND: [PremisesOnTimelinesScalarWhereInput!]
  NOT: [PremisesOnTimelinesScalarWhereInput!]
  OR: [PremisesOnTimelinesScalarWhereInput!]
  assignedAt: DateTimeFilter
  premiseId: StringFilter
  timelineId: StringFilter
}

input PremisesOnTimelinesScalarWhereWithAggregatesInput {
  AND: [PremisesOnTimelinesScalarWhereWithAggregatesInput!]
  NOT: [PremisesOnTimelinesScalarWhereWithAggregatesInput!]
  OR: [PremisesOnTimelinesScalarWhereWithAggregatesInput!]
  assignedAt: DateTimeWithAggregatesFilter
  premiseId: StringWithAggregatesFilter
  timelineId: StringWithAggregatesFilter
}

input PremisesOnTimelinesUpdateInput {
  assignedAt: DateTimeFieldUpdateOperationsInput
  premise: PremiseUpdateOneRequiredWithoutPremisesOnTimelinesInput
  timeline: TimelineUpdateOneRequiredWithoutPremisesOnTimelinesInput
}

input PremisesOnTimelinesUpdateManyMutationInput {
  assignedAt: DateTimeFieldUpdateOperationsInput
}

input PremisesOnTimelinesUpdateManyWithWhereWithoutPremiseInput {
  data: PremisesOnTimelinesUpdateManyMutationInput!
  where: PremisesOnTimelinesScalarWhereInput!
}

input PremisesOnTimelinesUpdateManyWithWhereWithoutTimelineInput {
  data: PremisesOnTimelinesUpdateManyMutationInput!
  where: PremisesOnTimelinesScalarWhereInput!
}

input PremisesOnTimelinesUpdateManyWithoutPremiseInput {
  connect: [PremisesOnTimelinesWhereUniqueInput!]
  connectOrCreate: [PremisesOnTimelinesCreateOrConnectWithoutPremiseInput!]
  create: [PremisesOnTimelinesCreateWithoutPremiseInput!]
  createMany: PremisesOnTimelinesCreateManyPremiseInputEnvelope
  delete: [PremisesOnTimelinesWhereUniqueInput!]
  deleteMany: [PremisesOnTimelinesScalarWhereInput!]
  disconnect: [PremisesOnTimelinesWhereUniqueInput!]
  set: [PremisesOnTimelinesWhereUniqueInput!]
  update: [PremisesOnTimelinesUpdateWithWhereUniqueWithoutPremiseInput!]
  updateMany: [PremisesOnTimelinesUpdateManyWithWhereWithoutPremiseInput!]
  upsert: [PremisesOnTimelinesUpsertWithWhereUniqueWithoutPremiseInput!]
}

input PremisesOnTimelinesUpdateManyWithoutTimelineInput {
  connect: [PremisesOnTimelinesWhereUniqueInput!]
  connectOrCreate: [PremisesOnTimelinesCreateOrConnectWithoutTimelineInput!]
  create: [PremisesOnTimelinesCreateWithoutTimelineInput!]
  createMany: PremisesOnTimelinesCreateManyTimelineInputEnvelope
  delete: [PremisesOnTimelinesWhereUniqueInput!]
  deleteMany: [PremisesOnTimelinesScalarWhereInput!]
  disconnect: [PremisesOnTimelinesWhereUniqueInput!]
  set: [PremisesOnTimelinesWhereUniqueInput!]
  update: [PremisesOnTimelinesUpdateWithWhereUniqueWithoutTimelineInput!]
  updateMany: [PremisesOnTimelinesUpdateManyWithWhereWithoutTimelineInput!]
  upsert: [PremisesOnTimelinesUpsertWithWhereUniqueWithoutTimelineInput!]
}

input PremisesOnTimelinesUpdateWithWhereUniqueWithoutPremiseInput {
  data: PremisesOnTimelinesUpdateWithoutPremiseInput!
  where: PremisesOnTimelinesWhereUniqueInput!
}

input PremisesOnTimelinesUpdateWithWhereUniqueWithoutTimelineInput {
  data: PremisesOnTimelinesUpdateWithoutTimelineInput!
  where: PremisesOnTimelinesWhereUniqueInput!
}

input PremisesOnTimelinesUpdateWithoutPremiseInput {
  assignedAt: DateTimeFieldUpdateOperationsInput
  timeline: TimelineUpdateOneRequiredWithoutPremisesOnTimelinesInput
}

input PremisesOnTimelinesUpdateWithoutTimelineInput {
  assignedAt: DateTimeFieldUpdateOperationsInput
  premise: PremiseUpdateOneRequiredWithoutPremisesOnTimelinesInput
}

input PremisesOnTimelinesUpsertWithWhereUniqueWithoutPremiseInput {
  create: PremisesOnTimelinesCreateWithoutPremiseInput!
  update: PremisesOnTimelinesUpdateWithoutPremiseInput!
  where: PremisesOnTimelinesWhereUniqueInput!
}

input PremisesOnTimelinesUpsertWithWhereUniqueWithoutTimelineInput {
  create: PremisesOnTimelinesCreateWithoutTimelineInput!
  update: PremisesOnTimelinesUpdateWithoutTimelineInput!
  where: PremisesOnTimelinesWhereUniqueInput!
}

input PremisesOnTimelinesWhereInput {
  AND: [PremisesOnTimelinesWhereInput!]
  NOT: [PremisesOnTimelinesWhereInput!]
  OR: [PremisesOnTimelinesWhereInput!]
  assignedAt: DateTimeFilter
  premise: PremiseRelationFilter
  premiseId: StringFilter
  timeline: TimelineRelationFilter
  timelineId: StringFilter
}

input PremisesOnTimelinesWhereUniqueInput {
  premiseId_timelineId: PremisesOnTimelinesPremiseIdTimelineIdCompoundUniqueInput
}

type Query {
  account(where: AccountWhereUniqueInput!): Account
  accounts(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): [Account!]!
  aggregateAccount(cursor: AccountWhereUniqueInput, orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): AggregateAccount!
  aggregateLabel(cursor: LabelWhereUniqueInput, orderBy: [LabelOrderByWithRelationInput!], skip: Int, take: Int, where: LabelWhereInput): AggregateLabel!
  aggregateLabelOnMergeRequest(cursor: LabelOnMergeRequestWhereUniqueInput, orderBy: [LabelOnMergeRequestOrderByWithRelationInput!], skip: Int, take: Int, where: LabelOnMergeRequestWhereInput): AggregateLabelOnMergeRequest!
  aggregateLabelOnVision(cursor: LabelOnVisionWhereUniqueInput, orderBy: [LabelOnVisionOrderByWithRelationInput!], skip: Int, take: Int, where: LabelOnVisionWhereInput): AggregateLabelOnVision!
  aggregateMergeRequest(cursor: MergeRequestWhereUniqueInput, orderBy: [MergeRequestOrderByWithRelationInput!], skip: Int, take: Int, where: MergeRequestWhereInput): AggregateMergeRequest!
  aggregatePremise(cursor: PremiseWhereUniqueInput, orderBy: [PremiseOrderByWithRelationInput!], skip: Int, take: Int, where: PremiseWhereInput): AggregatePremise!
  aggregatePremisesOnTimelines(cursor: PremisesOnTimelinesWhereUniqueInput, orderBy: [PremisesOnTimelinesOrderByWithRelationInput!], skip: Int, take: Int, where: PremisesOnTimelinesWhereInput): AggregatePremisesOnTimelines!
  aggregateReactionOnThreads(cursor: ReactionOnThreadsWhereUniqueInput, orderBy: [ReactionOnThreadsOrderByWithRelationInput!], skip: Int, take: Int, where: ReactionOnThreadsWhereInput): AggregateReactionOnThreads!
  aggregateReactionOnTimelines(cursor: ReactionOnTimelinesWhereUniqueInput, orderBy: [ReactionOnTimelinesOrderByWithRelationInput!], skip: Int, take: Int, where: ReactionOnTimelinesWhereInput): AggregateReactionOnTimelines!
  aggregateReactionOnVisions(cursor: ReactionOnVisionsWhereUniqueInput, orderBy: [ReactionOnVisionsOrderByWithRelationInput!], skip: Int, take: Int, where: ReactionOnVisionsWhereInput): AggregateReactionOnVisions!
  aggregateReference(cursor: ReferenceWhereUniqueInput, orderBy: [ReferenceOrderByWithRelationInput!], skip: Int, take: Int, where: ReferenceWhereInput): AggregateReference!
  aggregateRelationBetweenVisions(cursor: RelationBetweenVisionsWhereUniqueInput, orderBy: [RelationBetweenVisionsOrderByWithRelationInput!], skip: Int, take: Int, where: RelationBetweenVisionsWhereInput): AggregateRelationBetweenVisions!
  aggregateRelationBetweenVisionsStatus(cursor: RelationBetweenVisionsStatusWhereUniqueInput, orderBy: [RelationBetweenVisionsStatusOrderByWithRelationInput!], skip: Int, take: Int, where: RelationBetweenVisionsStatusWhereInput): AggregateRelationBetweenVisionsStatus!
  aggregateReputationRecord(cursor: ReputationRecordWhereUniqueInput, orderBy: [ReputationRecordOrderByWithRelationInput!], skip: Int, take: Int, where: ReputationRecordWhereInput): AggregateReputationRecord!
  aggregateSession(cursor: SessionWhereUniqueInput, orderBy: [SessionOrderByWithRelationInput!], skip: Int, take: Int, where: SessionWhereInput): AggregateSession!
  aggregateSnapshot(cursor: SnapshotWhereUniqueInput, orderBy: [SnapshotOrderByWithRelationInput!], skip: Int, take: Int, where: SnapshotWhereInput): AggregateSnapshot!
  aggregateSubscriptionsOnPremises(cursor: SubscriptionsOnPremisesWhereUniqueInput, orderBy: [SubscriptionsOnPremisesOrderByWithRelationInput!], skip: Int, take: Int, where: SubscriptionsOnPremisesWhereInput): AggregateSubscriptionsOnPremises!
  aggregateSubscriptionsOnTimelines(cursor: SubscriptionsOnTimelinesWhereUniqueInput, orderBy: [SubscriptionsOnTimelinesOrderByWithRelationInput!], skip: Int, take: Int, where: SubscriptionsOnTimelinesWhereInput): AggregateSubscriptionsOnTimelines!
  aggregateTag(cursor: TagWhereUniqueInput, orderBy: [TagOrderByWithRelationInput!], skip: Int, take: Int, where: TagWhereInput): AggregateTag!
  aggregateTagsOnPremises(cursor: TagsOnPremisesWhereUniqueInput, orderBy: [TagsOnPremisesOrderByWithRelationInput!], skip: Int, take: Int, where: TagsOnPremisesWhereInput): AggregateTagsOnPremises!
  aggregateTagsOnTimelines(cursor: TagsOnTimelinesWhereUniqueInput, orderBy: [TagsOnTimelinesOrderByWithRelationInput!], skip: Int, take: Int, where: TagsOnTimelinesWhereInput): AggregateTagsOnTimelines!
  aggregateTagsOnVisions(cursor: TagsOnVisionsWhereUniqueInput, orderBy: [TagsOnVisionsOrderByWithRelationInput!], skip: Int, take: Int, where: TagsOnVisionsWhereInput): AggregateTagsOnVisions!
  aggregateThread(cursor: ThreadWhereUniqueInput, orderBy: [ThreadOrderByWithRelationInput!], skip: Int, take: Int, where: ThreadWhereInput): AggregateThread!
  aggregateThreadsOnMergeRequest(cursor: ThreadsOnMergeRequestWhereUniqueInput, orderBy: [ThreadsOnMergeRequestOrderByWithRelationInput!], skip: Int, take: Int, where: ThreadsOnMergeRequestWhereInput): AggregateThreadsOnMergeRequest!
  aggregateThreadsOnPremise(cursor: ThreadsOnPremiseWhereUniqueInput, orderBy: [ThreadsOnPremiseOrderByWithRelationInput!], skip: Int, take: Int, where: ThreadsOnPremiseWhereInput): AggregateThreadsOnPremise!
  aggregateThreadsOnTimeline(cursor: ThreadsOnTimelineWhereUniqueInput, orderBy: [ThreadsOnTimelineOrderByWithRelationInput!], skip: Int, take: Int, where: ThreadsOnTimelineWhereInput): AggregateThreadsOnTimeline!
  aggregateThreadsOnVision(cursor: ThreadsOnVisionWhereUniqueInput, orderBy: [ThreadsOnVisionOrderByWithRelationInput!], skip: Int, take: Int, where: ThreadsOnVisionWhereInput): AggregateThreadsOnVision!
  aggregateTimeline(cursor: TimelineWhereUniqueInput, orderBy: [TimelineOrderByWithRelationInput!], skip: Int, take: Int, where: TimelineWhereInput): AggregateTimeline!
  aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
  aggregateVerificationToken(cursor: VerificationTokenWhereUniqueInput, orderBy: [VerificationTokenOrderByWithRelationInput!], skip: Int, take: Int, where: VerificationTokenWhereInput): AggregateVerificationToken!
  aggregateVision(cursor: VisionWhereUniqueInput, orderBy: [VisionOrderByWithRelationInput!], skip: Int, take: Int, where: VisionWhereInput): AggregateVision!
  aggregateVisionViewsHistory(cursor: VisionViewsHistoryWhereUniqueInput, orderBy: [VisionViewsHistoryOrderByWithRelationInput!], skip: Int, take: Int, where: VisionViewsHistoryWhereInput): AggregateVisionViewsHistory!
  aggregateVotesOnPremise(cursor: VotesOnPremiseWhereUniqueInput, orderBy: [VotesOnPremiseOrderByWithRelationInput!], skip: Int, take: Int, where: VotesOnPremiseWhereInput): AggregateVotesOnPremise!
  aggregateVotesOnThread(cursor: VotesOnThreadWhereUniqueInput, orderBy: [VotesOnThreadOrderByWithRelationInput!], skip: Int, take: Int, where: VotesOnThreadWhereInput): AggregateVotesOnThread!
  aggregateVotesOnTimeline(cursor: VotesOnTimelineWhereUniqueInput, orderBy: [VotesOnTimelineOrderByWithRelationInput!], skip: Int, take: Int, where: VotesOnTimelineWhereInput): AggregateVotesOnTimeline!
  aggregateVotesOnVision(cursor: VotesOnVisionWhereUniqueInput, orderBy: [VotesOnVisionOrderByWithRelationInput!], skip: Int, take: Int, where: VotesOnVisionWhereInput): AggregateVotesOnVision!
  findFirstAccount(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): Account
  findFirstLabel(cursor: LabelWhereUniqueInput, distinct: [LabelScalarFieldEnum!], orderBy: [LabelOrderByWithRelationInput!], skip: Int, take: Int, where: LabelWhereInput): Label
  findFirstLabelOnMergeRequest(cursor: LabelOnMergeRequestWhereUniqueInput, distinct: [LabelOnMergeRequestScalarFieldEnum!], orderBy: [LabelOnMergeRequestOrderByWithRelationInput!], skip: Int, take: Int, where: LabelOnMergeRequestWhereInput): LabelOnMergeRequest
  findFirstLabelOnVision(cursor: LabelOnVisionWhereUniqueInput, distinct: [LabelOnVisionScalarFieldEnum!], orderBy: [LabelOnVisionOrderByWithRelationInput!], skip: Int, take: Int, where: LabelOnVisionWhereInput): LabelOnVision
  findFirstMergeRequest(cursor: MergeRequestWhereUniqueInput, distinct: [MergeRequestScalarFieldEnum!], orderBy: [MergeRequestOrderByWithRelationInput!], skip: Int, take: Int, where: MergeRequestWhereInput): MergeRequest
  findFirstPremise(cursor: PremiseWhereUniqueInput, distinct: [PremiseScalarFieldEnum!], orderBy: [PremiseOrderByWithRelationInput!], skip: Int, take: Int, where: PremiseWhereInput): Premise
  findFirstPremisesOnTimelines(cursor: PremisesOnTimelinesWhereUniqueInput, distinct: [PremisesOnTimelinesScalarFieldEnum!], orderBy: [PremisesOnTimelinesOrderByWithRelationInput!], skip: Int, take: Int, where: PremisesOnTimelinesWhereInput): PremisesOnTimelines
  findFirstReactionOnThreads(cursor: ReactionOnThreadsWhereUniqueInput, distinct: [ReactionOnThreadsScalarFieldEnum!], orderBy: [ReactionOnThreadsOrderByWithRelationInput!], skip: Int, take: Int, where: ReactionOnThreadsWhereInput): ReactionOnThreads
  findFirstReactionOnTimelines(cursor: ReactionOnTimelinesWhereUniqueInput, distinct: [ReactionOnTimelinesScalarFieldEnum!], orderBy: [ReactionOnTimelinesOrderByWithRelationInput!], skip: Int, take: Int, where: ReactionOnTimelinesWhereInput): ReactionOnTimelines
  findFirstReactionOnVisions(cursor: ReactionOnVisionsWhereUniqueInput, distinct: [ReactionOnVisionsScalarFieldEnum!], orderBy: [ReactionOnVisionsOrderByWithRelationInput!], skip: Int, take: Int, where: ReactionOnVisionsWhereInput): ReactionOnVisions
  findFirstReference(cursor: ReferenceWhereUniqueInput, distinct: [ReferenceScalarFieldEnum!], orderBy: [ReferenceOrderByWithRelationInput!], skip: Int, take: Int, where: ReferenceWhereInput): Reference
  findFirstRelationBetweenVisions(cursor: RelationBetweenVisionsWhereUniqueInput, distinct: [RelationBetweenVisionsScalarFieldEnum!], orderBy: [RelationBetweenVisionsOrderByWithRelationInput!], skip: Int, take: Int, where: RelationBetweenVisionsWhereInput): RelationBetweenVisions
  findFirstRelationBetweenVisionsStatus(cursor: RelationBetweenVisionsStatusWhereUniqueInput, distinct: [RelationBetweenVisionsStatusScalarFieldEnum!], orderBy: [RelationBetweenVisionsStatusOrderByWithRelationInput!], skip: Int, take: Int, where: RelationBetweenVisionsStatusWhereInput): RelationBetweenVisionsStatus
  findFirstReputationRecord(cursor: ReputationRecordWhereUniqueInput, distinct: [ReputationRecordScalarFieldEnum!], orderBy: [ReputationRecordOrderByWithRelationInput!], skip: Int, take: Int, where: ReputationRecordWhereInput): ReputationRecord
  findFirstSession(cursor: SessionWhereUniqueInput, distinct: [SessionScalarFieldEnum!], orderBy: [SessionOrderByWithRelationInput!], skip: Int, take: Int, where: SessionWhereInput): Session
  findFirstSnapshot(cursor: SnapshotWhereUniqueInput, distinct: [SnapshotScalarFieldEnum!], orderBy: [SnapshotOrderByWithRelationInput!], skip: Int, take: Int, where: SnapshotWhereInput): Snapshot
  findFirstSubscriptionsOnPremises(cursor: SubscriptionsOnPremisesWhereUniqueInput, distinct: [SubscriptionsOnPremisesScalarFieldEnum!], orderBy: [SubscriptionsOnPremisesOrderByWithRelationInput!], skip: Int, take: Int, where: SubscriptionsOnPremisesWhereInput): SubscriptionsOnPremises
  findFirstSubscriptionsOnTimelines(cursor: SubscriptionsOnTimelinesWhereUniqueInput, distinct: [SubscriptionsOnTimelinesScalarFieldEnum!], orderBy: [SubscriptionsOnTimelinesOrderByWithRelationInput!], skip: Int, take: Int, where: SubscriptionsOnTimelinesWhereInput): SubscriptionsOnTimelines
  findFirstTag(cursor: TagWhereUniqueInput, distinct: [TagScalarFieldEnum!], orderBy: [TagOrderByWithRelationInput!], skip: Int, take: Int, where: TagWhereInput): Tag
  findFirstTagsOnPremises(cursor: TagsOnPremisesWhereUniqueInput, distinct: [TagsOnPremisesScalarFieldEnum!], orderBy: [TagsOnPremisesOrderByWithRelationInput!], skip: Int, take: Int, where: TagsOnPremisesWhereInput): TagsOnPremises
  findFirstTagsOnTimelines(cursor: TagsOnTimelinesWhereUniqueInput, distinct: [TagsOnTimelinesScalarFieldEnum!], orderBy: [TagsOnTimelinesOrderByWithRelationInput!], skip: Int, take: Int, where: TagsOnTimelinesWhereInput): TagsOnTimelines
  findFirstTagsOnVisions(cursor: TagsOnVisionsWhereUniqueInput, distinct: [TagsOnVisionsScalarFieldEnum!], orderBy: [TagsOnVisionsOrderByWithRelationInput!], skip: Int, take: Int, where: TagsOnVisionsWhereInput): TagsOnVisions
  findFirstThread(cursor: ThreadWhereUniqueInput, distinct: [ThreadScalarFieldEnum!], orderBy: [ThreadOrderByWithRelationInput!], skip: Int, take: Int, where: ThreadWhereInput): Thread
  findFirstThreadsOnMergeRequest(cursor: ThreadsOnMergeRequestWhereUniqueInput, distinct: [ThreadsOnMergeRequestScalarFieldEnum!], orderBy: [ThreadsOnMergeRequestOrderByWithRelationInput!], skip: Int, take: Int, where: ThreadsOnMergeRequestWhereInput): ThreadsOnMergeRequest
  findFirstThreadsOnPremise(cursor: ThreadsOnPremiseWhereUniqueInput, distinct: [ThreadsOnPremiseScalarFieldEnum!], orderBy: [ThreadsOnPremiseOrderByWithRelationInput!], skip: Int, take: Int, where: ThreadsOnPremiseWhereInput): ThreadsOnPremise
  findFirstThreadsOnTimeline(cursor: ThreadsOnTimelineWhereUniqueInput, distinct: [ThreadsOnTimelineScalarFieldEnum!], orderBy: [ThreadsOnTimelineOrderByWithRelationInput!], skip: Int, take: Int, where: ThreadsOnTimelineWhereInput): ThreadsOnTimeline
  findFirstThreadsOnVision(cursor: ThreadsOnVisionWhereUniqueInput, distinct: [ThreadsOnVisionScalarFieldEnum!], orderBy: [ThreadsOnVisionOrderByWithRelationInput!], skip: Int, take: Int, where: ThreadsOnVisionWhereInput): ThreadsOnVision
  findFirstTimeline(cursor: TimelineWhereUniqueInput, distinct: [TimelineScalarFieldEnum!], orderBy: [TimelineOrderByWithRelationInput!], skip: Int, take: Int, where: TimelineWhereInput): Timeline
  findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
  findFirstVerificationToken(cursor: VerificationTokenWhereUniqueInput, distinct: [VerificationTokenScalarFieldEnum!], orderBy: [VerificationTokenOrderByWithRelationInput!], skip: Int, take: Int, where: VerificationTokenWhereInput): VerificationToken
  findFirstVision(cursor: VisionWhereUniqueInput, distinct: [VisionScalarFieldEnum!], orderBy: [VisionOrderByWithRelationInput!], skip: Int, take: Int, where: VisionWhereInput): Vision
  findFirstVisionViewsHistory(cursor: VisionViewsHistoryWhereUniqueInput, distinct: [VisionViewsHistoryScalarFieldEnum!], orderBy: [VisionViewsHistoryOrderByWithRelationInput!], skip: Int, take: Int, where: VisionViewsHistoryWhereInput): VisionViewsHistory
  findFirstVotesOnPremise(cursor: VotesOnPremiseWhereUniqueInput, distinct: [VotesOnPremiseScalarFieldEnum!], orderBy: [VotesOnPremiseOrderByWithRelationInput!], skip: Int, take: Int, where: VotesOnPremiseWhereInput): VotesOnPremise
  findFirstVotesOnThread(cursor: VotesOnThreadWhereUniqueInput, distinct: [VotesOnThreadScalarFieldEnum!], orderBy: [VotesOnThreadOrderByWithRelationInput!], skip: Int, take: Int, where: VotesOnThreadWhereInput): VotesOnThread
  findFirstVotesOnTimeline(cursor: VotesOnTimelineWhereUniqueInput, distinct: [VotesOnTimelineScalarFieldEnum!], orderBy: [VotesOnTimelineOrderByWithRelationInput!], skip: Int, take: Int, where: VotesOnTimelineWhereInput): VotesOnTimeline
  findFirstVotesOnVision(cursor: VotesOnVisionWhereUniqueInput, distinct: [VotesOnVisionScalarFieldEnum!], orderBy: [VotesOnVisionOrderByWithRelationInput!], skip: Int, take: Int, where: VotesOnVisionWhereInput): VotesOnVision
  findManyPremisesOnTimelines(cursor: PremisesOnTimelinesWhereUniqueInput, distinct: [PremisesOnTimelinesScalarFieldEnum!], orderBy: [PremisesOnTimelinesOrderByWithRelationInput!], skip: Int, take: Int, where: PremisesOnTimelinesWhereInput): [PremisesOnTimelines!]!
  findManyReactionOnThreads(cursor: ReactionOnThreadsWhereUniqueInput, distinct: [ReactionOnThreadsScalarFieldEnum!], orderBy: [ReactionOnThreadsOrderByWithRelationInput!], skip: Int, take: Int, where: ReactionOnThreadsWhereInput): [ReactionOnThreads!]!
  findManyReactionOnTimelines(cursor: ReactionOnTimelinesWhereUniqueInput, distinct: [ReactionOnTimelinesScalarFieldEnum!], orderBy: [ReactionOnTimelinesOrderByWithRelationInput!], skip: Int, take: Int, where: ReactionOnTimelinesWhereInput): [ReactionOnTimelines!]!
  findManyReactionOnVisions(cursor: ReactionOnVisionsWhereUniqueInput, distinct: [ReactionOnVisionsScalarFieldEnum!], orderBy: [ReactionOnVisionsOrderByWithRelationInput!], skip: Int, take: Int, where: ReactionOnVisionsWhereInput): [ReactionOnVisions!]!
  findManyRelationBetweenVisions(cursor: RelationBetweenVisionsWhereUniqueInput, distinct: [RelationBetweenVisionsScalarFieldEnum!], orderBy: [RelationBetweenVisionsOrderByWithRelationInput!], skip: Int, take: Int, where: RelationBetweenVisionsWhereInput): [RelationBetweenVisions!]!
  findManySubscriptionsOnPremises(cursor: SubscriptionsOnPremisesWhereUniqueInput, distinct: [SubscriptionsOnPremisesScalarFieldEnum!], orderBy: [SubscriptionsOnPremisesOrderByWithRelationInput!], skip: Int, take: Int, where: SubscriptionsOnPremisesWhereInput): [SubscriptionsOnPremises!]!
  findManySubscriptionsOnTimelines(cursor: SubscriptionsOnTimelinesWhereUniqueInput, distinct: [SubscriptionsOnTimelinesScalarFieldEnum!], orderBy: [SubscriptionsOnTimelinesOrderByWithRelationInput!], skip: Int, take: Int, where: SubscriptionsOnTimelinesWhereInput): [SubscriptionsOnTimelines!]!
  findManyTagsOnPremises(cursor: TagsOnPremisesWhereUniqueInput, distinct: [TagsOnPremisesScalarFieldEnum!], orderBy: [TagsOnPremisesOrderByWithRelationInput!], skip: Int, take: Int, where: TagsOnPremisesWhereInput): [TagsOnPremises!]!
  findManyTagsOnTimelines(cursor: TagsOnTimelinesWhereUniqueInput, distinct: [TagsOnTimelinesScalarFieldEnum!], orderBy: [TagsOnTimelinesOrderByWithRelationInput!], skip: Int, take: Int, where: TagsOnTimelinesWhereInput): [TagsOnTimelines!]!
  findManyTagsOnVisions(cursor: TagsOnVisionsWhereUniqueInput, distinct: [TagsOnVisionsScalarFieldEnum!], orderBy: [TagsOnVisionsOrderByWithRelationInput!], skip: Int, take: Int, where: TagsOnVisionsWhereInput): [TagsOnVisions!]!
  findUniquePremisesOnTimelines(where: PremisesOnTimelinesWhereUniqueInput!): PremisesOnTimelines
  findUniqueReactionOnThreads(where: ReactionOnThreadsWhereUniqueInput!): ReactionOnThreads
  findUniqueReactionOnTimelines(where: ReactionOnTimelinesWhereUniqueInput!): ReactionOnTimelines
  findUniqueReactionOnVisions(where: ReactionOnVisionsWhereUniqueInput!): ReactionOnVisions
  findUniqueRelationBetweenVisions(where: RelationBetweenVisionsWhereUniqueInput!): RelationBetweenVisions
  findUniqueSubscriptionsOnPremises(where: SubscriptionsOnPremisesWhereUniqueInput!): SubscriptionsOnPremises
  findUniqueSubscriptionsOnTimelines(where: SubscriptionsOnTimelinesWhereUniqueInput!): SubscriptionsOnTimelines
  findUniqueTagsOnPremises(where: TagsOnPremisesWhereUniqueInput!): TagsOnPremises
  findUniqueTagsOnTimelines(where: TagsOnTimelinesWhereUniqueInput!): TagsOnTimelines
  findUniqueTagsOnVisions(where: TagsOnVisionsWhereUniqueInput!): TagsOnVisions
  groupByAccount(by: [AccountScalarFieldEnum!]!, having: AccountScalarWhereWithAggregatesInput, orderBy: [AccountOrderByWithAggregationInput!], skip: Int, take: Int, where: AccountWhereInput): [AccountGroupBy!]!
  groupByLabel(by: [LabelScalarFieldEnum!]!, having: LabelScalarWhereWithAggregatesInput, orderBy: [LabelOrderByWithAggregationInput!], skip: Int, take: Int, where: LabelWhereInput): [LabelGroupBy!]!
  groupByLabelOnMergeRequest(by: [LabelOnMergeRequestScalarFieldEnum!]!, having: LabelOnMergeRequestScalarWhereWithAggregatesInput, orderBy: [LabelOnMergeRequestOrderByWithAggregationInput!], skip: Int, take: Int, where: LabelOnMergeRequestWhereInput): [LabelOnMergeRequestGroupBy!]!
  groupByLabelOnVision(by: [LabelOnVisionScalarFieldEnum!]!, having: LabelOnVisionScalarWhereWithAggregatesInput, orderBy: [LabelOnVisionOrderByWithAggregationInput!], skip: Int, take: Int, where: LabelOnVisionWhereInput): [LabelOnVisionGroupBy!]!
  groupByMergeRequest(by: [MergeRequestScalarFieldEnum!]!, having: MergeRequestScalarWhereWithAggregatesInput, orderBy: [MergeRequestOrderByWithAggregationInput!], skip: Int, take: Int, where: MergeRequestWhereInput): [MergeRequestGroupBy!]!
  groupByPremise(by: [PremiseScalarFieldEnum!]!, having: PremiseScalarWhereWithAggregatesInput, orderBy: [PremiseOrderByWithAggregationInput!], skip: Int, take: Int, where: PremiseWhereInput): [PremiseGroupBy!]!
  groupByPremisesOnTimelines(by: [PremisesOnTimelinesScalarFieldEnum!]!, having: PremisesOnTimelinesScalarWhereWithAggregatesInput, orderBy: [PremisesOnTimelinesOrderByWithAggregationInput!], skip: Int, take: Int, where: PremisesOnTimelinesWhereInput): [PremisesOnTimelinesGroupBy!]!
  groupByReactionOnThreads(by: [ReactionOnThreadsScalarFieldEnum!]!, having: ReactionOnThreadsScalarWhereWithAggregatesInput, orderBy: [ReactionOnThreadsOrderByWithAggregationInput!], skip: Int, take: Int, where: ReactionOnThreadsWhereInput): [ReactionOnThreadsGroupBy!]!
  groupByReactionOnTimelines(by: [ReactionOnTimelinesScalarFieldEnum!]!, having: ReactionOnTimelinesScalarWhereWithAggregatesInput, orderBy: [ReactionOnTimelinesOrderByWithAggregationInput!], skip: Int, take: Int, where: ReactionOnTimelinesWhereInput): [ReactionOnTimelinesGroupBy!]!
  groupByReactionOnVisions(by: [ReactionOnVisionsScalarFieldEnum!]!, having: ReactionOnVisionsScalarWhereWithAggregatesInput, orderBy: [ReactionOnVisionsOrderByWithAggregationInput!], skip: Int, take: Int, where: ReactionOnVisionsWhereInput): [ReactionOnVisionsGroupBy!]!
  groupByReference(by: [ReferenceScalarFieldEnum!]!, having: ReferenceScalarWhereWithAggregatesInput, orderBy: [ReferenceOrderByWithAggregationInput!], skip: Int, take: Int, where: ReferenceWhereInput): [ReferenceGroupBy!]!
  groupByRelationBetweenVisions(by: [RelationBetweenVisionsScalarFieldEnum!]!, having: RelationBetweenVisionsScalarWhereWithAggregatesInput, orderBy: [RelationBetweenVisionsOrderByWithAggregationInput!], skip: Int, take: Int, where: RelationBetweenVisionsWhereInput): [RelationBetweenVisionsGroupBy!]!
  groupByRelationBetweenVisionsStatus(by: [RelationBetweenVisionsStatusScalarFieldEnum!]!, having: RelationBetweenVisionsStatusScalarWhereWithAggregatesInput, orderBy: [RelationBetweenVisionsStatusOrderByWithAggregationInput!], skip: Int, take: Int, where: RelationBetweenVisionsStatusWhereInput): [RelationBetweenVisionsStatusGroupBy!]!
  groupByReputationRecord(by: [ReputationRecordScalarFieldEnum!]!, having: ReputationRecordScalarWhereWithAggregatesInput, orderBy: [ReputationRecordOrderByWithAggregationInput!], skip: Int, take: Int, where: ReputationRecordWhereInput): [ReputationRecordGroupBy!]!
  groupBySession(by: [SessionScalarFieldEnum!]!, having: SessionScalarWhereWithAggregatesInput, orderBy: [SessionOrderByWithAggregationInput!], skip: Int, take: Int, where: SessionWhereInput): [SessionGroupBy!]!
  groupBySnapshot(by: [SnapshotScalarFieldEnum!]!, having: SnapshotScalarWhereWithAggregatesInput, orderBy: [SnapshotOrderByWithAggregationInput!], skip: Int, take: Int, where: SnapshotWhereInput): [SnapshotGroupBy!]!
  groupBySubscriptionsOnPremises(by: [SubscriptionsOnPremisesScalarFieldEnum!]!, having: SubscriptionsOnPremisesScalarWhereWithAggregatesInput, orderBy: [SubscriptionsOnPremisesOrderByWithAggregationInput!], skip: Int, take: Int, where: SubscriptionsOnPremisesWhereInput): [SubscriptionsOnPremisesGroupBy!]!
  groupBySubscriptionsOnTimelines(by: [SubscriptionsOnTimelinesScalarFieldEnum!]!, having: SubscriptionsOnTimelinesScalarWhereWithAggregatesInput, orderBy: [SubscriptionsOnTimelinesOrderByWithAggregationInput!], skip: Int, take: Int, where: SubscriptionsOnTimelinesWhereInput): [SubscriptionsOnTimelinesGroupBy!]!
  groupByTag(by: [TagScalarFieldEnum!]!, having: TagScalarWhereWithAggregatesInput, orderBy: [TagOrderByWithAggregationInput!], skip: Int, take: Int, where: TagWhereInput): [TagGroupBy!]!
  groupByTagsOnPremises(by: [TagsOnPremisesScalarFieldEnum!]!, having: TagsOnPremisesScalarWhereWithAggregatesInput, orderBy: [TagsOnPremisesOrderByWithAggregationInput!], skip: Int, take: Int, where: TagsOnPremisesWhereInput): [TagsOnPremisesGroupBy!]!
  groupByTagsOnTimelines(by: [TagsOnTimelinesScalarFieldEnum!]!, having: TagsOnTimelinesScalarWhereWithAggregatesInput, orderBy: [TagsOnTimelinesOrderByWithAggregationInput!], skip: Int, take: Int, where: TagsOnTimelinesWhereInput): [TagsOnTimelinesGroupBy!]!
  groupByTagsOnVisions(by: [TagsOnVisionsScalarFieldEnum!]!, having: TagsOnVisionsScalarWhereWithAggregatesInput, orderBy: [TagsOnVisionsOrderByWithAggregationInput!], skip: Int, take: Int, where: TagsOnVisionsWhereInput): [TagsOnVisionsGroupBy!]!
  groupByThread(by: [ThreadScalarFieldEnum!]!, having: ThreadScalarWhereWithAggregatesInput, orderBy: [ThreadOrderByWithAggregationInput!], skip: Int, take: Int, where: ThreadWhereInput): [ThreadGroupBy!]!
  groupByThreadsOnMergeRequest(by: [ThreadsOnMergeRequestScalarFieldEnum!]!, having: ThreadsOnMergeRequestScalarWhereWithAggregatesInput, orderBy: [ThreadsOnMergeRequestOrderByWithAggregationInput!], skip: Int, take: Int, where: ThreadsOnMergeRequestWhereInput): [ThreadsOnMergeRequestGroupBy!]!
  groupByThreadsOnPremise(by: [ThreadsOnPremiseScalarFieldEnum!]!, having: ThreadsOnPremiseScalarWhereWithAggregatesInput, orderBy: [ThreadsOnPremiseOrderByWithAggregationInput!], skip: Int, take: Int, where: ThreadsOnPremiseWhereInput): [ThreadsOnPremiseGroupBy!]!
  groupByThreadsOnTimeline(by: [ThreadsOnTimelineScalarFieldEnum!]!, having: ThreadsOnTimelineScalarWhereWithAggregatesInput, orderBy: [ThreadsOnTimelineOrderByWithAggregationInput!], skip: Int, take: Int, where: ThreadsOnTimelineWhereInput): [ThreadsOnTimelineGroupBy!]!
  groupByThreadsOnVision(by: [ThreadsOnVisionScalarFieldEnum!]!, having: ThreadsOnVisionScalarWhereWithAggregatesInput, orderBy: [ThreadsOnVisionOrderByWithAggregationInput!], skip: Int, take: Int, where: ThreadsOnVisionWhereInput): [ThreadsOnVisionGroupBy!]!
  groupByTimeline(by: [TimelineScalarFieldEnum!]!, having: TimelineScalarWhereWithAggregatesInput, orderBy: [TimelineOrderByWithAggregationInput!], skip: Int, take: Int, where: TimelineWhereInput): [TimelineGroupBy!]!
  groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByWithAggregationInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
  groupByVerificationToken(by: [VerificationTokenScalarFieldEnum!]!, having: VerificationTokenScalarWhereWithAggregatesInput, orderBy: [VerificationTokenOrderByWithAggregationInput!], skip: Int, take: Int, where: VerificationTokenWhereInput): [VerificationTokenGroupBy!]!
  groupByVision(by: [VisionScalarFieldEnum!]!, having: VisionScalarWhereWithAggregatesInput, orderBy: [VisionOrderByWithAggregationInput!], skip: Int, take: Int, where: VisionWhereInput): [VisionGroupBy!]!
  groupByVisionViewsHistory(by: [VisionViewsHistoryScalarFieldEnum!]!, having: VisionViewsHistoryScalarWhereWithAggregatesInput, orderBy: [VisionViewsHistoryOrderByWithAggregationInput!], skip: Int, take: Int, where: VisionViewsHistoryWhereInput): [VisionViewsHistoryGroupBy!]!
  groupByVotesOnPremise(by: [VotesOnPremiseScalarFieldEnum!]!, having: VotesOnPremiseScalarWhereWithAggregatesInput, orderBy: [VotesOnPremiseOrderByWithAggregationInput!], skip: Int, take: Int, where: VotesOnPremiseWhereInput): [VotesOnPremiseGroupBy!]!
  groupByVotesOnThread(by: [VotesOnThreadScalarFieldEnum!]!, having: VotesOnThreadScalarWhereWithAggregatesInput, orderBy: [VotesOnThreadOrderByWithAggregationInput!], skip: Int, take: Int, where: VotesOnThreadWhereInput): [VotesOnThreadGroupBy!]!
  groupByVotesOnTimeline(by: [VotesOnTimelineScalarFieldEnum!]!, having: VotesOnTimelineScalarWhereWithAggregatesInput, orderBy: [VotesOnTimelineOrderByWithAggregationInput!], skip: Int, take: Int, where: VotesOnTimelineWhereInput): [VotesOnTimelineGroupBy!]!
  groupByVotesOnVision(by: [VotesOnVisionScalarFieldEnum!]!, having: VotesOnVisionScalarWhereWithAggregatesInput, orderBy: [VotesOnVisionOrderByWithAggregationInput!], skip: Int, take: Int, where: VotesOnVisionWhereInput): [VotesOnVisionGroupBy!]!
  label(where: LabelWhereUniqueInput!): Label
  labelOnMergeRequest(where: LabelOnMergeRequestWhereUniqueInput!): LabelOnMergeRequest
  labelOnMergeRequests(cursor: LabelOnMergeRequestWhereUniqueInput, distinct: [LabelOnMergeRequestScalarFieldEnum!], orderBy: [LabelOnMergeRequestOrderByWithRelationInput!], skip: Int, take: Int, where: LabelOnMergeRequestWhereInput): [LabelOnMergeRequest!]!
  labelOnVision(where: LabelOnVisionWhereUniqueInput!): LabelOnVision
  labelOnVisions(cursor: LabelOnVisionWhereUniqueInput, distinct: [LabelOnVisionScalarFieldEnum!], orderBy: [LabelOnVisionOrderByWithRelationInput!], skip: Int, take: Int, where: LabelOnVisionWhereInput): [LabelOnVision!]!
  labels(cursor: LabelWhereUniqueInput, distinct: [LabelScalarFieldEnum!], orderBy: [LabelOrderByWithRelationInput!], skip: Int, take: Int, where: LabelWhereInput): [Label!]!
  mergeRequest(where: MergeRequestWhereUniqueInput!): MergeRequest
  mergeRequests(cursor: MergeRequestWhereUniqueInput, distinct: [MergeRequestScalarFieldEnum!], orderBy: [MergeRequestOrderByWithRelationInput!], skip: Int, take: Int, where: MergeRequestWhereInput): [MergeRequest!]!
  premise(where: PremiseWhereUniqueInput!): Premise
  premises(cursor: PremiseWhereUniqueInput, distinct: [PremiseScalarFieldEnum!], orderBy: [PremiseOrderByWithRelationInput!], skip: Int, take: Int, where: PremiseWhereInput): [Premise!]!
  reference(where: ReferenceWhereUniqueInput!): Reference
  references(cursor: ReferenceWhereUniqueInput, distinct: [ReferenceScalarFieldEnum!], orderBy: [ReferenceOrderByWithRelationInput!], skip: Int, take: Int, where: ReferenceWhereInput): [Reference!]!
  relationBetweenVisionsStatus(where: RelationBetweenVisionsStatusWhereUniqueInput!): RelationBetweenVisionsStatus
  relationBetweenVisionsStatuses(cursor: RelationBetweenVisionsStatusWhereUniqueInput, distinct: [RelationBetweenVisionsStatusScalarFieldEnum!], orderBy: [RelationBetweenVisionsStatusOrderByWithRelationInput!], skip: Int, take: Int, where: RelationBetweenVisionsStatusWhereInput): [RelationBetweenVisionsStatus!]!
  reputationRecord(where: ReputationRecordWhereUniqueInput!): ReputationRecord
  reputationRecords(cursor: ReputationRecordWhereUniqueInput, distinct: [ReputationRecordScalarFieldEnum!], orderBy: [ReputationRecordOrderByWithRelationInput!], skip: Int, take: Int, where: ReputationRecordWhereInput): [ReputationRecord!]!
  session(where: SessionWhereUniqueInput!): Session
  sessions(cursor: SessionWhereUniqueInput, distinct: [SessionScalarFieldEnum!], orderBy: [SessionOrderByWithRelationInput!], skip: Int, take: Int, where: SessionWhereInput): [Session!]!
  snapshot(where: SnapshotWhereUniqueInput!): Snapshot
  snapshots(cursor: SnapshotWhereUniqueInput, distinct: [SnapshotScalarFieldEnum!], orderBy: [SnapshotOrderByWithRelationInput!], skip: Int, take: Int, where: SnapshotWhereInput): [Snapshot!]!
  tag(where: TagWhereUniqueInput!): Tag
  tags(cursor: TagWhereUniqueInput, distinct: [TagScalarFieldEnum!], orderBy: [TagOrderByWithRelationInput!], skip: Int, take: Int, where: TagWhereInput): [Tag!]!
  thread(where: ThreadWhereUniqueInput!): Thread
  threads(cursor: ThreadWhereUniqueInput, distinct: [ThreadScalarFieldEnum!], orderBy: [ThreadOrderByWithRelationInput!], skip: Int, take: Int, where: ThreadWhereInput): [Thread!]!
  threadsOnMergeRequest(where: ThreadsOnMergeRequestWhereUniqueInput!): ThreadsOnMergeRequest
  threadsOnMergeRequests(cursor: ThreadsOnMergeRequestWhereUniqueInput, distinct: [ThreadsOnMergeRequestScalarFieldEnum!], orderBy: [ThreadsOnMergeRequestOrderByWithRelationInput!], skip: Int, take: Int, where: ThreadsOnMergeRequestWhereInput): [ThreadsOnMergeRequest!]!
  threadsOnPremise(where: ThreadsOnPremiseWhereUniqueInput!): ThreadsOnPremise
  threadsOnPremises(cursor: ThreadsOnPremiseWhereUniqueInput, distinct: [ThreadsOnPremiseScalarFieldEnum!], orderBy: [ThreadsOnPremiseOrderByWithRelationInput!], skip: Int, take: Int, where: ThreadsOnPremiseWhereInput): [ThreadsOnPremise!]!
  threadsOnTimeline(where: ThreadsOnTimelineWhereUniqueInput!): ThreadsOnTimeline
  threadsOnTimelines(cursor: ThreadsOnTimelineWhereUniqueInput, distinct: [ThreadsOnTimelineScalarFieldEnum!], orderBy: [ThreadsOnTimelineOrderByWithRelationInput!], skip: Int, take: Int, where: ThreadsOnTimelineWhereInput): [ThreadsOnTimeline!]!
  threadsOnVision(where: ThreadsOnVisionWhereUniqueInput!): ThreadsOnVision
  threadsOnVisions(cursor: ThreadsOnVisionWhereUniqueInput, distinct: [ThreadsOnVisionScalarFieldEnum!], orderBy: [ThreadsOnVisionOrderByWithRelationInput!], skip: Int, take: Int, where: ThreadsOnVisionWhereInput): [ThreadsOnVision!]!
  timeline(where: TimelineWhereUniqueInput!): Timeline
  timelines(cursor: TimelineWhereUniqueInput, distinct: [TimelineScalarFieldEnum!], orderBy: [TimelineOrderByWithRelationInput!], skip: Int, take: Int, where: TimelineWhereInput): [Timeline!]!
  user(where: UserWhereUniqueInput!): User
  users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
  verificationToken(where: VerificationTokenWhereUniqueInput!): VerificationToken
  verificationTokens(cursor: VerificationTokenWhereUniqueInput, distinct: [VerificationTokenScalarFieldEnum!], orderBy: [VerificationTokenOrderByWithRelationInput!], skip: Int, take: Int, where: VerificationTokenWhereInput): [VerificationToken!]!
  vision(where: VisionWhereUniqueInput!): Vision
  visionViewsHistories(cursor: VisionViewsHistoryWhereUniqueInput, distinct: [VisionViewsHistoryScalarFieldEnum!], orderBy: [VisionViewsHistoryOrderByWithRelationInput!], skip: Int, take: Int, where: VisionViewsHistoryWhereInput): [VisionViewsHistory!]!
  visionViewsHistory(where: VisionViewsHistoryWhereUniqueInput!): VisionViewsHistory
  visions(cursor: VisionWhereUniqueInput, distinct: [VisionScalarFieldEnum!], orderBy: [VisionOrderByWithRelationInput!], skip: Int, take: Int, where: VisionWhereInput): [Vision!]!
  votesOnPremise(where: VotesOnPremiseWhereUniqueInput!): VotesOnPremise
  votesOnPremises(cursor: VotesOnPremiseWhereUniqueInput, distinct: [VotesOnPremiseScalarFieldEnum!], orderBy: [VotesOnPremiseOrderByWithRelationInput!], skip: Int, take: Int, where: VotesOnPremiseWhereInput): [VotesOnPremise!]!
  votesOnThread(where: VotesOnThreadWhereUniqueInput!): VotesOnThread
  votesOnThreads(cursor: VotesOnThreadWhereUniqueInput, distinct: [VotesOnThreadScalarFieldEnum!], orderBy: [VotesOnThreadOrderByWithRelationInput!], skip: Int, take: Int, where: VotesOnThreadWhereInput): [VotesOnThread!]!
  votesOnTimeline(where: VotesOnTimelineWhereUniqueInput!): VotesOnTimeline
  votesOnTimelines(cursor: VotesOnTimelineWhereUniqueInput, distinct: [VotesOnTimelineScalarFieldEnum!], orderBy: [VotesOnTimelineOrderByWithRelationInput!], skip: Int, take: Int, where: VotesOnTimelineWhereInput): [VotesOnTimeline!]!
  votesOnVision(where: VotesOnVisionWhereUniqueInput!): VotesOnVision
  votesOnVisions(cursor: VotesOnVisionWhereUniqueInput, distinct: [VotesOnVisionScalarFieldEnum!], orderBy: [VotesOnVisionOrderByWithRelationInput!], skip: Int, take: Int, where: VotesOnVisionWhereInput): [VotesOnVision!]!
}

enum QueryMode {
  default
  insensitive
}

enum Reaction {
  DOWNVOTE
  LIKE
  UPVOTE
}

type ReactionOnThreads {
  createdAt: DateTime!
  reaction: Reaction!
  thread: Thread!
  threadId: String!
  user: User!
  userId: String!
}

type ReactionOnThreadsCountAggregate {
  _all: Int!
  createdAt: Int!
  reaction: Int!
  threadId: Int!
  userId: Int!
}

input ReactionOnThreadsCountOrderByAggregateInput {
  createdAt: SortOrder
  reaction: SortOrder
  threadId: SortOrder
  userId: SortOrder
}

input ReactionOnThreadsCreateInput {
  createdAt: DateTime
  reaction: Reaction!
  thread: ThreadCreateNestedOneWithoutReactionOnThreadsInput!
  user: UserCreateNestedOneWithoutReactionOnThreadsInput!
}

input ReactionOnThreadsCreateManyInput {
  createdAt: DateTime
  reaction: Reaction!
  threadId: String!
  userId: String!
}

input ReactionOnThreadsCreateManyThreadInput {
  createdAt: DateTime
  reaction: Reaction!
  userId: String!
}

input ReactionOnThreadsCreateManyThreadInputEnvelope {
  data: [ReactionOnThreadsCreateManyThreadInput!]!
  skipDuplicates: Boolean
}

input ReactionOnThreadsCreateManyUserInput {
  createdAt: DateTime
  reaction: Reaction!
  threadId: String!
}

input ReactionOnThreadsCreateManyUserInputEnvelope {
  data: [ReactionOnThreadsCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input ReactionOnThreadsCreateNestedManyWithoutThreadInput {
  connect: [ReactionOnThreadsWhereUniqueInput!]
  connectOrCreate: [ReactionOnThreadsCreateOrConnectWithoutThreadInput!]
  create: [ReactionOnThreadsCreateWithoutThreadInput!]
  createMany: ReactionOnThreadsCreateManyThreadInputEnvelope
}

input ReactionOnThreadsCreateNestedManyWithoutUserInput {
  connect: [ReactionOnThreadsWhereUniqueInput!]
  connectOrCreate: [ReactionOnThreadsCreateOrConnectWithoutUserInput!]
  create: [ReactionOnThreadsCreateWithoutUserInput!]
  createMany: ReactionOnThreadsCreateManyUserInputEnvelope
}

input ReactionOnThreadsCreateOrConnectWithoutThreadInput {
  create: ReactionOnThreadsCreateWithoutThreadInput!
  where: ReactionOnThreadsWhereUniqueInput!
}

input ReactionOnThreadsCreateOrConnectWithoutUserInput {
  create: ReactionOnThreadsCreateWithoutUserInput!
  where: ReactionOnThreadsWhereUniqueInput!
}

input ReactionOnThreadsCreateWithoutThreadInput {
  createdAt: DateTime
  reaction: Reaction!
  user: UserCreateNestedOneWithoutReactionOnThreadsInput!
}

input ReactionOnThreadsCreateWithoutUserInput {
  createdAt: DateTime
  reaction: Reaction!
  thread: ThreadCreateNestedOneWithoutReactionOnThreadsInput!
}

type ReactionOnThreadsGroupBy {
  _count: ReactionOnThreadsCountAggregate
  _max: ReactionOnThreadsMaxAggregate
  _min: ReactionOnThreadsMinAggregate
  createdAt: DateTime!
  reaction: Reaction!
  threadId: String!
  userId: String!
}

input ReactionOnThreadsListRelationFilter {
  every: ReactionOnThreadsWhereInput
  none: ReactionOnThreadsWhereInput
  some: ReactionOnThreadsWhereInput
}

type ReactionOnThreadsMaxAggregate {
  createdAt: DateTime
  reaction: Reaction
  threadId: String
  userId: String
}

input ReactionOnThreadsMaxOrderByAggregateInput {
  createdAt: SortOrder
  reaction: SortOrder
  threadId: SortOrder
  userId: SortOrder
}

type ReactionOnThreadsMinAggregate {
  createdAt: DateTime
  reaction: Reaction
  threadId: String
  userId: String
}

input ReactionOnThreadsMinOrderByAggregateInput {
  createdAt: SortOrder
  reaction: SortOrder
  threadId: SortOrder
  userId: SortOrder
}

input ReactionOnThreadsOrderByRelationAggregateInput {
  _count: SortOrder
}

input ReactionOnThreadsOrderByWithAggregationInput {
  _count: ReactionOnThreadsCountOrderByAggregateInput
  _max: ReactionOnThreadsMaxOrderByAggregateInput
  _min: ReactionOnThreadsMinOrderByAggregateInput
  createdAt: SortOrder
  reaction: SortOrder
  threadId: SortOrder
  userId: SortOrder
}

input ReactionOnThreadsOrderByWithRelationInput {
  createdAt: SortOrder
  reaction: SortOrder
  thread: ThreadOrderByWithRelationInput
  threadId: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum ReactionOnThreadsScalarFieldEnum {
  createdAt
  reaction
  threadId
  userId
}

input ReactionOnThreadsScalarWhereInput {
  AND: [ReactionOnThreadsScalarWhereInput!]
  NOT: [ReactionOnThreadsScalarWhereInput!]
  OR: [ReactionOnThreadsScalarWhereInput!]
  createdAt: DateTimeFilter
  reaction: EnumReactionFilter
  threadId: StringFilter
  userId: StringFilter
}

input ReactionOnThreadsScalarWhereWithAggregatesInput {
  AND: [ReactionOnThreadsScalarWhereWithAggregatesInput!]
  NOT: [ReactionOnThreadsScalarWhereWithAggregatesInput!]
  OR: [ReactionOnThreadsScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  reaction: EnumReactionWithAggregatesFilter
  threadId: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input ReactionOnThreadsUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  reaction: EnumReactionFieldUpdateOperationsInput
  thread: ThreadUpdateOneRequiredWithoutReactionOnThreadsInput
  user: UserUpdateOneRequiredWithoutReactionOnThreadsInput
}

input ReactionOnThreadsUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  reaction: EnumReactionFieldUpdateOperationsInput
}

input ReactionOnThreadsUpdateManyWithWhereWithoutThreadInput {
  data: ReactionOnThreadsUpdateManyMutationInput!
  where: ReactionOnThreadsScalarWhereInput!
}

input ReactionOnThreadsUpdateManyWithWhereWithoutUserInput {
  data: ReactionOnThreadsUpdateManyMutationInput!
  where: ReactionOnThreadsScalarWhereInput!
}

input ReactionOnThreadsUpdateManyWithoutThreadInput {
  connect: [ReactionOnThreadsWhereUniqueInput!]
  connectOrCreate: [ReactionOnThreadsCreateOrConnectWithoutThreadInput!]
  create: [ReactionOnThreadsCreateWithoutThreadInput!]
  createMany: ReactionOnThreadsCreateManyThreadInputEnvelope
  delete: [ReactionOnThreadsWhereUniqueInput!]
  deleteMany: [ReactionOnThreadsScalarWhereInput!]
  disconnect: [ReactionOnThreadsWhereUniqueInput!]
  set: [ReactionOnThreadsWhereUniqueInput!]
  update: [ReactionOnThreadsUpdateWithWhereUniqueWithoutThreadInput!]
  updateMany: [ReactionOnThreadsUpdateManyWithWhereWithoutThreadInput!]
  upsert: [ReactionOnThreadsUpsertWithWhereUniqueWithoutThreadInput!]
}

input ReactionOnThreadsUpdateManyWithoutUserInput {
  connect: [ReactionOnThreadsWhereUniqueInput!]
  connectOrCreate: [ReactionOnThreadsCreateOrConnectWithoutUserInput!]
  create: [ReactionOnThreadsCreateWithoutUserInput!]
  createMany: ReactionOnThreadsCreateManyUserInputEnvelope
  delete: [ReactionOnThreadsWhereUniqueInput!]
  deleteMany: [ReactionOnThreadsScalarWhereInput!]
  disconnect: [ReactionOnThreadsWhereUniqueInput!]
  set: [ReactionOnThreadsWhereUniqueInput!]
  update: [ReactionOnThreadsUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ReactionOnThreadsUpdateManyWithWhereWithoutUserInput!]
  upsert: [ReactionOnThreadsUpsertWithWhereUniqueWithoutUserInput!]
}

input ReactionOnThreadsUpdateWithWhereUniqueWithoutThreadInput {
  data: ReactionOnThreadsUpdateWithoutThreadInput!
  where: ReactionOnThreadsWhereUniqueInput!
}

input ReactionOnThreadsUpdateWithWhereUniqueWithoutUserInput {
  data: ReactionOnThreadsUpdateWithoutUserInput!
  where: ReactionOnThreadsWhereUniqueInput!
}

input ReactionOnThreadsUpdateWithoutThreadInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  reaction: EnumReactionFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutReactionOnThreadsInput
}

input ReactionOnThreadsUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  reaction: EnumReactionFieldUpdateOperationsInput
  thread: ThreadUpdateOneRequiredWithoutReactionOnThreadsInput
}

input ReactionOnThreadsUpsertWithWhereUniqueWithoutThreadInput {
  create: ReactionOnThreadsCreateWithoutThreadInput!
  update: ReactionOnThreadsUpdateWithoutThreadInput!
  where: ReactionOnThreadsWhereUniqueInput!
}

input ReactionOnThreadsUpsertWithWhereUniqueWithoutUserInput {
  create: ReactionOnThreadsCreateWithoutUserInput!
  update: ReactionOnThreadsUpdateWithoutUserInput!
  where: ReactionOnThreadsWhereUniqueInput!
}

input ReactionOnThreadsUserIdThreadIdCompoundUniqueInput {
  threadId: String!
  userId: String!
}

input ReactionOnThreadsWhereInput {
  AND: [ReactionOnThreadsWhereInput!]
  NOT: [ReactionOnThreadsWhereInput!]
  OR: [ReactionOnThreadsWhereInput!]
  createdAt: DateTimeFilter
  reaction: EnumReactionFilter
  thread: ThreadRelationFilter
  threadId: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

input ReactionOnThreadsWhereUniqueInput {
  userId_threadId: ReactionOnThreadsUserIdThreadIdCompoundUniqueInput
}

type ReactionOnTimelines {
  createdAt: DateTime!
  reaction: Reaction!
  timeline: Timeline!
  timelineId: String!
  user: User!
  userId: String!
}

type ReactionOnTimelinesCountAggregate {
  _all: Int!
  createdAt: Int!
  reaction: Int!
  timelineId: Int!
  userId: Int!
}

input ReactionOnTimelinesCountOrderByAggregateInput {
  createdAt: SortOrder
  reaction: SortOrder
  timelineId: SortOrder
  userId: SortOrder
}

input ReactionOnTimelinesCreateInput {
  createdAt: DateTime
  reaction: Reaction!
  timeline: TimelineCreateNestedOneWithoutReactionOnTimelinesInput!
  user: UserCreateNestedOneWithoutReactionOnTimelinesInput!
}

input ReactionOnTimelinesCreateManyInput {
  createdAt: DateTime
  reaction: Reaction!
  timelineId: String!
  userId: String!
}

input ReactionOnTimelinesCreateManyTimelineInput {
  createdAt: DateTime
  reaction: Reaction!
  userId: String!
}

input ReactionOnTimelinesCreateManyTimelineInputEnvelope {
  data: [ReactionOnTimelinesCreateManyTimelineInput!]!
  skipDuplicates: Boolean
}

input ReactionOnTimelinesCreateManyUserInput {
  createdAt: DateTime
  reaction: Reaction!
  timelineId: String!
}

input ReactionOnTimelinesCreateManyUserInputEnvelope {
  data: [ReactionOnTimelinesCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input ReactionOnTimelinesCreateNestedManyWithoutTimelineInput {
  connect: [ReactionOnTimelinesWhereUniqueInput!]
  connectOrCreate: [ReactionOnTimelinesCreateOrConnectWithoutTimelineInput!]
  create: [ReactionOnTimelinesCreateWithoutTimelineInput!]
  createMany: ReactionOnTimelinesCreateManyTimelineInputEnvelope
}

input ReactionOnTimelinesCreateNestedManyWithoutUserInput {
  connect: [ReactionOnTimelinesWhereUniqueInput!]
  connectOrCreate: [ReactionOnTimelinesCreateOrConnectWithoutUserInput!]
  create: [ReactionOnTimelinesCreateWithoutUserInput!]
  createMany: ReactionOnTimelinesCreateManyUserInputEnvelope
}

input ReactionOnTimelinesCreateOrConnectWithoutTimelineInput {
  create: ReactionOnTimelinesCreateWithoutTimelineInput!
  where: ReactionOnTimelinesWhereUniqueInput!
}

input ReactionOnTimelinesCreateOrConnectWithoutUserInput {
  create: ReactionOnTimelinesCreateWithoutUserInput!
  where: ReactionOnTimelinesWhereUniqueInput!
}

input ReactionOnTimelinesCreateWithoutTimelineInput {
  createdAt: DateTime
  reaction: Reaction!
  user: UserCreateNestedOneWithoutReactionOnTimelinesInput!
}

input ReactionOnTimelinesCreateWithoutUserInput {
  createdAt: DateTime
  reaction: Reaction!
  timeline: TimelineCreateNestedOneWithoutReactionOnTimelinesInput!
}

type ReactionOnTimelinesGroupBy {
  _count: ReactionOnTimelinesCountAggregate
  _max: ReactionOnTimelinesMaxAggregate
  _min: ReactionOnTimelinesMinAggregate
  createdAt: DateTime!
  reaction: Reaction!
  timelineId: String!
  userId: String!
}

input ReactionOnTimelinesListRelationFilter {
  every: ReactionOnTimelinesWhereInput
  none: ReactionOnTimelinesWhereInput
  some: ReactionOnTimelinesWhereInput
}

type ReactionOnTimelinesMaxAggregate {
  createdAt: DateTime
  reaction: Reaction
  timelineId: String
  userId: String
}

input ReactionOnTimelinesMaxOrderByAggregateInput {
  createdAt: SortOrder
  reaction: SortOrder
  timelineId: SortOrder
  userId: SortOrder
}

type ReactionOnTimelinesMinAggregate {
  createdAt: DateTime
  reaction: Reaction
  timelineId: String
  userId: String
}

input ReactionOnTimelinesMinOrderByAggregateInput {
  createdAt: SortOrder
  reaction: SortOrder
  timelineId: SortOrder
  userId: SortOrder
}

input ReactionOnTimelinesOrderByRelationAggregateInput {
  _count: SortOrder
}

input ReactionOnTimelinesOrderByWithAggregationInput {
  _count: ReactionOnTimelinesCountOrderByAggregateInput
  _max: ReactionOnTimelinesMaxOrderByAggregateInput
  _min: ReactionOnTimelinesMinOrderByAggregateInput
  createdAt: SortOrder
  reaction: SortOrder
  timelineId: SortOrder
  userId: SortOrder
}

input ReactionOnTimelinesOrderByWithRelationInput {
  createdAt: SortOrder
  reaction: SortOrder
  timeline: TimelineOrderByWithRelationInput
  timelineId: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum ReactionOnTimelinesScalarFieldEnum {
  createdAt
  reaction
  timelineId
  userId
}

input ReactionOnTimelinesScalarWhereInput {
  AND: [ReactionOnTimelinesScalarWhereInput!]
  NOT: [ReactionOnTimelinesScalarWhereInput!]
  OR: [ReactionOnTimelinesScalarWhereInput!]
  createdAt: DateTimeFilter
  reaction: EnumReactionFilter
  timelineId: StringFilter
  userId: StringFilter
}

input ReactionOnTimelinesScalarWhereWithAggregatesInput {
  AND: [ReactionOnTimelinesScalarWhereWithAggregatesInput!]
  NOT: [ReactionOnTimelinesScalarWhereWithAggregatesInput!]
  OR: [ReactionOnTimelinesScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  reaction: EnumReactionWithAggregatesFilter
  timelineId: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input ReactionOnTimelinesUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  reaction: EnumReactionFieldUpdateOperationsInput
  timeline: TimelineUpdateOneRequiredWithoutReactionOnTimelinesInput
  user: UserUpdateOneRequiredWithoutReactionOnTimelinesInput
}

input ReactionOnTimelinesUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  reaction: EnumReactionFieldUpdateOperationsInput
}

input ReactionOnTimelinesUpdateManyWithWhereWithoutTimelineInput {
  data: ReactionOnTimelinesUpdateManyMutationInput!
  where: ReactionOnTimelinesScalarWhereInput!
}

input ReactionOnTimelinesUpdateManyWithWhereWithoutUserInput {
  data: ReactionOnTimelinesUpdateManyMutationInput!
  where: ReactionOnTimelinesScalarWhereInput!
}

input ReactionOnTimelinesUpdateManyWithoutTimelineInput {
  connect: [ReactionOnTimelinesWhereUniqueInput!]
  connectOrCreate: [ReactionOnTimelinesCreateOrConnectWithoutTimelineInput!]
  create: [ReactionOnTimelinesCreateWithoutTimelineInput!]
  createMany: ReactionOnTimelinesCreateManyTimelineInputEnvelope
  delete: [ReactionOnTimelinesWhereUniqueInput!]
  deleteMany: [ReactionOnTimelinesScalarWhereInput!]
  disconnect: [ReactionOnTimelinesWhereUniqueInput!]
  set: [ReactionOnTimelinesWhereUniqueInput!]
  update: [ReactionOnTimelinesUpdateWithWhereUniqueWithoutTimelineInput!]
  updateMany: [ReactionOnTimelinesUpdateManyWithWhereWithoutTimelineInput!]
  upsert: [ReactionOnTimelinesUpsertWithWhereUniqueWithoutTimelineInput!]
}

input ReactionOnTimelinesUpdateManyWithoutUserInput {
  connect: [ReactionOnTimelinesWhereUniqueInput!]
  connectOrCreate: [ReactionOnTimelinesCreateOrConnectWithoutUserInput!]
  create: [ReactionOnTimelinesCreateWithoutUserInput!]
  createMany: ReactionOnTimelinesCreateManyUserInputEnvelope
  delete: [ReactionOnTimelinesWhereUniqueInput!]
  deleteMany: [ReactionOnTimelinesScalarWhereInput!]
  disconnect: [ReactionOnTimelinesWhereUniqueInput!]
  set: [ReactionOnTimelinesWhereUniqueInput!]
  update: [ReactionOnTimelinesUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ReactionOnTimelinesUpdateManyWithWhereWithoutUserInput!]
  upsert: [ReactionOnTimelinesUpsertWithWhereUniqueWithoutUserInput!]
}

input ReactionOnTimelinesUpdateWithWhereUniqueWithoutTimelineInput {
  data: ReactionOnTimelinesUpdateWithoutTimelineInput!
  where: ReactionOnTimelinesWhereUniqueInput!
}

input ReactionOnTimelinesUpdateWithWhereUniqueWithoutUserInput {
  data: ReactionOnTimelinesUpdateWithoutUserInput!
  where: ReactionOnTimelinesWhereUniqueInput!
}

input ReactionOnTimelinesUpdateWithoutTimelineInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  reaction: EnumReactionFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutReactionOnTimelinesInput
}

input ReactionOnTimelinesUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  reaction: EnumReactionFieldUpdateOperationsInput
  timeline: TimelineUpdateOneRequiredWithoutReactionOnTimelinesInput
}

input ReactionOnTimelinesUpsertWithWhereUniqueWithoutTimelineInput {
  create: ReactionOnTimelinesCreateWithoutTimelineInput!
  update: ReactionOnTimelinesUpdateWithoutTimelineInput!
  where: ReactionOnTimelinesWhereUniqueInput!
}

input ReactionOnTimelinesUpsertWithWhereUniqueWithoutUserInput {
  create: ReactionOnTimelinesCreateWithoutUserInput!
  update: ReactionOnTimelinesUpdateWithoutUserInput!
  where: ReactionOnTimelinesWhereUniqueInput!
}

input ReactionOnTimelinesUserIdTimelineIdCompoundUniqueInput {
  timelineId: String!
  userId: String!
}

input ReactionOnTimelinesWhereInput {
  AND: [ReactionOnTimelinesWhereInput!]
  NOT: [ReactionOnTimelinesWhereInput!]
  OR: [ReactionOnTimelinesWhereInput!]
  createdAt: DateTimeFilter
  reaction: EnumReactionFilter
  timeline: TimelineRelationFilter
  timelineId: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

input ReactionOnTimelinesWhereUniqueInput {
  userId_timelineId: ReactionOnTimelinesUserIdTimelineIdCompoundUniqueInput
}

type ReactionOnVisions {
  createdAt: DateTime!
  reaction: Reaction!
  user: User!
  userId: String!
  vision: Vision!
  visionId: String!
}

type ReactionOnVisionsCountAggregate {
  _all: Int!
  createdAt: Int!
  reaction: Int!
  userId: Int!
  visionId: Int!
}

input ReactionOnVisionsCountOrderByAggregateInput {
  createdAt: SortOrder
  reaction: SortOrder
  userId: SortOrder
  visionId: SortOrder
}

input ReactionOnVisionsCreateInput {
  createdAt: DateTime
  reaction: Reaction!
  user: UserCreateNestedOneWithoutReactionOnVisionsInput!
  vision: VisionCreateNestedOneWithoutReactionOnVisionsInput!
}

input ReactionOnVisionsCreateManyInput {
  createdAt: DateTime
  reaction: Reaction!
  userId: String!
  visionId: String!
}

input ReactionOnVisionsCreateManyUserInput {
  createdAt: DateTime
  reaction: Reaction!
  visionId: String!
}

input ReactionOnVisionsCreateManyUserInputEnvelope {
  data: [ReactionOnVisionsCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input ReactionOnVisionsCreateManyVisionInput {
  createdAt: DateTime
  reaction: Reaction!
  userId: String!
}

input ReactionOnVisionsCreateManyVisionInputEnvelope {
  data: [ReactionOnVisionsCreateManyVisionInput!]!
  skipDuplicates: Boolean
}

input ReactionOnVisionsCreateNestedManyWithoutUserInput {
  connect: [ReactionOnVisionsWhereUniqueInput!]
  connectOrCreate: [ReactionOnVisionsCreateOrConnectWithoutUserInput!]
  create: [ReactionOnVisionsCreateWithoutUserInput!]
  createMany: ReactionOnVisionsCreateManyUserInputEnvelope
}

input ReactionOnVisionsCreateNestedManyWithoutVisionInput {
  connect: [ReactionOnVisionsWhereUniqueInput!]
  connectOrCreate: [ReactionOnVisionsCreateOrConnectWithoutVisionInput!]
  create: [ReactionOnVisionsCreateWithoutVisionInput!]
  createMany: ReactionOnVisionsCreateManyVisionInputEnvelope
}

input ReactionOnVisionsCreateOrConnectWithoutUserInput {
  create: ReactionOnVisionsCreateWithoutUserInput!
  where: ReactionOnVisionsWhereUniqueInput!
}

input ReactionOnVisionsCreateOrConnectWithoutVisionInput {
  create: ReactionOnVisionsCreateWithoutVisionInput!
  where: ReactionOnVisionsWhereUniqueInput!
}

input ReactionOnVisionsCreateWithoutUserInput {
  createdAt: DateTime
  reaction: Reaction!
  vision: VisionCreateNestedOneWithoutReactionOnVisionsInput!
}

input ReactionOnVisionsCreateWithoutVisionInput {
  createdAt: DateTime
  reaction: Reaction!
  user: UserCreateNestedOneWithoutReactionOnVisionsInput!
}

type ReactionOnVisionsGroupBy {
  _count: ReactionOnVisionsCountAggregate
  _max: ReactionOnVisionsMaxAggregate
  _min: ReactionOnVisionsMinAggregate
  createdAt: DateTime!
  reaction: Reaction!
  userId: String!
  visionId: String!
}

input ReactionOnVisionsListRelationFilter {
  every: ReactionOnVisionsWhereInput
  none: ReactionOnVisionsWhereInput
  some: ReactionOnVisionsWhereInput
}

type ReactionOnVisionsMaxAggregate {
  createdAt: DateTime
  reaction: Reaction
  userId: String
  visionId: String
}

input ReactionOnVisionsMaxOrderByAggregateInput {
  createdAt: SortOrder
  reaction: SortOrder
  userId: SortOrder
  visionId: SortOrder
}

type ReactionOnVisionsMinAggregate {
  createdAt: DateTime
  reaction: Reaction
  userId: String
  visionId: String
}

input ReactionOnVisionsMinOrderByAggregateInput {
  createdAt: SortOrder
  reaction: SortOrder
  userId: SortOrder
  visionId: SortOrder
}

input ReactionOnVisionsOrderByRelationAggregateInput {
  _count: SortOrder
}

input ReactionOnVisionsOrderByWithAggregationInput {
  _count: ReactionOnVisionsCountOrderByAggregateInput
  _max: ReactionOnVisionsMaxOrderByAggregateInput
  _min: ReactionOnVisionsMinOrderByAggregateInput
  createdAt: SortOrder
  reaction: SortOrder
  userId: SortOrder
  visionId: SortOrder
}

input ReactionOnVisionsOrderByWithRelationInput {
  createdAt: SortOrder
  reaction: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
  vision: VisionOrderByWithRelationInput
  visionId: SortOrder
}

enum ReactionOnVisionsScalarFieldEnum {
  createdAt
  reaction
  userId
  visionId
}

input ReactionOnVisionsScalarWhereInput {
  AND: [ReactionOnVisionsScalarWhereInput!]
  NOT: [ReactionOnVisionsScalarWhereInput!]
  OR: [ReactionOnVisionsScalarWhereInput!]
  createdAt: DateTimeFilter
  reaction: EnumReactionFilter
  userId: StringFilter
  visionId: StringFilter
}

input ReactionOnVisionsScalarWhereWithAggregatesInput {
  AND: [ReactionOnVisionsScalarWhereWithAggregatesInput!]
  NOT: [ReactionOnVisionsScalarWhereWithAggregatesInput!]
  OR: [ReactionOnVisionsScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  reaction: EnumReactionWithAggregatesFilter
  userId: StringWithAggregatesFilter
  visionId: StringWithAggregatesFilter
}

input ReactionOnVisionsUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  reaction: EnumReactionFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutReactionOnVisionsInput
  vision: VisionUpdateOneRequiredWithoutReactionOnVisionsInput
}

input ReactionOnVisionsUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  reaction: EnumReactionFieldUpdateOperationsInput
}

input ReactionOnVisionsUpdateManyWithWhereWithoutUserInput {
  data: ReactionOnVisionsUpdateManyMutationInput!
  where: ReactionOnVisionsScalarWhereInput!
}

input ReactionOnVisionsUpdateManyWithWhereWithoutVisionInput {
  data: ReactionOnVisionsUpdateManyMutationInput!
  where: ReactionOnVisionsScalarWhereInput!
}

input ReactionOnVisionsUpdateManyWithoutUserInput {
  connect: [ReactionOnVisionsWhereUniqueInput!]
  connectOrCreate: [ReactionOnVisionsCreateOrConnectWithoutUserInput!]
  create: [ReactionOnVisionsCreateWithoutUserInput!]
  createMany: ReactionOnVisionsCreateManyUserInputEnvelope
  delete: [ReactionOnVisionsWhereUniqueInput!]
  deleteMany: [ReactionOnVisionsScalarWhereInput!]
  disconnect: [ReactionOnVisionsWhereUniqueInput!]
  set: [ReactionOnVisionsWhereUniqueInput!]
  update: [ReactionOnVisionsUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ReactionOnVisionsUpdateManyWithWhereWithoutUserInput!]
  upsert: [ReactionOnVisionsUpsertWithWhereUniqueWithoutUserInput!]
}

input ReactionOnVisionsUpdateManyWithoutVisionInput {
  connect: [ReactionOnVisionsWhereUniqueInput!]
  connectOrCreate: [ReactionOnVisionsCreateOrConnectWithoutVisionInput!]
  create: [ReactionOnVisionsCreateWithoutVisionInput!]
  createMany: ReactionOnVisionsCreateManyVisionInputEnvelope
  delete: [ReactionOnVisionsWhereUniqueInput!]
  deleteMany: [ReactionOnVisionsScalarWhereInput!]
  disconnect: [ReactionOnVisionsWhereUniqueInput!]
  set: [ReactionOnVisionsWhereUniqueInput!]
  update: [ReactionOnVisionsUpdateWithWhereUniqueWithoutVisionInput!]
  updateMany: [ReactionOnVisionsUpdateManyWithWhereWithoutVisionInput!]
  upsert: [ReactionOnVisionsUpsertWithWhereUniqueWithoutVisionInput!]
}

input ReactionOnVisionsUpdateWithWhereUniqueWithoutUserInput {
  data: ReactionOnVisionsUpdateWithoutUserInput!
  where: ReactionOnVisionsWhereUniqueInput!
}

input ReactionOnVisionsUpdateWithWhereUniqueWithoutVisionInput {
  data: ReactionOnVisionsUpdateWithoutVisionInput!
  where: ReactionOnVisionsWhereUniqueInput!
}

input ReactionOnVisionsUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  reaction: EnumReactionFieldUpdateOperationsInput
  vision: VisionUpdateOneRequiredWithoutReactionOnVisionsInput
}

input ReactionOnVisionsUpdateWithoutVisionInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  reaction: EnumReactionFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutReactionOnVisionsInput
}

input ReactionOnVisionsUpsertWithWhereUniqueWithoutUserInput {
  create: ReactionOnVisionsCreateWithoutUserInput!
  update: ReactionOnVisionsUpdateWithoutUserInput!
  where: ReactionOnVisionsWhereUniqueInput!
}

input ReactionOnVisionsUpsertWithWhereUniqueWithoutVisionInput {
  create: ReactionOnVisionsCreateWithoutVisionInput!
  update: ReactionOnVisionsUpdateWithoutVisionInput!
  where: ReactionOnVisionsWhereUniqueInput!
}

input ReactionOnVisionsUserIdVisionIdCompoundUniqueInput {
  userId: String!
  visionId: String!
}

input ReactionOnVisionsWhereInput {
  AND: [ReactionOnVisionsWhereInput!]
  NOT: [ReactionOnVisionsWhereInput!]
  OR: [ReactionOnVisionsWhereInput!]
  createdAt: DateTimeFilter
  reaction: EnumReactionFilter
  user: UserRelationFilter
  userId: StringFilter
  vision: VisionRelationFilter
  visionId: StringFilter
}

input ReactionOnVisionsWhereUniqueInput {
  userId_visionId: ReactionOnVisionsUserIdVisionIdCompoundUniqueInput
}

type Reference {
  _count: ReferenceCount
  id: String!
  snapshots(cursor: SnapshotWhereUniqueInput, distinct: [SnapshotScalarFieldEnum!], orderBy: [SnapshotOrderByWithRelationInput!], skip: Int, take: Int, where: SnapshotWhereInput): [Snapshot!]!
  vision(cursor: VisionWhereUniqueInput, distinct: [VisionScalarFieldEnum!], orderBy: [VisionOrderByWithRelationInput!], skip: Int, take: Int, where: VisionWhereInput): [Vision!]!
}

type ReferenceCount {
  snapshots: Int!
  vision: Int!
}

type ReferenceCountAggregate {
  _all: Int!
  id: Int!
}

input ReferenceCountOrderByAggregateInput {
  id: SortOrder
}

input ReferenceCreateInput {
  id: String
  snapshots: SnapshotCreateNestedManyWithoutReferencesInput
  vision: VisionCreateNestedManyWithoutReferenceInput
}

input ReferenceCreateManyInput {
  id: String
}

input ReferenceCreateNestedManyWithoutSnapshotsInput {
  connect: [ReferenceWhereUniqueInput!]
  connectOrCreate: [ReferenceCreateOrConnectWithoutSnapshotsInput!]
  create: [ReferenceCreateWithoutSnapshotsInput!]
}

input ReferenceCreateNestedOneWithoutVisionInput {
  connect: ReferenceWhereUniqueInput
  connectOrCreate: ReferenceCreateOrConnectWithoutVisionInput
  create: ReferenceCreateWithoutVisionInput
}

input ReferenceCreateOrConnectWithoutSnapshotsInput {
  create: ReferenceCreateWithoutSnapshotsInput!
  where: ReferenceWhereUniqueInput!
}

input ReferenceCreateOrConnectWithoutVisionInput {
  create: ReferenceCreateWithoutVisionInput!
  where: ReferenceWhereUniqueInput!
}

input ReferenceCreateWithoutSnapshotsInput {
  id: String
  vision: VisionCreateNestedManyWithoutReferenceInput
}

input ReferenceCreateWithoutVisionInput {
  id: String
  snapshots: SnapshotCreateNestedManyWithoutReferencesInput
}

type ReferenceGroupBy {
  _count: ReferenceCountAggregate
  _max: ReferenceMaxAggregate
  _min: ReferenceMinAggregate
  id: String!
}

input ReferenceListRelationFilter {
  every: ReferenceWhereInput
  none: ReferenceWhereInput
  some: ReferenceWhereInput
}

type ReferenceMaxAggregate {
  id: String
}

input ReferenceMaxOrderByAggregateInput {
  id: SortOrder
}

type ReferenceMinAggregate {
  id: String
}

input ReferenceMinOrderByAggregateInput {
  id: SortOrder
}

input ReferenceOrderByRelationAggregateInput {
  _count: SortOrder
}

input ReferenceOrderByWithAggregationInput {
  _count: ReferenceCountOrderByAggregateInput
  _max: ReferenceMaxOrderByAggregateInput
  _min: ReferenceMinOrderByAggregateInput
  id: SortOrder
}

input ReferenceOrderByWithRelationInput {
  id: SortOrder
  snapshots: SnapshotOrderByRelationAggregateInput
  vision: VisionOrderByRelationAggregateInput
}

input ReferenceRelationFilter {
  is: ReferenceWhereInput
  isNot: ReferenceWhereInput
}

enum ReferenceScalarFieldEnum {
  id
}

input ReferenceScalarWhereInput {
  AND: [ReferenceScalarWhereInput!]
  NOT: [ReferenceScalarWhereInput!]
  OR: [ReferenceScalarWhereInput!]
  id: StringFilter
}

input ReferenceScalarWhereWithAggregatesInput {
  AND: [ReferenceScalarWhereWithAggregatesInput!]
  NOT: [ReferenceScalarWhereWithAggregatesInput!]
  OR: [ReferenceScalarWhereWithAggregatesInput!]
  id: StringWithAggregatesFilter
}

input ReferenceUpdateInput {
  id: StringFieldUpdateOperationsInput
  snapshots: SnapshotUpdateManyWithoutReferencesInput
  vision: VisionUpdateManyWithoutReferenceInput
}

input ReferenceUpdateManyMutationInput {
  id: StringFieldUpdateOperationsInput
}

input ReferenceUpdateManyWithWhereWithoutSnapshotsInput {
  data: ReferenceUpdateManyMutationInput!
  where: ReferenceScalarWhereInput!
}

input ReferenceUpdateManyWithoutSnapshotsInput {
  connect: [ReferenceWhereUniqueInput!]
  connectOrCreate: [ReferenceCreateOrConnectWithoutSnapshotsInput!]
  create: [ReferenceCreateWithoutSnapshotsInput!]
  delete: [ReferenceWhereUniqueInput!]
  deleteMany: [ReferenceScalarWhereInput!]
  disconnect: [ReferenceWhereUniqueInput!]
  set: [ReferenceWhereUniqueInput!]
  update: [ReferenceUpdateWithWhereUniqueWithoutSnapshotsInput!]
  updateMany: [ReferenceUpdateManyWithWhereWithoutSnapshotsInput!]
  upsert: [ReferenceUpsertWithWhereUniqueWithoutSnapshotsInput!]
}

input ReferenceUpdateOneWithoutVisionInput {
  connect: ReferenceWhereUniqueInput
  connectOrCreate: ReferenceCreateOrConnectWithoutVisionInput
  create: ReferenceCreateWithoutVisionInput
  delete: Boolean
  disconnect: Boolean
  update: ReferenceUpdateWithoutVisionInput
  upsert: ReferenceUpsertWithoutVisionInput
}

input ReferenceUpdateWithWhereUniqueWithoutSnapshotsInput {
  data: ReferenceUpdateWithoutSnapshotsInput!
  where: ReferenceWhereUniqueInput!
}

input ReferenceUpdateWithoutSnapshotsInput {
  id: StringFieldUpdateOperationsInput
  vision: VisionUpdateManyWithoutReferenceInput
}

input ReferenceUpdateWithoutVisionInput {
  id: StringFieldUpdateOperationsInput
  snapshots: SnapshotUpdateManyWithoutReferencesInput
}

input ReferenceUpsertWithWhereUniqueWithoutSnapshotsInput {
  create: ReferenceCreateWithoutSnapshotsInput!
  update: ReferenceUpdateWithoutSnapshotsInput!
  where: ReferenceWhereUniqueInput!
}

input ReferenceUpsertWithoutVisionInput {
  create: ReferenceCreateWithoutVisionInput!
  update: ReferenceUpdateWithoutVisionInput!
}

input ReferenceWhereInput {
  AND: [ReferenceWhereInput!]
  NOT: [ReferenceWhereInput!]
  OR: [ReferenceWhereInput!]
  id: StringFilter
  snapshots: SnapshotListRelationFilter
  vision: VisionListRelationFilter
}

input ReferenceWhereUniqueInput {
  id: String
}

type RelationBetweenVisions {
  author: User!
  authorId: String!
  createdAt: DateTime!
  draftMode: Boolean!
  from: DateTime
  id: String!
  mergeRequest: MergeRequest
  mergeRequestId: String
  relation: String!
  sourceVision: Vision!
  sourceVisionId: String!
  status: RelationBetweenVisionsStatus
  targetVision: Vision!
  targetVisionId: String!
  to: DateTime
  updatedAt: DateTime!
}

type RelationBetweenVisionsCountAggregate {
  _all: Int!
  authorId: Int!
  createdAt: Int!
  draftMode: Int!
  from: Int!
  id: Int!
  mergeRequestId: Int!
  relation: Int!
  sourceVisionId: Int!
  targetVisionId: Int!
  to: Int!
  updatedAt: Int!
}

input RelationBetweenVisionsCountOrderByAggregateInput {
  authorId: SortOrder
  createdAt: SortOrder
  draftMode: SortOrder
  from: SortOrder
  id: SortOrder
  mergeRequestId: SortOrder
  relation: SortOrder
  sourceVisionId: SortOrder
  targetVisionId: SortOrder
  to: SortOrder
  updatedAt: SortOrder
}

input RelationBetweenVisionsCreateInput {
  author: UserCreateNestedOneWithoutRelationsBetweenVisionsInput!
  createdAt: DateTime
  draftMode: Boolean
  from: DateTime
  id: String
  mergeRequest: MergeRequestCreateNestedOneWithoutRelationChangesInput
  relation: String!
  sourceVision: VisionCreateNestedOneWithoutTargetedByInput!
  status: RelationBetweenVisionsStatusCreateNestedOneWithoutRelationBetweenVisionsInput
  targetVision: VisionCreateNestedOneWithoutTargetingInput!
  to: DateTime
  updatedAt: DateTime
}

input RelationBetweenVisionsCreateManyAuthorInput {
  createdAt: DateTime
  draftMode: Boolean
  from: DateTime
  id: String
  mergeRequestId: String
  relation: String!
  sourceVisionId: String!
  targetVisionId: String!
  to: DateTime
  updatedAt: DateTime
}

input RelationBetweenVisionsCreateManyAuthorInputEnvelope {
  data: [RelationBetweenVisionsCreateManyAuthorInput!]!
  skipDuplicates: Boolean
}

input RelationBetweenVisionsCreateManyInput {
  authorId: String!
  createdAt: DateTime
  draftMode: Boolean
  from: DateTime
  id: String
  mergeRequestId: String
  relation: String!
  sourceVisionId: String!
  targetVisionId: String!
  to: DateTime
  updatedAt: DateTime
}

input RelationBetweenVisionsCreateManyMergeRequestInput {
  authorId: String!
  createdAt: DateTime
  draftMode: Boolean
  from: DateTime
  id: String
  relation: String!
  sourceVisionId: String!
  targetVisionId: String!
  to: DateTime
  updatedAt: DateTime
}

input RelationBetweenVisionsCreateManyMergeRequestInputEnvelope {
  data: [RelationBetweenVisionsCreateManyMergeRequestInput!]!
  skipDuplicates: Boolean
}

input RelationBetweenVisionsCreateManySourceVisionInput {
  authorId: String!
  createdAt: DateTime
  draftMode: Boolean
  from: DateTime
  id: String
  mergeRequestId: String
  relation: String!
  targetVisionId: String!
  to: DateTime
  updatedAt: DateTime
}

input RelationBetweenVisionsCreateManySourceVisionInputEnvelope {
  data: [RelationBetweenVisionsCreateManySourceVisionInput!]!
  skipDuplicates: Boolean
}

input RelationBetweenVisionsCreateManyTargetVisionInput {
  authorId: String!
  createdAt: DateTime
  draftMode: Boolean
  from: DateTime
  id: String
  mergeRequestId: String
  relation: String!
  sourceVisionId: String!
  to: DateTime
  updatedAt: DateTime
}

input RelationBetweenVisionsCreateManyTargetVisionInputEnvelope {
  data: [RelationBetweenVisionsCreateManyTargetVisionInput!]!
  skipDuplicates: Boolean
}

input RelationBetweenVisionsCreateNestedManyWithoutAuthorInput {
  connect: [RelationBetweenVisionsWhereUniqueInput!]
  connectOrCreate: [RelationBetweenVisionsCreateOrConnectWithoutAuthorInput!]
  create: [RelationBetweenVisionsCreateWithoutAuthorInput!]
  createMany: RelationBetweenVisionsCreateManyAuthorInputEnvelope
}

input RelationBetweenVisionsCreateNestedManyWithoutMergeRequestInput {
  connect: [RelationBetweenVisionsWhereUniqueInput!]
  connectOrCreate: [RelationBetweenVisionsCreateOrConnectWithoutMergeRequestInput!]
  create: [RelationBetweenVisionsCreateWithoutMergeRequestInput!]
  createMany: RelationBetweenVisionsCreateManyMergeRequestInputEnvelope
}

input RelationBetweenVisionsCreateNestedManyWithoutSourceVisionInput {
  connect: [RelationBetweenVisionsWhereUniqueInput!]
  connectOrCreate: [RelationBetweenVisionsCreateOrConnectWithoutSourceVisionInput!]
  create: [RelationBetweenVisionsCreateWithoutSourceVisionInput!]
  createMany: RelationBetweenVisionsCreateManySourceVisionInputEnvelope
}

input RelationBetweenVisionsCreateNestedManyWithoutTargetVisionInput {
  connect: [RelationBetweenVisionsWhereUniqueInput!]
  connectOrCreate: [RelationBetweenVisionsCreateOrConnectWithoutTargetVisionInput!]
  create: [RelationBetweenVisionsCreateWithoutTargetVisionInput!]
  createMany: RelationBetweenVisionsCreateManyTargetVisionInputEnvelope
}

input RelationBetweenVisionsCreateNestedOneWithoutStatusInput {
  connect: RelationBetweenVisionsWhereUniqueInput
  connectOrCreate: RelationBetweenVisionsCreateOrConnectWithoutStatusInput
  create: RelationBetweenVisionsCreateWithoutStatusInput
}

input RelationBetweenVisionsCreateOrConnectWithoutAuthorInput {
  create: RelationBetweenVisionsCreateWithoutAuthorInput!
  where: RelationBetweenVisionsWhereUniqueInput!
}

input RelationBetweenVisionsCreateOrConnectWithoutMergeRequestInput {
  create: RelationBetweenVisionsCreateWithoutMergeRequestInput!
  where: RelationBetweenVisionsWhereUniqueInput!
}

input RelationBetweenVisionsCreateOrConnectWithoutSourceVisionInput {
  create: RelationBetweenVisionsCreateWithoutSourceVisionInput!
  where: RelationBetweenVisionsWhereUniqueInput!
}

input RelationBetweenVisionsCreateOrConnectWithoutStatusInput {
  create: RelationBetweenVisionsCreateWithoutStatusInput!
  where: RelationBetweenVisionsWhereUniqueInput!
}

input RelationBetweenVisionsCreateOrConnectWithoutTargetVisionInput {
  create: RelationBetweenVisionsCreateWithoutTargetVisionInput!
  where: RelationBetweenVisionsWhereUniqueInput!
}

input RelationBetweenVisionsCreateWithoutAuthorInput {
  createdAt: DateTime
  draftMode: Boolean
  from: DateTime
  id: String
  mergeRequest: MergeRequestCreateNestedOneWithoutRelationChangesInput
  relation: String!
  sourceVision: VisionCreateNestedOneWithoutTargetedByInput!
  status: RelationBetweenVisionsStatusCreateNestedOneWithoutRelationBetweenVisionsInput
  targetVision: VisionCreateNestedOneWithoutTargetingInput!
  to: DateTime
  updatedAt: DateTime
}

input RelationBetweenVisionsCreateWithoutMergeRequestInput {
  author: UserCreateNestedOneWithoutRelationsBetweenVisionsInput!
  createdAt: DateTime
  draftMode: Boolean
  from: DateTime
  id: String
  relation: String!
  sourceVision: VisionCreateNestedOneWithoutTargetedByInput!
  status: RelationBetweenVisionsStatusCreateNestedOneWithoutRelationBetweenVisionsInput
  targetVision: VisionCreateNestedOneWithoutTargetingInput!
  to: DateTime
  updatedAt: DateTime
}

input RelationBetweenVisionsCreateWithoutSourceVisionInput {
  author: UserCreateNestedOneWithoutRelationsBetweenVisionsInput!
  createdAt: DateTime
  draftMode: Boolean
  from: DateTime
  id: String
  mergeRequest: MergeRequestCreateNestedOneWithoutRelationChangesInput
  relation: String!
  status: RelationBetweenVisionsStatusCreateNestedOneWithoutRelationBetweenVisionsInput
  targetVision: VisionCreateNestedOneWithoutTargetingInput!
  to: DateTime
  updatedAt: DateTime
}

input RelationBetweenVisionsCreateWithoutStatusInput {
  author: UserCreateNestedOneWithoutRelationsBetweenVisionsInput!
  createdAt: DateTime
  draftMode: Boolean
  from: DateTime
  id: String
  mergeRequest: MergeRequestCreateNestedOneWithoutRelationChangesInput
  relation: String!
  sourceVision: VisionCreateNestedOneWithoutTargetedByInput!
  targetVision: VisionCreateNestedOneWithoutTargetingInput!
  to: DateTime
  updatedAt: DateTime
}

input RelationBetweenVisionsCreateWithoutTargetVisionInput {
  author: UserCreateNestedOneWithoutRelationsBetweenVisionsInput!
  createdAt: DateTime
  draftMode: Boolean
  from: DateTime
  id: String
  mergeRequest: MergeRequestCreateNestedOneWithoutRelationChangesInput
  relation: String!
  sourceVision: VisionCreateNestedOneWithoutTargetedByInput!
  status: RelationBetweenVisionsStatusCreateNestedOneWithoutRelationBetweenVisionsInput
  to: DateTime
  updatedAt: DateTime
}

type RelationBetweenVisionsGroupBy {
  _count: RelationBetweenVisionsCountAggregate
  _max: RelationBetweenVisionsMaxAggregate
  _min: RelationBetweenVisionsMinAggregate
  authorId: String!
  createdAt: DateTime!
  draftMode: Boolean!
  from: DateTime
  id: String!
  mergeRequestId: String
  relation: String!
  sourceVisionId: String!
  targetVisionId: String!
  to: DateTime
  updatedAt: DateTime!
}

input RelationBetweenVisionsListRelationFilter {
  every: RelationBetweenVisionsWhereInput
  none: RelationBetweenVisionsWhereInput
  some: RelationBetweenVisionsWhereInput
}

type RelationBetweenVisionsMaxAggregate {
  authorId: String
  createdAt: DateTime
  draftMode: Boolean
  from: DateTime
  id: String
  mergeRequestId: String
  relation: String
  sourceVisionId: String
  targetVisionId: String
  to: DateTime
  updatedAt: DateTime
}

input RelationBetweenVisionsMaxOrderByAggregateInput {
  authorId: SortOrder
  createdAt: SortOrder
  draftMode: SortOrder
  from: SortOrder
  id: SortOrder
  mergeRequestId: SortOrder
  relation: SortOrder
  sourceVisionId: SortOrder
  targetVisionId: SortOrder
  to: SortOrder
  updatedAt: SortOrder
}

type RelationBetweenVisionsMinAggregate {
  authorId: String
  createdAt: DateTime
  draftMode: Boolean
  from: DateTime
  id: String
  mergeRequestId: String
  relation: String
  sourceVisionId: String
  targetVisionId: String
  to: DateTime
  updatedAt: DateTime
}

input RelationBetweenVisionsMinOrderByAggregateInput {
  authorId: SortOrder
  createdAt: SortOrder
  draftMode: SortOrder
  from: SortOrder
  id: SortOrder
  mergeRequestId: SortOrder
  relation: SortOrder
  sourceVisionId: SortOrder
  targetVisionId: SortOrder
  to: SortOrder
  updatedAt: SortOrder
}

input RelationBetweenVisionsOrderByRelationAggregateInput {
  _count: SortOrder
}

input RelationBetweenVisionsOrderByWithAggregationInput {
  _count: RelationBetweenVisionsCountOrderByAggregateInput
  _max: RelationBetweenVisionsMaxOrderByAggregateInput
  _min: RelationBetweenVisionsMinOrderByAggregateInput
  authorId: SortOrder
  createdAt: SortOrder
  draftMode: SortOrder
  from: SortOrder
  id: SortOrder
  mergeRequestId: SortOrder
  relation: SortOrder
  sourceVisionId: SortOrder
  targetVisionId: SortOrder
  to: SortOrder
  updatedAt: SortOrder
}

input RelationBetweenVisionsOrderByWithRelationInput {
  author: UserOrderByWithRelationInput
  authorId: SortOrder
  createdAt: SortOrder
  draftMode: SortOrder
  from: SortOrder
  id: SortOrder
  mergeRequest: MergeRequestOrderByWithRelationInput
  mergeRequestId: SortOrder
  relation: SortOrder
  sourceVision: VisionOrderByWithRelationInput
  sourceVisionId: SortOrder
  status: RelationBetweenVisionsStatusOrderByWithRelationInput
  targetVision: VisionOrderByWithRelationInput
  targetVisionId: SortOrder
  to: SortOrder
  updatedAt: SortOrder
}

input RelationBetweenVisionsRelationFilter {
  is: RelationBetweenVisionsWhereInput
  isNot: RelationBetweenVisionsWhereInput
}

enum RelationBetweenVisionsScalarFieldEnum {
  authorId
  createdAt
  draftMode
  from
  id
  mergeRequestId
  relation
  sourceVisionId
  targetVisionId
  to
  updatedAt
}

input RelationBetweenVisionsScalarWhereInput {
  AND: [RelationBetweenVisionsScalarWhereInput!]
  NOT: [RelationBetweenVisionsScalarWhereInput!]
  OR: [RelationBetweenVisionsScalarWhereInput!]
  authorId: StringFilter
  createdAt: DateTimeFilter
  draftMode: BoolFilter
  from: DateTimeNullableFilter
  id: StringFilter
  mergeRequestId: StringNullableFilter
  relation: StringFilter
  sourceVisionId: StringFilter
  targetVisionId: StringFilter
  to: DateTimeNullableFilter
  updatedAt: DateTimeFilter
}

input RelationBetweenVisionsScalarWhereWithAggregatesInput {
  AND: [RelationBetweenVisionsScalarWhereWithAggregatesInput!]
  NOT: [RelationBetweenVisionsScalarWhereWithAggregatesInput!]
  OR: [RelationBetweenVisionsScalarWhereWithAggregatesInput!]
  authorId: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  draftMode: BoolWithAggregatesFilter
  from: DateTimeNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  mergeRequestId: StringNullableWithAggregatesFilter
  relation: StringWithAggregatesFilter
  sourceVisionId: StringWithAggregatesFilter
  targetVisionId: StringWithAggregatesFilter
  to: DateTimeNullableWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

type RelationBetweenVisionsStatus {
  createdAt: DateTime!
  relationBetweenVisions: RelationBetweenVisions!
  relationBetweenVisionsId: String!
  status: String!
  updatedAt: DateTime!
}

type RelationBetweenVisionsStatusCountAggregate {
  _all: Int!
  createdAt: Int!
  relationBetweenVisionsId: Int!
  status: Int!
  updatedAt: Int!
}

input RelationBetweenVisionsStatusCountOrderByAggregateInput {
  createdAt: SortOrder
  relationBetweenVisionsId: SortOrder
  status: SortOrder
  updatedAt: SortOrder
}

input RelationBetweenVisionsStatusCreateInput {
  createdAt: DateTime
  relationBetweenVisions: RelationBetweenVisionsCreateNestedOneWithoutStatusInput!
  status: String!
  updatedAt: DateTime
}

input RelationBetweenVisionsStatusCreateManyInput {
  createdAt: DateTime
  relationBetweenVisionsId: String!
  status: String!
  updatedAt: DateTime
}

input RelationBetweenVisionsStatusCreateNestedOneWithoutRelationBetweenVisionsInput {
  connect: RelationBetweenVisionsStatusWhereUniqueInput
  connectOrCreate: RelationBetweenVisionsStatusCreateOrConnectWithoutRelationBetweenVisionsInput
  create: RelationBetweenVisionsStatusCreateWithoutRelationBetweenVisionsInput
}

input RelationBetweenVisionsStatusCreateOrConnectWithoutRelationBetweenVisionsInput {
  create: RelationBetweenVisionsStatusCreateWithoutRelationBetweenVisionsInput!
  where: RelationBetweenVisionsStatusWhereUniqueInput!
}

input RelationBetweenVisionsStatusCreateWithoutRelationBetweenVisionsInput {
  createdAt: DateTime
  status: String!
  updatedAt: DateTime
}

type RelationBetweenVisionsStatusGroupBy {
  _count: RelationBetweenVisionsStatusCountAggregate
  _max: RelationBetweenVisionsStatusMaxAggregate
  _min: RelationBetweenVisionsStatusMinAggregate
  createdAt: DateTime!
  relationBetweenVisionsId: String!
  status: String!
  updatedAt: DateTime!
}

type RelationBetweenVisionsStatusMaxAggregate {
  createdAt: DateTime
  relationBetweenVisionsId: String
  status: String
  updatedAt: DateTime
}

input RelationBetweenVisionsStatusMaxOrderByAggregateInput {
  createdAt: SortOrder
  relationBetweenVisionsId: SortOrder
  status: SortOrder
  updatedAt: SortOrder
}

type RelationBetweenVisionsStatusMinAggregate {
  createdAt: DateTime
  relationBetweenVisionsId: String
  status: String
  updatedAt: DateTime
}

input RelationBetweenVisionsStatusMinOrderByAggregateInput {
  createdAt: SortOrder
  relationBetweenVisionsId: SortOrder
  status: SortOrder
  updatedAt: SortOrder
}

input RelationBetweenVisionsStatusOrderByWithAggregationInput {
  _count: RelationBetweenVisionsStatusCountOrderByAggregateInput
  _max: RelationBetweenVisionsStatusMaxOrderByAggregateInput
  _min: RelationBetweenVisionsStatusMinOrderByAggregateInput
  createdAt: SortOrder
  relationBetweenVisionsId: SortOrder
  status: SortOrder
  updatedAt: SortOrder
}

input RelationBetweenVisionsStatusOrderByWithRelationInput {
  createdAt: SortOrder
  relationBetweenVisions: RelationBetweenVisionsOrderByWithRelationInput
  relationBetweenVisionsId: SortOrder
  status: SortOrder
  updatedAt: SortOrder
}

input RelationBetweenVisionsStatusRelationFilter {
  is: RelationBetweenVisionsStatusWhereInput
  isNot: RelationBetweenVisionsStatusWhereInput
}

enum RelationBetweenVisionsStatusScalarFieldEnum {
  createdAt
  relationBetweenVisionsId
  status
  updatedAt
}

input RelationBetweenVisionsStatusScalarWhereWithAggregatesInput {
  AND: [RelationBetweenVisionsStatusScalarWhereWithAggregatesInput!]
  NOT: [RelationBetweenVisionsStatusScalarWhereWithAggregatesInput!]
  OR: [RelationBetweenVisionsStatusScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  relationBetweenVisionsId: StringWithAggregatesFilter
  status: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input RelationBetweenVisionsStatusUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  relationBetweenVisions: RelationBetweenVisionsUpdateOneRequiredWithoutStatusInput
  status: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RelationBetweenVisionsStatusUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  status: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RelationBetweenVisionsStatusUpdateOneWithoutRelationBetweenVisionsInput {
  connect: RelationBetweenVisionsStatusWhereUniqueInput
  connectOrCreate: RelationBetweenVisionsStatusCreateOrConnectWithoutRelationBetweenVisionsInput
  create: RelationBetweenVisionsStatusCreateWithoutRelationBetweenVisionsInput
  delete: Boolean
  disconnect: Boolean
  update: RelationBetweenVisionsStatusUpdateWithoutRelationBetweenVisionsInput
  upsert: RelationBetweenVisionsStatusUpsertWithoutRelationBetweenVisionsInput
}

input RelationBetweenVisionsStatusUpdateWithoutRelationBetweenVisionsInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  status: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RelationBetweenVisionsStatusUpsertWithoutRelationBetweenVisionsInput {
  create: RelationBetweenVisionsStatusCreateWithoutRelationBetweenVisionsInput!
  update: RelationBetweenVisionsStatusUpdateWithoutRelationBetweenVisionsInput!
}

input RelationBetweenVisionsStatusWhereInput {
  AND: [RelationBetweenVisionsStatusWhereInput!]
  NOT: [RelationBetweenVisionsStatusWhereInput!]
  OR: [RelationBetweenVisionsStatusWhereInput!]
  createdAt: DateTimeFilter
  relationBetweenVisions: RelationBetweenVisionsRelationFilter
  relationBetweenVisionsId: StringFilter
  status: StringFilter
  updatedAt: DateTimeFilter
}

input RelationBetweenVisionsStatusWhereUniqueInput {
  relationBetweenVisionsId: String
}

input RelationBetweenVisionsUpdateInput {
  author: UserUpdateOneRequiredWithoutRelationsBetweenVisionsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  draftMode: BoolFieldUpdateOperationsInput
  from: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  mergeRequest: MergeRequestUpdateOneWithoutRelationChangesInput
  relation: StringFieldUpdateOperationsInput
  sourceVision: VisionUpdateOneRequiredWithoutTargetedByInput
  status: RelationBetweenVisionsStatusUpdateOneWithoutRelationBetweenVisionsInput
  targetVision: VisionUpdateOneRequiredWithoutTargetingInput
  to: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RelationBetweenVisionsUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  draftMode: BoolFieldUpdateOperationsInput
  from: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  relation: StringFieldUpdateOperationsInput
  to: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RelationBetweenVisionsUpdateManyWithWhereWithoutAuthorInput {
  data: RelationBetweenVisionsUpdateManyMutationInput!
  where: RelationBetweenVisionsScalarWhereInput!
}

input RelationBetweenVisionsUpdateManyWithWhereWithoutMergeRequestInput {
  data: RelationBetweenVisionsUpdateManyMutationInput!
  where: RelationBetweenVisionsScalarWhereInput!
}

input RelationBetweenVisionsUpdateManyWithWhereWithoutSourceVisionInput {
  data: RelationBetweenVisionsUpdateManyMutationInput!
  where: RelationBetweenVisionsScalarWhereInput!
}

input RelationBetweenVisionsUpdateManyWithWhereWithoutTargetVisionInput {
  data: RelationBetweenVisionsUpdateManyMutationInput!
  where: RelationBetweenVisionsScalarWhereInput!
}

input RelationBetweenVisionsUpdateManyWithoutAuthorInput {
  connect: [RelationBetweenVisionsWhereUniqueInput!]
  connectOrCreate: [RelationBetweenVisionsCreateOrConnectWithoutAuthorInput!]
  create: [RelationBetweenVisionsCreateWithoutAuthorInput!]
  createMany: RelationBetweenVisionsCreateManyAuthorInputEnvelope
  delete: [RelationBetweenVisionsWhereUniqueInput!]
  deleteMany: [RelationBetweenVisionsScalarWhereInput!]
  disconnect: [RelationBetweenVisionsWhereUniqueInput!]
  set: [RelationBetweenVisionsWhereUniqueInput!]
  update: [RelationBetweenVisionsUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [RelationBetweenVisionsUpdateManyWithWhereWithoutAuthorInput!]
  upsert: [RelationBetweenVisionsUpsertWithWhereUniqueWithoutAuthorInput!]
}

input RelationBetweenVisionsUpdateManyWithoutMergeRequestInput {
  connect: [RelationBetweenVisionsWhereUniqueInput!]
  connectOrCreate: [RelationBetweenVisionsCreateOrConnectWithoutMergeRequestInput!]
  create: [RelationBetweenVisionsCreateWithoutMergeRequestInput!]
  createMany: RelationBetweenVisionsCreateManyMergeRequestInputEnvelope
  delete: [RelationBetweenVisionsWhereUniqueInput!]
  deleteMany: [RelationBetweenVisionsScalarWhereInput!]
  disconnect: [RelationBetweenVisionsWhereUniqueInput!]
  set: [RelationBetweenVisionsWhereUniqueInput!]
  update: [RelationBetweenVisionsUpdateWithWhereUniqueWithoutMergeRequestInput!]
  updateMany: [RelationBetweenVisionsUpdateManyWithWhereWithoutMergeRequestInput!]
  upsert: [RelationBetweenVisionsUpsertWithWhereUniqueWithoutMergeRequestInput!]
}

input RelationBetweenVisionsUpdateManyWithoutSourceVisionInput {
  connect: [RelationBetweenVisionsWhereUniqueInput!]
  connectOrCreate: [RelationBetweenVisionsCreateOrConnectWithoutSourceVisionInput!]
  create: [RelationBetweenVisionsCreateWithoutSourceVisionInput!]
  createMany: RelationBetweenVisionsCreateManySourceVisionInputEnvelope
  delete: [RelationBetweenVisionsWhereUniqueInput!]
  deleteMany: [RelationBetweenVisionsScalarWhereInput!]
  disconnect: [RelationBetweenVisionsWhereUniqueInput!]
  set: [RelationBetweenVisionsWhereUniqueInput!]
  update: [RelationBetweenVisionsUpdateWithWhereUniqueWithoutSourceVisionInput!]
  updateMany: [RelationBetweenVisionsUpdateManyWithWhereWithoutSourceVisionInput!]
  upsert: [RelationBetweenVisionsUpsertWithWhereUniqueWithoutSourceVisionInput!]
}

input RelationBetweenVisionsUpdateManyWithoutTargetVisionInput {
  connect: [RelationBetweenVisionsWhereUniqueInput!]
  connectOrCreate: [RelationBetweenVisionsCreateOrConnectWithoutTargetVisionInput!]
  create: [RelationBetweenVisionsCreateWithoutTargetVisionInput!]
  createMany: RelationBetweenVisionsCreateManyTargetVisionInputEnvelope
  delete: [RelationBetweenVisionsWhereUniqueInput!]
  deleteMany: [RelationBetweenVisionsScalarWhereInput!]
  disconnect: [RelationBetweenVisionsWhereUniqueInput!]
  set: [RelationBetweenVisionsWhereUniqueInput!]
  update: [RelationBetweenVisionsUpdateWithWhereUniqueWithoutTargetVisionInput!]
  updateMany: [RelationBetweenVisionsUpdateManyWithWhereWithoutTargetVisionInput!]
  upsert: [RelationBetweenVisionsUpsertWithWhereUniqueWithoutTargetVisionInput!]
}

input RelationBetweenVisionsUpdateOneRequiredWithoutStatusInput {
  connect: RelationBetweenVisionsWhereUniqueInput
  connectOrCreate: RelationBetweenVisionsCreateOrConnectWithoutStatusInput
  create: RelationBetweenVisionsCreateWithoutStatusInput
  update: RelationBetweenVisionsUpdateWithoutStatusInput
  upsert: RelationBetweenVisionsUpsertWithoutStatusInput
}

input RelationBetweenVisionsUpdateWithWhereUniqueWithoutAuthorInput {
  data: RelationBetweenVisionsUpdateWithoutAuthorInput!
  where: RelationBetweenVisionsWhereUniqueInput!
}

input RelationBetweenVisionsUpdateWithWhereUniqueWithoutMergeRequestInput {
  data: RelationBetweenVisionsUpdateWithoutMergeRequestInput!
  where: RelationBetweenVisionsWhereUniqueInput!
}

input RelationBetweenVisionsUpdateWithWhereUniqueWithoutSourceVisionInput {
  data: RelationBetweenVisionsUpdateWithoutSourceVisionInput!
  where: RelationBetweenVisionsWhereUniqueInput!
}

input RelationBetweenVisionsUpdateWithWhereUniqueWithoutTargetVisionInput {
  data: RelationBetweenVisionsUpdateWithoutTargetVisionInput!
  where: RelationBetweenVisionsWhereUniqueInput!
}

input RelationBetweenVisionsUpdateWithoutAuthorInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  draftMode: BoolFieldUpdateOperationsInput
  from: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  mergeRequest: MergeRequestUpdateOneWithoutRelationChangesInput
  relation: StringFieldUpdateOperationsInput
  sourceVision: VisionUpdateOneRequiredWithoutTargetedByInput
  status: RelationBetweenVisionsStatusUpdateOneWithoutRelationBetweenVisionsInput
  targetVision: VisionUpdateOneRequiredWithoutTargetingInput
  to: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RelationBetweenVisionsUpdateWithoutMergeRequestInput {
  author: UserUpdateOneRequiredWithoutRelationsBetweenVisionsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  draftMode: BoolFieldUpdateOperationsInput
  from: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  relation: StringFieldUpdateOperationsInput
  sourceVision: VisionUpdateOneRequiredWithoutTargetedByInput
  status: RelationBetweenVisionsStatusUpdateOneWithoutRelationBetweenVisionsInput
  targetVision: VisionUpdateOneRequiredWithoutTargetingInput
  to: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RelationBetweenVisionsUpdateWithoutSourceVisionInput {
  author: UserUpdateOneRequiredWithoutRelationsBetweenVisionsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  draftMode: BoolFieldUpdateOperationsInput
  from: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  mergeRequest: MergeRequestUpdateOneWithoutRelationChangesInput
  relation: StringFieldUpdateOperationsInput
  status: RelationBetweenVisionsStatusUpdateOneWithoutRelationBetweenVisionsInput
  targetVision: VisionUpdateOneRequiredWithoutTargetingInput
  to: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RelationBetweenVisionsUpdateWithoutStatusInput {
  author: UserUpdateOneRequiredWithoutRelationsBetweenVisionsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  draftMode: BoolFieldUpdateOperationsInput
  from: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  mergeRequest: MergeRequestUpdateOneWithoutRelationChangesInput
  relation: StringFieldUpdateOperationsInput
  sourceVision: VisionUpdateOneRequiredWithoutTargetedByInput
  targetVision: VisionUpdateOneRequiredWithoutTargetingInput
  to: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RelationBetweenVisionsUpdateWithoutTargetVisionInput {
  author: UserUpdateOneRequiredWithoutRelationsBetweenVisionsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  draftMode: BoolFieldUpdateOperationsInput
  from: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  mergeRequest: MergeRequestUpdateOneWithoutRelationChangesInput
  relation: StringFieldUpdateOperationsInput
  sourceVision: VisionUpdateOneRequiredWithoutTargetedByInput
  status: RelationBetweenVisionsStatusUpdateOneWithoutRelationBetweenVisionsInput
  to: NullableDateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input RelationBetweenVisionsUpsertWithWhereUniqueWithoutAuthorInput {
  create: RelationBetweenVisionsCreateWithoutAuthorInput!
  update: RelationBetweenVisionsUpdateWithoutAuthorInput!
  where: RelationBetweenVisionsWhereUniqueInput!
}

input RelationBetweenVisionsUpsertWithWhereUniqueWithoutMergeRequestInput {
  create: RelationBetweenVisionsCreateWithoutMergeRequestInput!
  update: RelationBetweenVisionsUpdateWithoutMergeRequestInput!
  where: RelationBetweenVisionsWhereUniqueInput!
}

input RelationBetweenVisionsUpsertWithWhereUniqueWithoutSourceVisionInput {
  create: RelationBetweenVisionsCreateWithoutSourceVisionInput!
  update: RelationBetweenVisionsUpdateWithoutSourceVisionInput!
  where: RelationBetweenVisionsWhereUniqueInput!
}

input RelationBetweenVisionsUpsertWithWhereUniqueWithoutTargetVisionInput {
  create: RelationBetweenVisionsCreateWithoutTargetVisionInput!
  update: RelationBetweenVisionsUpdateWithoutTargetVisionInput!
  where: RelationBetweenVisionsWhereUniqueInput!
}

input RelationBetweenVisionsUpsertWithoutStatusInput {
  create: RelationBetweenVisionsCreateWithoutStatusInput!
  update: RelationBetweenVisionsUpdateWithoutStatusInput!
}

input RelationBetweenVisionsWhereInput {
  AND: [RelationBetweenVisionsWhereInput!]
  NOT: [RelationBetweenVisionsWhereInput!]
  OR: [RelationBetweenVisionsWhereInput!]
  author: UserRelationFilter
  authorId: StringFilter
  createdAt: DateTimeFilter
  draftMode: BoolFilter
  from: DateTimeNullableFilter
  id: StringFilter
  mergeRequest: MergeRequestRelationFilter
  mergeRequestId: StringNullableFilter
  relation: StringFilter
  sourceVision: VisionRelationFilter
  sourceVisionId: StringFilter
  status: RelationBetweenVisionsStatusRelationFilter
  targetVision: VisionRelationFilter
  targetVisionId: StringFilter
  to: DateTimeNullableFilter
  updatedAt: DateTimeFilter
}

input RelationBetweenVisionsWhereUniqueInput {
  id: String
}

type ReputationRecord {
  createdAt: DateTime!
  difference: Int!
  id: String!
  reason: String!
  user: User!
  userId: String!
  vision: Vision!
  visionId: String!
}

type ReputationRecordAvgAggregate {
  difference: Float
}

input ReputationRecordAvgOrderByAggregateInput {
  difference: SortOrder
}

type ReputationRecordCountAggregate {
  _all: Int!
  createdAt: Int!
  difference: Int!
  id: Int!
  reason: Int!
  userId: Int!
  visionId: Int!
}

input ReputationRecordCountOrderByAggregateInput {
  createdAt: SortOrder
  difference: SortOrder
  id: SortOrder
  reason: SortOrder
  userId: SortOrder
  visionId: SortOrder
}

input ReputationRecordCreateInput {
  createdAt: DateTime
  difference: Int
  id: String
  reason: String!
  user: UserCreateNestedOneWithoutReputationRecordsInput!
  vision: VisionCreateNestedOneWithoutReputationRecordsInput!
}

input ReputationRecordCreateManyInput {
  createdAt: DateTime
  difference: Int
  id: String
  reason: String!
  userId: String!
  visionId: String!
}

input ReputationRecordCreateManyUserInput {
  createdAt: DateTime
  difference: Int
  id: String
  reason: String!
  visionId: String!
}

input ReputationRecordCreateManyUserInputEnvelope {
  data: [ReputationRecordCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input ReputationRecordCreateManyVisionInput {
  createdAt: DateTime
  difference: Int
  id: String
  reason: String!
  userId: String!
}

input ReputationRecordCreateManyVisionInputEnvelope {
  data: [ReputationRecordCreateManyVisionInput!]!
  skipDuplicates: Boolean
}

input ReputationRecordCreateNestedManyWithoutUserInput {
  connect: [ReputationRecordWhereUniqueInput!]
  connectOrCreate: [ReputationRecordCreateOrConnectWithoutUserInput!]
  create: [ReputationRecordCreateWithoutUserInput!]
  createMany: ReputationRecordCreateManyUserInputEnvelope
}

input ReputationRecordCreateNestedManyWithoutVisionInput {
  connect: [ReputationRecordWhereUniqueInput!]
  connectOrCreate: [ReputationRecordCreateOrConnectWithoutVisionInput!]
  create: [ReputationRecordCreateWithoutVisionInput!]
  createMany: ReputationRecordCreateManyVisionInputEnvelope
}

input ReputationRecordCreateOrConnectWithoutUserInput {
  create: ReputationRecordCreateWithoutUserInput!
  where: ReputationRecordWhereUniqueInput!
}

input ReputationRecordCreateOrConnectWithoutVisionInput {
  create: ReputationRecordCreateWithoutVisionInput!
  where: ReputationRecordWhereUniqueInput!
}

input ReputationRecordCreateWithoutUserInput {
  createdAt: DateTime
  difference: Int
  id: String
  reason: String!
  vision: VisionCreateNestedOneWithoutReputationRecordsInput!
}

input ReputationRecordCreateWithoutVisionInput {
  createdAt: DateTime
  difference: Int
  id: String
  reason: String!
  user: UserCreateNestedOneWithoutReputationRecordsInput!
}

type ReputationRecordGroupBy {
  _avg: ReputationRecordAvgAggregate
  _count: ReputationRecordCountAggregate
  _max: ReputationRecordMaxAggregate
  _min: ReputationRecordMinAggregate
  _sum: ReputationRecordSumAggregate
  createdAt: DateTime!
  difference: Int!
  id: String!
  reason: String!
  userId: String!
  visionId: String!
}

input ReputationRecordListRelationFilter {
  every: ReputationRecordWhereInput
  none: ReputationRecordWhereInput
  some: ReputationRecordWhereInput
}

type ReputationRecordMaxAggregate {
  createdAt: DateTime
  difference: Int
  id: String
  reason: String
  userId: String
  visionId: String
}

input ReputationRecordMaxOrderByAggregateInput {
  createdAt: SortOrder
  difference: SortOrder
  id: SortOrder
  reason: SortOrder
  userId: SortOrder
  visionId: SortOrder
}

type ReputationRecordMinAggregate {
  createdAt: DateTime
  difference: Int
  id: String
  reason: String
  userId: String
  visionId: String
}

input ReputationRecordMinOrderByAggregateInput {
  createdAt: SortOrder
  difference: SortOrder
  id: SortOrder
  reason: SortOrder
  userId: SortOrder
  visionId: SortOrder
}

input ReputationRecordOrderByRelationAggregateInput {
  _count: SortOrder
}

input ReputationRecordOrderByWithAggregationInput {
  _avg: ReputationRecordAvgOrderByAggregateInput
  _count: ReputationRecordCountOrderByAggregateInput
  _max: ReputationRecordMaxOrderByAggregateInput
  _min: ReputationRecordMinOrderByAggregateInput
  _sum: ReputationRecordSumOrderByAggregateInput
  createdAt: SortOrder
  difference: SortOrder
  id: SortOrder
  reason: SortOrder
  userId: SortOrder
  visionId: SortOrder
}

input ReputationRecordOrderByWithRelationInput {
  createdAt: SortOrder
  difference: SortOrder
  id: SortOrder
  reason: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
  vision: VisionOrderByWithRelationInput
  visionId: SortOrder
}

enum ReputationRecordScalarFieldEnum {
  createdAt
  difference
  id
  reason
  userId
  visionId
}

input ReputationRecordScalarWhereInput {
  AND: [ReputationRecordScalarWhereInput!]
  NOT: [ReputationRecordScalarWhereInput!]
  OR: [ReputationRecordScalarWhereInput!]
  createdAt: DateTimeFilter
  difference: IntFilter
  id: StringFilter
  reason: StringFilter
  userId: StringFilter
  visionId: StringFilter
}

input ReputationRecordScalarWhereWithAggregatesInput {
  AND: [ReputationRecordScalarWhereWithAggregatesInput!]
  NOT: [ReputationRecordScalarWhereWithAggregatesInput!]
  OR: [ReputationRecordScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  difference: IntWithAggregatesFilter
  id: StringWithAggregatesFilter
  reason: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
  visionId: StringWithAggregatesFilter
}

type ReputationRecordSumAggregate {
  difference: Int
}

input ReputationRecordSumOrderByAggregateInput {
  difference: SortOrder
}

input ReputationRecordUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  difference: IntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  reason: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutReputationRecordsInput
  vision: VisionUpdateOneRequiredWithoutReputationRecordsInput
}

input ReputationRecordUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  difference: IntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  reason: StringFieldUpdateOperationsInput
}

input ReputationRecordUpdateManyWithWhereWithoutUserInput {
  data: ReputationRecordUpdateManyMutationInput!
  where: ReputationRecordScalarWhereInput!
}

input ReputationRecordUpdateManyWithWhereWithoutVisionInput {
  data: ReputationRecordUpdateManyMutationInput!
  where: ReputationRecordScalarWhereInput!
}

input ReputationRecordUpdateManyWithoutUserInput {
  connect: [ReputationRecordWhereUniqueInput!]
  connectOrCreate: [ReputationRecordCreateOrConnectWithoutUserInput!]
  create: [ReputationRecordCreateWithoutUserInput!]
  createMany: ReputationRecordCreateManyUserInputEnvelope
  delete: [ReputationRecordWhereUniqueInput!]
  deleteMany: [ReputationRecordScalarWhereInput!]
  disconnect: [ReputationRecordWhereUniqueInput!]
  set: [ReputationRecordWhereUniqueInput!]
  update: [ReputationRecordUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [ReputationRecordUpdateManyWithWhereWithoutUserInput!]
  upsert: [ReputationRecordUpsertWithWhereUniqueWithoutUserInput!]
}

input ReputationRecordUpdateManyWithoutVisionInput {
  connect: [ReputationRecordWhereUniqueInput!]
  connectOrCreate: [ReputationRecordCreateOrConnectWithoutVisionInput!]
  create: [ReputationRecordCreateWithoutVisionInput!]
  createMany: ReputationRecordCreateManyVisionInputEnvelope
  delete: [ReputationRecordWhereUniqueInput!]
  deleteMany: [ReputationRecordScalarWhereInput!]
  disconnect: [ReputationRecordWhereUniqueInput!]
  set: [ReputationRecordWhereUniqueInput!]
  update: [ReputationRecordUpdateWithWhereUniqueWithoutVisionInput!]
  updateMany: [ReputationRecordUpdateManyWithWhereWithoutVisionInput!]
  upsert: [ReputationRecordUpsertWithWhereUniqueWithoutVisionInput!]
}

input ReputationRecordUpdateWithWhereUniqueWithoutUserInput {
  data: ReputationRecordUpdateWithoutUserInput!
  where: ReputationRecordWhereUniqueInput!
}

input ReputationRecordUpdateWithWhereUniqueWithoutVisionInput {
  data: ReputationRecordUpdateWithoutVisionInput!
  where: ReputationRecordWhereUniqueInput!
}

input ReputationRecordUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  difference: IntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  reason: StringFieldUpdateOperationsInput
  vision: VisionUpdateOneRequiredWithoutReputationRecordsInput
}

input ReputationRecordUpdateWithoutVisionInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  difference: IntFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  reason: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutReputationRecordsInput
}

input ReputationRecordUpsertWithWhereUniqueWithoutUserInput {
  create: ReputationRecordCreateWithoutUserInput!
  update: ReputationRecordUpdateWithoutUserInput!
  where: ReputationRecordWhereUniqueInput!
}

input ReputationRecordUpsertWithWhereUniqueWithoutVisionInput {
  create: ReputationRecordCreateWithoutVisionInput!
  update: ReputationRecordUpdateWithoutVisionInput!
  where: ReputationRecordWhereUniqueInput!
}

input ReputationRecordWhereInput {
  AND: [ReputationRecordWhereInput!]
  NOT: [ReputationRecordWhereInput!]
  OR: [ReputationRecordWhereInput!]
  createdAt: DateTimeFilter
  difference: IntFilter
  id: StringFilter
  reason: StringFilter
  user: UserRelationFilter
  userId: StringFilter
  vision: VisionRelationFilter
  visionId: StringFilter
}

input ReputationRecordWhereUniqueInput {
  id: String
}

type Session {
  expires: DateTime!
  id: String!
  sessionToken: String!
  user: User!
  userId: String!
}

type SessionCountAggregate {
  _all: Int!
  expires: Int!
  id: Int!
  sessionToken: Int!
  userId: Int!
}

input SessionCountOrderByAggregateInput {
  expires: SortOrder
  id: SortOrder
  sessionToken: SortOrder
  userId: SortOrder
}

input SessionCreateInput {
  expires: DateTime!
  id: String
  sessionToken: String!
  user: UserCreateNestedOneWithoutSessionsInput!
}

input SessionCreateManyInput {
  expires: DateTime!
  id: String
  sessionToken: String!
  userId: String!
}

input SessionCreateManyUserInput {
  expires: DateTime!
  id: String
  sessionToken: String!
}

input SessionCreateManyUserInputEnvelope {
  data: [SessionCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input SessionCreateNestedManyWithoutUserInput {
  connect: [SessionWhereUniqueInput!]
  connectOrCreate: [SessionCreateOrConnectWithoutUserInput!]
  create: [SessionCreateWithoutUserInput!]
  createMany: SessionCreateManyUserInputEnvelope
}

input SessionCreateOrConnectWithoutUserInput {
  create: SessionCreateWithoutUserInput!
  where: SessionWhereUniqueInput!
}

input SessionCreateWithoutUserInput {
  expires: DateTime!
  id: String
  sessionToken: String!
}

type SessionGroupBy {
  _count: SessionCountAggregate
  _max: SessionMaxAggregate
  _min: SessionMinAggregate
  expires: DateTime!
  id: String!
  sessionToken: String!
  userId: String!
}

input SessionListRelationFilter {
  every: SessionWhereInput
  none: SessionWhereInput
  some: SessionWhereInput
}

type SessionMaxAggregate {
  expires: DateTime
  id: String
  sessionToken: String
  userId: String
}

input SessionMaxOrderByAggregateInput {
  expires: SortOrder
  id: SortOrder
  sessionToken: SortOrder
  userId: SortOrder
}

type SessionMinAggregate {
  expires: DateTime
  id: String
  sessionToken: String
  userId: String
}

input SessionMinOrderByAggregateInput {
  expires: SortOrder
  id: SortOrder
  sessionToken: SortOrder
  userId: SortOrder
}

input SessionOrderByRelationAggregateInput {
  _count: SortOrder
}

input SessionOrderByWithAggregationInput {
  _count: SessionCountOrderByAggregateInput
  _max: SessionMaxOrderByAggregateInput
  _min: SessionMinOrderByAggregateInput
  expires: SortOrder
  id: SortOrder
  sessionToken: SortOrder
  userId: SortOrder
}

input SessionOrderByWithRelationInput {
  expires: SortOrder
  id: SortOrder
  sessionToken: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum SessionScalarFieldEnum {
  expires
  id
  sessionToken
  userId
}

input SessionScalarWhereInput {
  AND: [SessionScalarWhereInput!]
  NOT: [SessionScalarWhereInput!]
  OR: [SessionScalarWhereInput!]
  expires: DateTimeFilter
  id: StringFilter
  sessionToken: StringFilter
  userId: StringFilter
}

input SessionScalarWhereWithAggregatesInput {
  AND: [SessionScalarWhereWithAggregatesInput!]
  NOT: [SessionScalarWhereWithAggregatesInput!]
  OR: [SessionScalarWhereWithAggregatesInput!]
  expires: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  sessionToken: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input SessionUpdateInput {
  expires: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  sessionToken: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutSessionsInput
}

input SessionUpdateManyMutationInput {
  expires: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  sessionToken: StringFieldUpdateOperationsInput
}

input SessionUpdateManyWithWhereWithoutUserInput {
  data: SessionUpdateManyMutationInput!
  where: SessionScalarWhereInput!
}

input SessionUpdateManyWithoutUserInput {
  connect: [SessionWhereUniqueInput!]
  connectOrCreate: [SessionCreateOrConnectWithoutUserInput!]
  create: [SessionCreateWithoutUserInput!]
  createMany: SessionCreateManyUserInputEnvelope
  delete: [SessionWhereUniqueInput!]
  deleteMany: [SessionScalarWhereInput!]
  disconnect: [SessionWhereUniqueInput!]
  set: [SessionWhereUniqueInput!]
  update: [SessionUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [SessionUpdateManyWithWhereWithoutUserInput!]
  upsert: [SessionUpsertWithWhereUniqueWithoutUserInput!]
}

input SessionUpdateWithWhereUniqueWithoutUserInput {
  data: SessionUpdateWithoutUserInput!
  where: SessionWhereUniqueInput!
}

input SessionUpdateWithoutUserInput {
  expires: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  sessionToken: StringFieldUpdateOperationsInput
}

input SessionUpsertWithWhereUniqueWithoutUserInput {
  create: SessionCreateWithoutUserInput!
  update: SessionUpdateWithoutUserInput!
  where: SessionWhereUniqueInput!
}

input SessionWhereInput {
  AND: [SessionWhereInput!]
  NOT: [SessionWhereInput!]
  OR: [SessionWhereInput!]
  expires: DateTimeFilter
  id: StringFilter
  sessionToken: StringFilter
  user: UserRelationFilter
  userId: StringFilter
}

input SessionWhereUniqueInput {
  id: String
  sessionToken: String
}

type Snapshot {
  _count: SnapshotCount
  caption: String!
  createdAt: DateTime!
  id: String!
  references(cursor: ReferenceWhereUniqueInput, distinct: [ReferenceScalarFieldEnum!], orderBy: [ReferenceOrderByWithRelationInput!], skip: Int, take: Int, where: ReferenceWhereInput): [Reference!]!
  s3Url: String!
  sourceUrl: String!
  updatedAt: DateTime!
  versionId: String!
}

type SnapshotCount {
  references: Int!
}

type SnapshotCountAggregate {
  _all: Int!
  caption: Int!
  createdAt: Int!
  id: Int!
  s3Url: Int!
  sourceUrl: Int!
  updatedAt: Int!
  versionId: Int!
}

input SnapshotCountOrderByAggregateInput {
  caption: SortOrder
  createdAt: SortOrder
  id: SortOrder
  s3Url: SortOrder
  sourceUrl: SortOrder
  updatedAt: SortOrder
  versionId: SortOrder
}

input SnapshotCreateInput {
  caption: String!
  createdAt: DateTime
  id: String
  references: ReferenceCreateNestedManyWithoutSnapshotsInput
  s3Url: String!
  sourceUrl: String!
  updatedAt: DateTime
  versionId: String!
}

input SnapshotCreateManyInput {
  caption: String!
  createdAt: DateTime
  id: String
  s3Url: String!
  sourceUrl: String!
  updatedAt: DateTime
  versionId: String!
}

input SnapshotCreateNestedManyWithoutReferencesInput {
  connect: [SnapshotWhereUniqueInput!]
  connectOrCreate: [SnapshotCreateOrConnectWithoutReferencesInput!]
  create: [SnapshotCreateWithoutReferencesInput!]
}

input SnapshotCreateOrConnectWithoutReferencesInput {
  create: SnapshotCreateWithoutReferencesInput!
  where: SnapshotWhereUniqueInput!
}

input SnapshotCreateWithoutReferencesInput {
  caption: String!
  createdAt: DateTime
  id: String
  s3Url: String!
  sourceUrl: String!
  updatedAt: DateTime
  versionId: String!
}

type SnapshotGroupBy {
  _count: SnapshotCountAggregate
  _max: SnapshotMaxAggregate
  _min: SnapshotMinAggregate
  caption: String!
  createdAt: DateTime!
  id: String!
  s3Url: String!
  sourceUrl: String!
  updatedAt: DateTime!
  versionId: String!
}

input SnapshotListRelationFilter {
  every: SnapshotWhereInput
  none: SnapshotWhereInput
  some: SnapshotWhereInput
}

type SnapshotMaxAggregate {
  caption: String
  createdAt: DateTime
  id: String
  s3Url: String
  sourceUrl: String
  updatedAt: DateTime
  versionId: String
}

input SnapshotMaxOrderByAggregateInput {
  caption: SortOrder
  createdAt: SortOrder
  id: SortOrder
  s3Url: SortOrder
  sourceUrl: SortOrder
  updatedAt: SortOrder
  versionId: SortOrder
}

type SnapshotMinAggregate {
  caption: String
  createdAt: DateTime
  id: String
  s3Url: String
  sourceUrl: String
  updatedAt: DateTime
  versionId: String
}

input SnapshotMinOrderByAggregateInput {
  caption: SortOrder
  createdAt: SortOrder
  id: SortOrder
  s3Url: SortOrder
  sourceUrl: SortOrder
  updatedAt: SortOrder
  versionId: SortOrder
}

input SnapshotOrderByRelationAggregateInput {
  _count: SortOrder
}

input SnapshotOrderByWithAggregationInput {
  _count: SnapshotCountOrderByAggregateInput
  _max: SnapshotMaxOrderByAggregateInput
  _min: SnapshotMinOrderByAggregateInput
  caption: SortOrder
  createdAt: SortOrder
  id: SortOrder
  s3Url: SortOrder
  sourceUrl: SortOrder
  updatedAt: SortOrder
  versionId: SortOrder
}

input SnapshotOrderByWithRelationInput {
  caption: SortOrder
  createdAt: SortOrder
  id: SortOrder
  references: ReferenceOrderByRelationAggregateInput
  s3Url: SortOrder
  sourceUrl: SortOrder
  updatedAt: SortOrder
  versionId: SortOrder
}

enum SnapshotScalarFieldEnum {
  caption
  createdAt
  id
  s3Url
  sourceUrl
  updatedAt
  versionId
}

input SnapshotScalarWhereInput {
  AND: [SnapshotScalarWhereInput!]
  NOT: [SnapshotScalarWhereInput!]
  OR: [SnapshotScalarWhereInput!]
  caption: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  s3Url: StringFilter
  sourceUrl: StringFilter
  updatedAt: DateTimeFilter
  versionId: StringFilter
}

input SnapshotScalarWhereWithAggregatesInput {
  AND: [SnapshotScalarWhereWithAggregatesInput!]
  NOT: [SnapshotScalarWhereWithAggregatesInput!]
  OR: [SnapshotScalarWhereWithAggregatesInput!]
  caption: StringWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  s3Url: StringWithAggregatesFilter
  sourceUrl: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  versionId: StringWithAggregatesFilter
}

input SnapshotUpdateInput {
  caption: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  references: ReferenceUpdateManyWithoutSnapshotsInput
  s3Url: StringFieldUpdateOperationsInput
  sourceUrl: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  versionId: StringFieldUpdateOperationsInput
}

input SnapshotUpdateManyMutationInput {
  caption: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  s3Url: StringFieldUpdateOperationsInput
  sourceUrl: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  versionId: StringFieldUpdateOperationsInput
}

input SnapshotUpdateManyWithWhereWithoutReferencesInput {
  data: SnapshotUpdateManyMutationInput!
  where: SnapshotScalarWhereInput!
}

input SnapshotUpdateManyWithoutReferencesInput {
  connect: [SnapshotWhereUniqueInput!]
  connectOrCreate: [SnapshotCreateOrConnectWithoutReferencesInput!]
  create: [SnapshotCreateWithoutReferencesInput!]
  delete: [SnapshotWhereUniqueInput!]
  deleteMany: [SnapshotScalarWhereInput!]
  disconnect: [SnapshotWhereUniqueInput!]
  set: [SnapshotWhereUniqueInput!]
  update: [SnapshotUpdateWithWhereUniqueWithoutReferencesInput!]
  updateMany: [SnapshotUpdateManyWithWhereWithoutReferencesInput!]
  upsert: [SnapshotUpsertWithWhereUniqueWithoutReferencesInput!]
}

input SnapshotUpdateWithWhereUniqueWithoutReferencesInput {
  data: SnapshotUpdateWithoutReferencesInput!
  where: SnapshotWhereUniqueInput!
}

input SnapshotUpdateWithoutReferencesInput {
  caption: StringFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  s3Url: StringFieldUpdateOperationsInput
  sourceUrl: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  versionId: StringFieldUpdateOperationsInput
}

input SnapshotUpsertWithWhereUniqueWithoutReferencesInput {
  create: SnapshotCreateWithoutReferencesInput!
  update: SnapshotUpdateWithoutReferencesInput!
  where: SnapshotWhereUniqueInput!
}

input SnapshotWhereInput {
  AND: [SnapshotWhereInput!]
  NOT: [SnapshotWhereInput!]
  OR: [SnapshotWhereInput!]
  caption: StringFilter
  createdAt: DateTimeFilter
  id: StringFilter
  references: ReferenceListRelationFilter
  s3Url: StringFilter
  sourceUrl: StringFilter
  updatedAt: DateTimeFilter
  versionId: StringFilter
}

input SnapshotWhereUniqueInput {
  id: String
}

enum SortOrder {
  asc
  desc
}

input StringFieldUpdateOperationsInput {
  set: String
}

input StringFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableFilter {
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableFilter
  notIn: [String!]
  startsWith: String
}

input StringNullableWithAggregatesFilter {
  _count: NestedIntNullableFilter
  _max: NestedStringNullableFilter
  _min: NestedStringNullableFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringNullableWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

input StringWithAggregatesFilter {
  _count: NestedIntFilter
  _max: NestedStringFilter
  _min: NestedStringFilter
  contains: String
  endsWith: String
  equals: String
  gt: String
  gte: String
  in: [String!]
  lt: String
  lte: String
  mode: QueryMode
  not: NestedStringWithAggregatesFilter
  notIn: [String!]
  startsWith: String
}

enum SubscriptionStatus {
  ACTIVE
  INACTIVE
}

enum SubscriptionType {
  AUTO
  MANUAL
  OFF
}

type SubscriptionsOnPremises {
  createdAt: DateTime!
  hasUnreadNotifications: Boolean!
  lastReadAt: DateTime!
  premise: Premise!
  premiseId: String!
  status: SubscriptionStatus!
  type: SubscriptionType!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type SubscriptionsOnPremisesCountAggregate {
  _all: Int!
  createdAt: Int!
  hasUnreadNotifications: Int!
  lastReadAt: Int!
  premiseId: Int!
  status: Int!
  type: Int!
  updatedAt: Int!
  userId: Int!
}

input SubscriptionsOnPremisesCountOrderByAggregateInput {
  createdAt: SortOrder
  hasUnreadNotifications: SortOrder
  lastReadAt: SortOrder
  premiseId: SortOrder
  status: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input SubscriptionsOnPremisesCreateInput {
  createdAt: DateTime
  hasUnreadNotifications: Boolean
  lastReadAt: DateTime
  premise: PremiseCreateNestedOneWithoutSubscriptionsOnPremisesInput!
  status: SubscriptionStatus
  type: SubscriptionType
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutSubscriptionsOnPremisesInput!
}

input SubscriptionsOnPremisesCreateManyInput {
  createdAt: DateTime
  hasUnreadNotifications: Boolean
  lastReadAt: DateTime
  premiseId: String!
  status: SubscriptionStatus
  type: SubscriptionType
  updatedAt: DateTime
  userId: String!
}

input SubscriptionsOnPremisesCreateManyPremiseInput {
  createdAt: DateTime
  hasUnreadNotifications: Boolean
  lastReadAt: DateTime
  status: SubscriptionStatus
  type: SubscriptionType
  updatedAt: DateTime
  userId: String!
}

input SubscriptionsOnPremisesCreateManyPremiseInputEnvelope {
  data: [SubscriptionsOnPremisesCreateManyPremiseInput!]!
  skipDuplicates: Boolean
}

input SubscriptionsOnPremisesCreateManyUserInput {
  createdAt: DateTime
  hasUnreadNotifications: Boolean
  lastReadAt: DateTime
  premiseId: String!
  status: SubscriptionStatus
  type: SubscriptionType
  updatedAt: DateTime
}

input SubscriptionsOnPremisesCreateManyUserInputEnvelope {
  data: [SubscriptionsOnPremisesCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input SubscriptionsOnPremisesCreateNestedManyWithoutPremiseInput {
  connect: [SubscriptionsOnPremisesWhereUniqueInput!]
  connectOrCreate: [SubscriptionsOnPremisesCreateOrConnectWithoutPremiseInput!]
  create: [SubscriptionsOnPremisesCreateWithoutPremiseInput!]
  createMany: SubscriptionsOnPremisesCreateManyPremiseInputEnvelope
}

input SubscriptionsOnPremisesCreateNestedManyWithoutUserInput {
  connect: [SubscriptionsOnPremisesWhereUniqueInput!]
  connectOrCreate: [SubscriptionsOnPremisesCreateOrConnectWithoutUserInput!]
  create: [SubscriptionsOnPremisesCreateWithoutUserInput!]
  createMany: SubscriptionsOnPremisesCreateManyUserInputEnvelope
}

input SubscriptionsOnPremisesCreateOrConnectWithoutPremiseInput {
  create: SubscriptionsOnPremisesCreateWithoutPremiseInput!
  where: SubscriptionsOnPremisesWhereUniqueInput!
}

input SubscriptionsOnPremisesCreateOrConnectWithoutUserInput {
  create: SubscriptionsOnPremisesCreateWithoutUserInput!
  where: SubscriptionsOnPremisesWhereUniqueInput!
}

input SubscriptionsOnPremisesCreateWithoutPremiseInput {
  createdAt: DateTime
  hasUnreadNotifications: Boolean
  lastReadAt: DateTime
  status: SubscriptionStatus
  type: SubscriptionType
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutSubscriptionsOnPremisesInput!
}

input SubscriptionsOnPremisesCreateWithoutUserInput {
  createdAt: DateTime
  hasUnreadNotifications: Boolean
  lastReadAt: DateTime
  premise: PremiseCreateNestedOneWithoutSubscriptionsOnPremisesInput!
  status: SubscriptionStatus
  type: SubscriptionType
  updatedAt: DateTime
}

type SubscriptionsOnPremisesGroupBy {
  _count: SubscriptionsOnPremisesCountAggregate
  _max: SubscriptionsOnPremisesMaxAggregate
  _min: SubscriptionsOnPremisesMinAggregate
  createdAt: DateTime!
  hasUnreadNotifications: Boolean!
  lastReadAt: DateTime!
  premiseId: String!
  status: SubscriptionStatus!
  type: SubscriptionType!
  updatedAt: DateTime!
  userId: String!
}

input SubscriptionsOnPremisesListRelationFilter {
  every: SubscriptionsOnPremisesWhereInput
  none: SubscriptionsOnPremisesWhereInput
  some: SubscriptionsOnPremisesWhereInput
}

type SubscriptionsOnPremisesMaxAggregate {
  createdAt: DateTime
  hasUnreadNotifications: Boolean
  lastReadAt: DateTime
  premiseId: String
  status: SubscriptionStatus
  type: SubscriptionType
  updatedAt: DateTime
  userId: String
}

input SubscriptionsOnPremisesMaxOrderByAggregateInput {
  createdAt: SortOrder
  hasUnreadNotifications: SortOrder
  lastReadAt: SortOrder
  premiseId: SortOrder
  status: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type SubscriptionsOnPremisesMinAggregate {
  createdAt: DateTime
  hasUnreadNotifications: Boolean
  lastReadAt: DateTime
  premiseId: String
  status: SubscriptionStatus
  type: SubscriptionType
  updatedAt: DateTime
  userId: String
}

input SubscriptionsOnPremisesMinOrderByAggregateInput {
  createdAt: SortOrder
  hasUnreadNotifications: SortOrder
  lastReadAt: SortOrder
  premiseId: SortOrder
  status: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input SubscriptionsOnPremisesOrderByRelationAggregateInput {
  _count: SortOrder
}

input SubscriptionsOnPremisesOrderByWithAggregationInput {
  _count: SubscriptionsOnPremisesCountOrderByAggregateInput
  _max: SubscriptionsOnPremisesMaxOrderByAggregateInput
  _min: SubscriptionsOnPremisesMinOrderByAggregateInput
  createdAt: SortOrder
  hasUnreadNotifications: SortOrder
  lastReadAt: SortOrder
  premiseId: SortOrder
  status: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input SubscriptionsOnPremisesOrderByWithRelationInput {
  createdAt: SortOrder
  hasUnreadNotifications: SortOrder
  lastReadAt: SortOrder
  premise: PremiseOrderByWithRelationInput
  premiseId: SortOrder
  status: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum SubscriptionsOnPremisesScalarFieldEnum {
  createdAt
  hasUnreadNotifications
  lastReadAt
  premiseId
  status
  type
  updatedAt
  userId
}

input SubscriptionsOnPremisesScalarWhereInput {
  AND: [SubscriptionsOnPremisesScalarWhereInput!]
  NOT: [SubscriptionsOnPremisesScalarWhereInput!]
  OR: [SubscriptionsOnPremisesScalarWhereInput!]
  createdAt: DateTimeFilter
  hasUnreadNotifications: BoolFilter
  lastReadAt: DateTimeFilter
  premiseId: StringFilter
  status: EnumSubscriptionStatusFilter
  type: EnumSubscriptionTypeFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input SubscriptionsOnPremisesScalarWhereWithAggregatesInput {
  AND: [SubscriptionsOnPremisesScalarWhereWithAggregatesInput!]
  NOT: [SubscriptionsOnPremisesScalarWhereWithAggregatesInput!]
  OR: [SubscriptionsOnPremisesScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  hasUnreadNotifications: BoolWithAggregatesFilter
  lastReadAt: DateTimeWithAggregatesFilter
  premiseId: StringWithAggregatesFilter
  status: EnumSubscriptionStatusWithAggregatesFilter
  type: EnumSubscriptionTypeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input SubscriptionsOnPremisesUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  hasUnreadNotifications: BoolFieldUpdateOperationsInput
  lastReadAt: DateTimeFieldUpdateOperationsInput
  premise: PremiseUpdateOneRequiredWithoutSubscriptionsOnPremisesInput
  status: EnumSubscriptionStatusFieldUpdateOperationsInput
  type: EnumSubscriptionTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutSubscriptionsOnPremisesInput
}

input SubscriptionsOnPremisesUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  hasUnreadNotifications: BoolFieldUpdateOperationsInput
  lastReadAt: DateTimeFieldUpdateOperationsInput
  status: EnumSubscriptionStatusFieldUpdateOperationsInput
  type: EnumSubscriptionTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SubscriptionsOnPremisesUpdateManyWithWhereWithoutPremiseInput {
  data: SubscriptionsOnPremisesUpdateManyMutationInput!
  where: SubscriptionsOnPremisesScalarWhereInput!
}

input SubscriptionsOnPremisesUpdateManyWithWhereWithoutUserInput {
  data: SubscriptionsOnPremisesUpdateManyMutationInput!
  where: SubscriptionsOnPremisesScalarWhereInput!
}

input SubscriptionsOnPremisesUpdateManyWithoutPremiseInput {
  connect: [SubscriptionsOnPremisesWhereUniqueInput!]
  connectOrCreate: [SubscriptionsOnPremisesCreateOrConnectWithoutPremiseInput!]
  create: [SubscriptionsOnPremisesCreateWithoutPremiseInput!]
  createMany: SubscriptionsOnPremisesCreateManyPremiseInputEnvelope
  delete: [SubscriptionsOnPremisesWhereUniqueInput!]
  deleteMany: [SubscriptionsOnPremisesScalarWhereInput!]
  disconnect: [SubscriptionsOnPremisesWhereUniqueInput!]
  set: [SubscriptionsOnPremisesWhereUniqueInput!]
  update: [SubscriptionsOnPremisesUpdateWithWhereUniqueWithoutPremiseInput!]
  updateMany: [SubscriptionsOnPremisesUpdateManyWithWhereWithoutPremiseInput!]
  upsert: [SubscriptionsOnPremisesUpsertWithWhereUniqueWithoutPremiseInput!]
}

input SubscriptionsOnPremisesUpdateManyWithoutUserInput {
  connect: [SubscriptionsOnPremisesWhereUniqueInput!]
  connectOrCreate: [SubscriptionsOnPremisesCreateOrConnectWithoutUserInput!]
  create: [SubscriptionsOnPremisesCreateWithoutUserInput!]
  createMany: SubscriptionsOnPremisesCreateManyUserInputEnvelope
  delete: [SubscriptionsOnPremisesWhereUniqueInput!]
  deleteMany: [SubscriptionsOnPremisesScalarWhereInput!]
  disconnect: [SubscriptionsOnPremisesWhereUniqueInput!]
  set: [SubscriptionsOnPremisesWhereUniqueInput!]
  update: [SubscriptionsOnPremisesUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [SubscriptionsOnPremisesUpdateManyWithWhereWithoutUserInput!]
  upsert: [SubscriptionsOnPremisesUpsertWithWhereUniqueWithoutUserInput!]
}

input SubscriptionsOnPremisesUpdateWithWhereUniqueWithoutPremiseInput {
  data: SubscriptionsOnPremisesUpdateWithoutPremiseInput!
  where: SubscriptionsOnPremisesWhereUniqueInput!
}

input SubscriptionsOnPremisesUpdateWithWhereUniqueWithoutUserInput {
  data: SubscriptionsOnPremisesUpdateWithoutUserInput!
  where: SubscriptionsOnPremisesWhereUniqueInput!
}

input SubscriptionsOnPremisesUpdateWithoutPremiseInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  hasUnreadNotifications: BoolFieldUpdateOperationsInput
  lastReadAt: DateTimeFieldUpdateOperationsInput
  status: EnumSubscriptionStatusFieldUpdateOperationsInput
  type: EnumSubscriptionTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutSubscriptionsOnPremisesInput
}

input SubscriptionsOnPremisesUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  hasUnreadNotifications: BoolFieldUpdateOperationsInput
  lastReadAt: DateTimeFieldUpdateOperationsInput
  premise: PremiseUpdateOneRequiredWithoutSubscriptionsOnPremisesInput
  status: EnumSubscriptionStatusFieldUpdateOperationsInput
  type: EnumSubscriptionTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SubscriptionsOnPremisesUpsertWithWhereUniqueWithoutPremiseInput {
  create: SubscriptionsOnPremisesCreateWithoutPremiseInput!
  update: SubscriptionsOnPremisesUpdateWithoutPremiseInput!
  where: SubscriptionsOnPremisesWhereUniqueInput!
}

input SubscriptionsOnPremisesUpsertWithWhereUniqueWithoutUserInput {
  create: SubscriptionsOnPremisesCreateWithoutUserInput!
  update: SubscriptionsOnPremisesUpdateWithoutUserInput!
  where: SubscriptionsOnPremisesWhereUniqueInput!
}

input SubscriptionsOnPremisesUserIdPremiseIdCompoundUniqueInput {
  premiseId: String!
  userId: String!
}

input SubscriptionsOnPremisesWhereInput {
  AND: [SubscriptionsOnPremisesWhereInput!]
  NOT: [SubscriptionsOnPremisesWhereInput!]
  OR: [SubscriptionsOnPremisesWhereInput!]
  createdAt: DateTimeFilter
  hasUnreadNotifications: BoolFilter
  lastReadAt: DateTimeFilter
  premise: PremiseRelationFilter
  premiseId: StringFilter
  status: EnumSubscriptionStatusFilter
  type: EnumSubscriptionTypeFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input SubscriptionsOnPremisesWhereUniqueInput {
  userId_premiseId: SubscriptionsOnPremisesUserIdPremiseIdCompoundUniqueInput
}

type SubscriptionsOnTimelines {
  createdAt: DateTime!
  hasUnreadNotifications: Boolean!
  lastReadAt: DateTime!
  timeline: Timeline!
  timelineId: String!
  type: SubscriptionType!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

type SubscriptionsOnTimelinesCountAggregate {
  _all: Int!
  createdAt: Int!
  hasUnreadNotifications: Int!
  lastReadAt: Int!
  timelineId: Int!
  type: Int!
  updatedAt: Int!
  userId: Int!
}

input SubscriptionsOnTimelinesCountOrderByAggregateInput {
  createdAt: SortOrder
  hasUnreadNotifications: SortOrder
  lastReadAt: SortOrder
  timelineId: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input SubscriptionsOnTimelinesCreateInput {
  createdAt: DateTime
  hasUnreadNotifications: Boolean
  lastReadAt: DateTime
  timeline: TimelineCreateNestedOneWithoutSubscriptionsOnTimelinesInput!
  type: SubscriptionType
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutSubscriptionsOnTimelinesInput!
}

input SubscriptionsOnTimelinesCreateManyInput {
  createdAt: DateTime
  hasUnreadNotifications: Boolean
  lastReadAt: DateTime
  timelineId: String!
  type: SubscriptionType
  updatedAt: DateTime
  userId: String!
}

input SubscriptionsOnTimelinesCreateManyTimelineInput {
  createdAt: DateTime
  hasUnreadNotifications: Boolean
  lastReadAt: DateTime
  type: SubscriptionType
  updatedAt: DateTime
  userId: String!
}

input SubscriptionsOnTimelinesCreateManyTimelineInputEnvelope {
  data: [SubscriptionsOnTimelinesCreateManyTimelineInput!]!
  skipDuplicates: Boolean
}

input SubscriptionsOnTimelinesCreateManyUserInput {
  createdAt: DateTime
  hasUnreadNotifications: Boolean
  lastReadAt: DateTime
  timelineId: String!
  type: SubscriptionType
  updatedAt: DateTime
}

input SubscriptionsOnTimelinesCreateManyUserInputEnvelope {
  data: [SubscriptionsOnTimelinesCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input SubscriptionsOnTimelinesCreateNestedManyWithoutTimelineInput {
  connect: [SubscriptionsOnTimelinesWhereUniqueInput!]
  connectOrCreate: [SubscriptionsOnTimelinesCreateOrConnectWithoutTimelineInput!]
  create: [SubscriptionsOnTimelinesCreateWithoutTimelineInput!]
  createMany: SubscriptionsOnTimelinesCreateManyTimelineInputEnvelope
}

input SubscriptionsOnTimelinesCreateNestedManyWithoutUserInput {
  connect: [SubscriptionsOnTimelinesWhereUniqueInput!]
  connectOrCreate: [SubscriptionsOnTimelinesCreateOrConnectWithoutUserInput!]
  create: [SubscriptionsOnTimelinesCreateWithoutUserInput!]
  createMany: SubscriptionsOnTimelinesCreateManyUserInputEnvelope
}

input SubscriptionsOnTimelinesCreateOrConnectWithoutTimelineInput {
  create: SubscriptionsOnTimelinesCreateWithoutTimelineInput!
  where: SubscriptionsOnTimelinesWhereUniqueInput!
}

input SubscriptionsOnTimelinesCreateOrConnectWithoutUserInput {
  create: SubscriptionsOnTimelinesCreateWithoutUserInput!
  where: SubscriptionsOnTimelinesWhereUniqueInput!
}

input SubscriptionsOnTimelinesCreateWithoutTimelineInput {
  createdAt: DateTime
  hasUnreadNotifications: Boolean
  lastReadAt: DateTime
  type: SubscriptionType
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutSubscriptionsOnTimelinesInput!
}

input SubscriptionsOnTimelinesCreateWithoutUserInput {
  createdAt: DateTime
  hasUnreadNotifications: Boolean
  lastReadAt: DateTime
  timeline: TimelineCreateNestedOneWithoutSubscriptionsOnTimelinesInput!
  type: SubscriptionType
  updatedAt: DateTime
}

type SubscriptionsOnTimelinesGroupBy {
  _count: SubscriptionsOnTimelinesCountAggregate
  _max: SubscriptionsOnTimelinesMaxAggregate
  _min: SubscriptionsOnTimelinesMinAggregate
  createdAt: DateTime!
  hasUnreadNotifications: Boolean!
  lastReadAt: DateTime!
  timelineId: String!
  type: SubscriptionType!
  updatedAt: DateTime!
  userId: String!
}

input SubscriptionsOnTimelinesListRelationFilter {
  every: SubscriptionsOnTimelinesWhereInput
  none: SubscriptionsOnTimelinesWhereInput
  some: SubscriptionsOnTimelinesWhereInput
}

type SubscriptionsOnTimelinesMaxAggregate {
  createdAt: DateTime
  hasUnreadNotifications: Boolean
  lastReadAt: DateTime
  timelineId: String
  type: SubscriptionType
  updatedAt: DateTime
  userId: String
}

input SubscriptionsOnTimelinesMaxOrderByAggregateInput {
  createdAt: SortOrder
  hasUnreadNotifications: SortOrder
  lastReadAt: SortOrder
  timelineId: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

type SubscriptionsOnTimelinesMinAggregate {
  createdAt: DateTime
  hasUnreadNotifications: Boolean
  lastReadAt: DateTime
  timelineId: String
  type: SubscriptionType
  updatedAt: DateTime
  userId: String
}

input SubscriptionsOnTimelinesMinOrderByAggregateInput {
  createdAt: SortOrder
  hasUnreadNotifications: SortOrder
  lastReadAt: SortOrder
  timelineId: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input SubscriptionsOnTimelinesOrderByRelationAggregateInput {
  _count: SortOrder
}

input SubscriptionsOnTimelinesOrderByWithAggregationInput {
  _count: SubscriptionsOnTimelinesCountOrderByAggregateInput
  _max: SubscriptionsOnTimelinesMaxOrderByAggregateInput
  _min: SubscriptionsOnTimelinesMinOrderByAggregateInput
  createdAt: SortOrder
  hasUnreadNotifications: SortOrder
  lastReadAt: SortOrder
  timelineId: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
}

input SubscriptionsOnTimelinesOrderByWithRelationInput {
  createdAt: SortOrder
  hasUnreadNotifications: SortOrder
  lastReadAt: SortOrder
  timeline: TimelineOrderByWithRelationInput
  timelineId: SortOrder
  type: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
}

enum SubscriptionsOnTimelinesScalarFieldEnum {
  createdAt
  hasUnreadNotifications
  lastReadAt
  timelineId
  type
  updatedAt
  userId
}

input SubscriptionsOnTimelinesScalarWhereInput {
  AND: [SubscriptionsOnTimelinesScalarWhereInput!]
  NOT: [SubscriptionsOnTimelinesScalarWhereInput!]
  OR: [SubscriptionsOnTimelinesScalarWhereInput!]
  createdAt: DateTimeFilter
  hasUnreadNotifications: BoolFilter
  lastReadAt: DateTimeFilter
  timelineId: StringFilter
  type: EnumSubscriptionTypeFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
}

input SubscriptionsOnTimelinesScalarWhereWithAggregatesInput {
  AND: [SubscriptionsOnTimelinesScalarWhereWithAggregatesInput!]
  NOT: [SubscriptionsOnTimelinesScalarWhereWithAggregatesInput!]
  OR: [SubscriptionsOnTimelinesScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  hasUnreadNotifications: BoolWithAggregatesFilter
  lastReadAt: DateTimeWithAggregatesFilter
  timelineId: StringWithAggregatesFilter
  type: EnumSubscriptionTypeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: StringWithAggregatesFilter
}

input SubscriptionsOnTimelinesUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  hasUnreadNotifications: BoolFieldUpdateOperationsInput
  lastReadAt: DateTimeFieldUpdateOperationsInput
  timeline: TimelineUpdateOneRequiredWithoutSubscriptionsOnTimelinesInput
  type: EnumSubscriptionTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutSubscriptionsOnTimelinesInput
}

input SubscriptionsOnTimelinesUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  hasUnreadNotifications: BoolFieldUpdateOperationsInput
  lastReadAt: DateTimeFieldUpdateOperationsInput
  type: EnumSubscriptionTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SubscriptionsOnTimelinesUpdateManyWithWhereWithoutTimelineInput {
  data: SubscriptionsOnTimelinesUpdateManyMutationInput!
  where: SubscriptionsOnTimelinesScalarWhereInput!
}

input SubscriptionsOnTimelinesUpdateManyWithWhereWithoutUserInput {
  data: SubscriptionsOnTimelinesUpdateManyMutationInput!
  where: SubscriptionsOnTimelinesScalarWhereInput!
}

input SubscriptionsOnTimelinesUpdateManyWithoutTimelineInput {
  connect: [SubscriptionsOnTimelinesWhereUniqueInput!]
  connectOrCreate: [SubscriptionsOnTimelinesCreateOrConnectWithoutTimelineInput!]
  create: [SubscriptionsOnTimelinesCreateWithoutTimelineInput!]
  createMany: SubscriptionsOnTimelinesCreateManyTimelineInputEnvelope
  delete: [SubscriptionsOnTimelinesWhereUniqueInput!]
  deleteMany: [SubscriptionsOnTimelinesScalarWhereInput!]
  disconnect: [SubscriptionsOnTimelinesWhereUniqueInput!]
  set: [SubscriptionsOnTimelinesWhereUniqueInput!]
  update: [SubscriptionsOnTimelinesUpdateWithWhereUniqueWithoutTimelineInput!]
  updateMany: [SubscriptionsOnTimelinesUpdateManyWithWhereWithoutTimelineInput!]
  upsert: [SubscriptionsOnTimelinesUpsertWithWhereUniqueWithoutTimelineInput!]
}

input SubscriptionsOnTimelinesUpdateManyWithoutUserInput {
  connect: [SubscriptionsOnTimelinesWhereUniqueInput!]
  connectOrCreate: [SubscriptionsOnTimelinesCreateOrConnectWithoutUserInput!]
  create: [SubscriptionsOnTimelinesCreateWithoutUserInput!]
  createMany: SubscriptionsOnTimelinesCreateManyUserInputEnvelope
  delete: [SubscriptionsOnTimelinesWhereUniqueInput!]
  deleteMany: [SubscriptionsOnTimelinesScalarWhereInput!]
  disconnect: [SubscriptionsOnTimelinesWhereUniqueInput!]
  set: [SubscriptionsOnTimelinesWhereUniqueInput!]
  update: [SubscriptionsOnTimelinesUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [SubscriptionsOnTimelinesUpdateManyWithWhereWithoutUserInput!]
  upsert: [SubscriptionsOnTimelinesUpsertWithWhereUniqueWithoutUserInput!]
}

input SubscriptionsOnTimelinesUpdateWithWhereUniqueWithoutTimelineInput {
  data: SubscriptionsOnTimelinesUpdateWithoutTimelineInput!
  where: SubscriptionsOnTimelinesWhereUniqueInput!
}

input SubscriptionsOnTimelinesUpdateWithWhereUniqueWithoutUserInput {
  data: SubscriptionsOnTimelinesUpdateWithoutUserInput!
  where: SubscriptionsOnTimelinesWhereUniqueInput!
}

input SubscriptionsOnTimelinesUpdateWithoutTimelineInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  hasUnreadNotifications: BoolFieldUpdateOperationsInput
  lastReadAt: DateTimeFieldUpdateOperationsInput
  type: EnumSubscriptionTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutSubscriptionsOnTimelinesInput
}

input SubscriptionsOnTimelinesUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  hasUnreadNotifications: BoolFieldUpdateOperationsInput
  lastReadAt: DateTimeFieldUpdateOperationsInput
  timeline: TimelineUpdateOneRequiredWithoutSubscriptionsOnTimelinesInput
  type: EnumSubscriptionTypeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input SubscriptionsOnTimelinesUpsertWithWhereUniqueWithoutTimelineInput {
  create: SubscriptionsOnTimelinesCreateWithoutTimelineInput!
  update: SubscriptionsOnTimelinesUpdateWithoutTimelineInput!
  where: SubscriptionsOnTimelinesWhereUniqueInput!
}

input SubscriptionsOnTimelinesUpsertWithWhereUniqueWithoutUserInput {
  create: SubscriptionsOnTimelinesCreateWithoutUserInput!
  update: SubscriptionsOnTimelinesUpdateWithoutUserInput!
  where: SubscriptionsOnTimelinesWhereUniqueInput!
}

input SubscriptionsOnTimelinesUserIdTimelineIdCompoundUniqueInput {
  timelineId: String!
  userId: String!
}

input SubscriptionsOnTimelinesWhereInput {
  AND: [SubscriptionsOnTimelinesWhereInput!]
  NOT: [SubscriptionsOnTimelinesWhereInput!]
  OR: [SubscriptionsOnTimelinesWhereInput!]
  createdAt: DateTimeFilter
  hasUnreadNotifications: BoolFilter
  lastReadAt: DateTimeFilter
  timeline: TimelineRelationFilter
  timelineId: StringFilter
  type: EnumSubscriptionTypeFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
}

input SubscriptionsOnTimelinesWhereUniqueInput {
  userId_timelineId: SubscriptionsOnTimelinesUserIdTimelineIdCompoundUniqueInput
}

type Tag {
  _count: TagCount
  id: Int!
  label: String!
  tagsOnPremises(cursor: TagsOnPremisesWhereUniqueInput, distinct: [TagsOnPremisesScalarFieldEnum!], orderBy: [TagsOnPremisesOrderByWithRelationInput!], skip: Int, take: Int, where: TagsOnPremisesWhereInput): [TagsOnPremises!]!
  tagsOnTimelines(cursor: TagsOnTimelinesWhereUniqueInput, distinct: [TagsOnTimelinesScalarFieldEnum!], orderBy: [TagsOnTimelinesOrderByWithRelationInput!], skip: Int, take: Int, where: TagsOnTimelinesWhereInput): [TagsOnTimelines!]!
  tagsOnVisions(cursor: TagsOnVisionsWhereUniqueInput, distinct: [TagsOnVisionsScalarFieldEnum!], orderBy: [TagsOnVisionsOrderByWithRelationInput!], skip: Int, take: Int, where: TagsOnVisionsWhereInput): [TagsOnVisions!]!
}

type TagAvgAggregate {
  id: Float
}

input TagAvgOrderByAggregateInput {
  id: SortOrder
}

type TagCount {
  tagsOnPremises: Int!
  tagsOnTimelines: Int!
  tagsOnVisions: Int!
}

type TagCountAggregate {
  _all: Int!
  id: Int!
  label: Int!
}

input TagCountOrderByAggregateInput {
  id: SortOrder
  label: SortOrder
}

input TagCreateInput {
  label: String!
  tagsOnPremises: TagsOnPremisesCreateNestedManyWithoutTagInput
  tagsOnTimelines: TagsOnTimelinesCreateNestedManyWithoutTagInput
  tagsOnVisions: TagsOnVisionsCreateNestedManyWithoutTagInput
}

input TagCreateManyInput {
  id: Int
  label: String!
}

input TagCreateNestedOneWithoutTagsOnPremisesInput {
  connect: TagWhereUniqueInput
  connectOrCreate: TagCreateOrConnectWithoutTagsOnPremisesInput
  create: TagCreateWithoutTagsOnPremisesInput
}

input TagCreateNestedOneWithoutTagsOnTimelinesInput {
  connect: TagWhereUniqueInput
  connectOrCreate: TagCreateOrConnectWithoutTagsOnTimelinesInput
  create: TagCreateWithoutTagsOnTimelinesInput
}

input TagCreateNestedOneWithoutTagsOnVisionsInput {
  connect: TagWhereUniqueInput
  connectOrCreate: TagCreateOrConnectWithoutTagsOnVisionsInput
  create: TagCreateWithoutTagsOnVisionsInput
}

input TagCreateOrConnectWithoutTagsOnPremisesInput {
  create: TagCreateWithoutTagsOnPremisesInput!
  where: TagWhereUniqueInput!
}

input TagCreateOrConnectWithoutTagsOnTimelinesInput {
  create: TagCreateWithoutTagsOnTimelinesInput!
  where: TagWhereUniqueInput!
}

input TagCreateOrConnectWithoutTagsOnVisionsInput {
  create: TagCreateWithoutTagsOnVisionsInput!
  where: TagWhereUniqueInput!
}

input TagCreateWithoutTagsOnPremisesInput {
  label: String!
  tagsOnTimelines: TagsOnTimelinesCreateNestedManyWithoutTagInput
  tagsOnVisions: TagsOnVisionsCreateNestedManyWithoutTagInput
}

input TagCreateWithoutTagsOnTimelinesInput {
  label: String!
  tagsOnPremises: TagsOnPremisesCreateNestedManyWithoutTagInput
  tagsOnVisions: TagsOnVisionsCreateNestedManyWithoutTagInput
}

input TagCreateWithoutTagsOnVisionsInput {
  label: String!
  tagsOnPremises: TagsOnPremisesCreateNestedManyWithoutTagInput
  tagsOnTimelines: TagsOnTimelinesCreateNestedManyWithoutTagInput
}

type TagGroupBy {
  _avg: TagAvgAggregate
  _count: TagCountAggregate
  _max: TagMaxAggregate
  _min: TagMinAggregate
  _sum: TagSumAggregate
  id: Int!
  label: String!
}

type TagMaxAggregate {
  id: Int
  label: String
}

input TagMaxOrderByAggregateInput {
  id: SortOrder
  label: SortOrder
}

type TagMinAggregate {
  id: Int
  label: String
}

input TagMinOrderByAggregateInput {
  id: SortOrder
  label: SortOrder
}

input TagOrderByWithAggregationInput {
  _avg: TagAvgOrderByAggregateInput
  _count: TagCountOrderByAggregateInput
  _max: TagMaxOrderByAggregateInput
  _min: TagMinOrderByAggregateInput
  _sum: TagSumOrderByAggregateInput
  id: SortOrder
  label: SortOrder
}

input TagOrderByWithRelationInput {
  id: SortOrder
  label: SortOrder
  tagsOnPremises: TagsOnPremisesOrderByRelationAggregateInput
  tagsOnTimelines: TagsOnTimelinesOrderByRelationAggregateInput
  tagsOnVisions: TagsOnVisionsOrderByRelationAggregateInput
}

input TagRelationFilter {
  is: TagWhereInput
  isNot: TagWhereInput
}

enum TagScalarFieldEnum {
  id
  label
}

input TagScalarWhereWithAggregatesInput {
  AND: [TagScalarWhereWithAggregatesInput!]
  NOT: [TagScalarWhereWithAggregatesInput!]
  OR: [TagScalarWhereWithAggregatesInput!]
  id: IntWithAggregatesFilter
  label: StringWithAggregatesFilter
}

type TagSumAggregate {
  id: Int
}

input TagSumOrderByAggregateInput {
  id: SortOrder
}

input TagUpdateInput {
  label: StringFieldUpdateOperationsInput
  tagsOnPremises: TagsOnPremisesUpdateManyWithoutTagInput
  tagsOnTimelines: TagsOnTimelinesUpdateManyWithoutTagInput
  tagsOnVisions: TagsOnVisionsUpdateManyWithoutTagInput
}

input TagUpdateManyMutationInput {
  label: StringFieldUpdateOperationsInput
}

input TagUpdateOneRequiredWithoutTagsOnPremisesInput {
  connect: TagWhereUniqueInput
  connectOrCreate: TagCreateOrConnectWithoutTagsOnPremisesInput
  create: TagCreateWithoutTagsOnPremisesInput
  update: TagUpdateWithoutTagsOnPremisesInput
  upsert: TagUpsertWithoutTagsOnPremisesInput
}

input TagUpdateOneRequiredWithoutTagsOnTimelinesInput {
  connect: TagWhereUniqueInput
  connectOrCreate: TagCreateOrConnectWithoutTagsOnTimelinesInput
  create: TagCreateWithoutTagsOnTimelinesInput
  update: TagUpdateWithoutTagsOnTimelinesInput
  upsert: TagUpsertWithoutTagsOnTimelinesInput
}

input TagUpdateOneRequiredWithoutTagsOnVisionsInput {
  connect: TagWhereUniqueInput
  connectOrCreate: TagCreateOrConnectWithoutTagsOnVisionsInput
  create: TagCreateWithoutTagsOnVisionsInput
  update: TagUpdateWithoutTagsOnVisionsInput
  upsert: TagUpsertWithoutTagsOnVisionsInput
}

input TagUpdateWithoutTagsOnPremisesInput {
  label: StringFieldUpdateOperationsInput
  tagsOnTimelines: TagsOnTimelinesUpdateManyWithoutTagInput
  tagsOnVisions: TagsOnVisionsUpdateManyWithoutTagInput
}

input TagUpdateWithoutTagsOnTimelinesInput {
  label: StringFieldUpdateOperationsInput
  tagsOnPremises: TagsOnPremisesUpdateManyWithoutTagInput
  tagsOnVisions: TagsOnVisionsUpdateManyWithoutTagInput
}

input TagUpdateWithoutTagsOnVisionsInput {
  label: StringFieldUpdateOperationsInput
  tagsOnPremises: TagsOnPremisesUpdateManyWithoutTagInput
  tagsOnTimelines: TagsOnTimelinesUpdateManyWithoutTagInput
}

input TagUpsertWithoutTagsOnPremisesInput {
  create: TagCreateWithoutTagsOnPremisesInput!
  update: TagUpdateWithoutTagsOnPremisesInput!
}

input TagUpsertWithoutTagsOnTimelinesInput {
  create: TagCreateWithoutTagsOnTimelinesInput!
  update: TagUpdateWithoutTagsOnTimelinesInput!
}

input TagUpsertWithoutTagsOnVisionsInput {
  create: TagCreateWithoutTagsOnVisionsInput!
  update: TagUpdateWithoutTagsOnVisionsInput!
}

input TagWhereInput {
  AND: [TagWhereInput!]
  NOT: [TagWhereInput!]
  OR: [TagWhereInput!]
  id: IntFilter
  label: StringFilter
  tagsOnPremises: TagsOnPremisesListRelationFilter
  tagsOnTimelines: TagsOnTimelinesListRelationFilter
  tagsOnVisions: TagsOnVisionsListRelationFilter
}

input TagWhereUniqueInput {
  id: Int
  label: String
}

type TagsOnPremises {
  assignedAt: DateTime!
  premise: Premise!
  premiseId: String!
  tag: Tag!
  tagId: Int!
}

type TagsOnPremisesAvgAggregate {
  tagId: Float
}

input TagsOnPremisesAvgOrderByAggregateInput {
  tagId: SortOrder
}

type TagsOnPremisesCountAggregate {
  _all: Int!
  assignedAt: Int!
  premiseId: Int!
  tagId: Int!
}

input TagsOnPremisesCountOrderByAggregateInput {
  assignedAt: SortOrder
  premiseId: SortOrder
  tagId: SortOrder
}

input TagsOnPremisesCreateInput {
  assignedAt: DateTime
  premise: PremiseCreateNestedOneWithoutTagsOnPremisesInput!
  tag: TagCreateNestedOneWithoutTagsOnPremisesInput!
}

input TagsOnPremisesCreateManyInput {
  assignedAt: DateTime
  premiseId: String!
  tagId: Int!
}

input TagsOnPremisesCreateManyPremiseInput {
  assignedAt: DateTime
  tagId: Int!
}

input TagsOnPremisesCreateManyPremiseInputEnvelope {
  data: [TagsOnPremisesCreateManyPremiseInput!]!
  skipDuplicates: Boolean
}

input TagsOnPremisesCreateManyTagInput {
  assignedAt: DateTime
  premiseId: String!
}

input TagsOnPremisesCreateManyTagInputEnvelope {
  data: [TagsOnPremisesCreateManyTagInput!]!
  skipDuplicates: Boolean
}

input TagsOnPremisesCreateNestedManyWithoutPremiseInput {
  connect: [TagsOnPremisesWhereUniqueInput!]
  connectOrCreate: [TagsOnPremisesCreateOrConnectWithoutPremiseInput!]
  create: [TagsOnPremisesCreateWithoutPremiseInput!]
  createMany: TagsOnPremisesCreateManyPremiseInputEnvelope
}

input TagsOnPremisesCreateNestedManyWithoutTagInput {
  connect: [TagsOnPremisesWhereUniqueInput!]
  connectOrCreate: [TagsOnPremisesCreateOrConnectWithoutTagInput!]
  create: [TagsOnPremisesCreateWithoutTagInput!]
  createMany: TagsOnPremisesCreateManyTagInputEnvelope
}

input TagsOnPremisesCreateOrConnectWithoutPremiseInput {
  create: TagsOnPremisesCreateWithoutPremiseInput!
  where: TagsOnPremisesWhereUniqueInput!
}

input TagsOnPremisesCreateOrConnectWithoutTagInput {
  create: TagsOnPremisesCreateWithoutTagInput!
  where: TagsOnPremisesWhereUniqueInput!
}

input TagsOnPremisesCreateWithoutPremiseInput {
  assignedAt: DateTime
  tag: TagCreateNestedOneWithoutTagsOnPremisesInput!
}

input TagsOnPremisesCreateWithoutTagInput {
  assignedAt: DateTime
  premise: PremiseCreateNestedOneWithoutTagsOnPremisesInput!
}

type TagsOnPremisesGroupBy {
  _avg: TagsOnPremisesAvgAggregate
  _count: TagsOnPremisesCountAggregate
  _max: TagsOnPremisesMaxAggregate
  _min: TagsOnPremisesMinAggregate
  _sum: TagsOnPremisesSumAggregate
  assignedAt: DateTime!
  premiseId: String!
  tagId: Int!
}

input TagsOnPremisesListRelationFilter {
  every: TagsOnPremisesWhereInput
  none: TagsOnPremisesWhereInput
  some: TagsOnPremisesWhereInput
}

type TagsOnPremisesMaxAggregate {
  assignedAt: DateTime
  premiseId: String
  tagId: Int
}

input TagsOnPremisesMaxOrderByAggregateInput {
  assignedAt: SortOrder
  premiseId: SortOrder
  tagId: SortOrder
}

type TagsOnPremisesMinAggregate {
  assignedAt: DateTime
  premiseId: String
  tagId: Int
}

input TagsOnPremisesMinOrderByAggregateInput {
  assignedAt: SortOrder
  premiseId: SortOrder
  tagId: SortOrder
}

input TagsOnPremisesOrderByRelationAggregateInput {
  _count: SortOrder
}

input TagsOnPremisesOrderByWithAggregationInput {
  _avg: TagsOnPremisesAvgOrderByAggregateInput
  _count: TagsOnPremisesCountOrderByAggregateInput
  _max: TagsOnPremisesMaxOrderByAggregateInput
  _min: TagsOnPremisesMinOrderByAggregateInput
  _sum: TagsOnPremisesSumOrderByAggregateInput
  assignedAt: SortOrder
  premiseId: SortOrder
  tagId: SortOrder
}

input TagsOnPremisesOrderByWithRelationInput {
  assignedAt: SortOrder
  premise: PremiseOrderByWithRelationInput
  premiseId: SortOrder
  tag: TagOrderByWithRelationInput
  tagId: SortOrder
}

enum TagsOnPremisesScalarFieldEnum {
  assignedAt
  premiseId
  tagId
}

input TagsOnPremisesScalarWhereInput {
  AND: [TagsOnPremisesScalarWhereInput!]
  NOT: [TagsOnPremisesScalarWhereInput!]
  OR: [TagsOnPremisesScalarWhereInput!]
  assignedAt: DateTimeFilter
  premiseId: StringFilter
  tagId: IntFilter
}

input TagsOnPremisesScalarWhereWithAggregatesInput {
  AND: [TagsOnPremisesScalarWhereWithAggregatesInput!]
  NOT: [TagsOnPremisesScalarWhereWithAggregatesInput!]
  OR: [TagsOnPremisesScalarWhereWithAggregatesInput!]
  assignedAt: DateTimeWithAggregatesFilter
  premiseId: StringWithAggregatesFilter
  tagId: IntWithAggregatesFilter
}

type TagsOnPremisesSumAggregate {
  tagId: Int
}

input TagsOnPremisesSumOrderByAggregateInput {
  tagId: SortOrder
}

input TagsOnPremisesTagIdPremiseIdCompoundUniqueInput {
  premiseId: String!
  tagId: Int!
}

input TagsOnPremisesUpdateInput {
  assignedAt: DateTimeFieldUpdateOperationsInput
  premise: PremiseUpdateOneRequiredWithoutTagsOnPremisesInput
  tag: TagUpdateOneRequiredWithoutTagsOnPremisesInput
}

input TagsOnPremisesUpdateManyMutationInput {
  assignedAt: DateTimeFieldUpdateOperationsInput
}

input TagsOnPremisesUpdateManyWithWhereWithoutPremiseInput {
  data: TagsOnPremisesUpdateManyMutationInput!
  where: TagsOnPremisesScalarWhereInput!
}

input TagsOnPremisesUpdateManyWithWhereWithoutTagInput {
  data: TagsOnPremisesUpdateManyMutationInput!
  where: TagsOnPremisesScalarWhereInput!
}

input TagsOnPremisesUpdateManyWithoutPremiseInput {
  connect: [TagsOnPremisesWhereUniqueInput!]
  connectOrCreate: [TagsOnPremisesCreateOrConnectWithoutPremiseInput!]
  create: [TagsOnPremisesCreateWithoutPremiseInput!]
  createMany: TagsOnPremisesCreateManyPremiseInputEnvelope
  delete: [TagsOnPremisesWhereUniqueInput!]
  deleteMany: [TagsOnPremisesScalarWhereInput!]
  disconnect: [TagsOnPremisesWhereUniqueInput!]
  set: [TagsOnPremisesWhereUniqueInput!]
  update: [TagsOnPremisesUpdateWithWhereUniqueWithoutPremiseInput!]
  updateMany: [TagsOnPremisesUpdateManyWithWhereWithoutPremiseInput!]
  upsert: [TagsOnPremisesUpsertWithWhereUniqueWithoutPremiseInput!]
}

input TagsOnPremisesUpdateManyWithoutTagInput {
  connect: [TagsOnPremisesWhereUniqueInput!]
  connectOrCreate: [TagsOnPremisesCreateOrConnectWithoutTagInput!]
  create: [TagsOnPremisesCreateWithoutTagInput!]
  createMany: TagsOnPremisesCreateManyTagInputEnvelope
  delete: [TagsOnPremisesWhereUniqueInput!]
  deleteMany: [TagsOnPremisesScalarWhereInput!]
  disconnect: [TagsOnPremisesWhereUniqueInput!]
  set: [TagsOnPremisesWhereUniqueInput!]
  update: [TagsOnPremisesUpdateWithWhereUniqueWithoutTagInput!]
  updateMany: [TagsOnPremisesUpdateManyWithWhereWithoutTagInput!]
  upsert: [TagsOnPremisesUpsertWithWhereUniqueWithoutTagInput!]
}

input TagsOnPremisesUpdateWithWhereUniqueWithoutPremiseInput {
  data: TagsOnPremisesUpdateWithoutPremiseInput!
  where: TagsOnPremisesWhereUniqueInput!
}

input TagsOnPremisesUpdateWithWhereUniqueWithoutTagInput {
  data: TagsOnPremisesUpdateWithoutTagInput!
  where: TagsOnPremisesWhereUniqueInput!
}

input TagsOnPremisesUpdateWithoutPremiseInput {
  assignedAt: DateTimeFieldUpdateOperationsInput
  tag: TagUpdateOneRequiredWithoutTagsOnPremisesInput
}

input TagsOnPremisesUpdateWithoutTagInput {
  assignedAt: DateTimeFieldUpdateOperationsInput
  premise: PremiseUpdateOneRequiredWithoutTagsOnPremisesInput
}

input TagsOnPremisesUpsertWithWhereUniqueWithoutPremiseInput {
  create: TagsOnPremisesCreateWithoutPremiseInput!
  update: TagsOnPremisesUpdateWithoutPremiseInput!
  where: TagsOnPremisesWhereUniqueInput!
}

input TagsOnPremisesUpsertWithWhereUniqueWithoutTagInput {
  create: TagsOnPremisesCreateWithoutTagInput!
  update: TagsOnPremisesUpdateWithoutTagInput!
  where: TagsOnPremisesWhereUniqueInput!
}

input TagsOnPremisesWhereInput {
  AND: [TagsOnPremisesWhereInput!]
  NOT: [TagsOnPremisesWhereInput!]
  OR: [TagsOnPremisesWhereInput!]
  assignedAt: DateTimeFilter
  premise: PremiseRelationFilter
  premiseId: StringFilter
  tag: TagRelationFilter
  tagId: IntFilter
}

input TagsOnPremisesWhereUniqueInput {
  tagId_premiseId: TagsOnPremisesTagIdPremiseIdCompoundUniqueInput
}

type TagsOnTimelines {
  assignedAt: DateTime!
  tag: Tag!
  tagId: Int!
  timeline: Timeline!
  timelineId: String!
}

type TagsOnTimelinesAvgAggregate {
  tagId: Float
}

input TagsOnTimelinesAvgOrderByAggregateInput {
  tagId: SortOrder
}

type TagsOnTimelinesCountAggregate {
  _all: Int!
  assignedAt: Int!
  tagId: Int!
  timelineId: Int!
}

input TagsOnTimelinesCountOrderByAggregateInput {
  assignedAt: SortOrder
  tagId: SortOrder
  timelineId: SortOrder
}

input TagsOnTimelinesCreateInput {
  assignedAt: DateTime
  tag: TagCreateNestedOneWithoutTagsOnTimelinesInput!
  timeline: TimelineCreateNestedOneWithoutTagsOnTimelinesInput!
}

input TagsOnTimelinesCreateManyInput {
  assignedAt: DateTime
  tagId: Int!
  timelineId: String!
}

input TagsOnTimelinesCreateManyTagInput {
  assignedAt: DateTime
  timelineId: String!
}

input TagsOnTimelinesCreateManyTagInputEnvelope {
  data: [TagsOnTimelinesCreateManyTagInput!]!
  skipDuplicates: Boolean
}

input TagsOnTimelinesCreateManyTimelineInput {
  assignedAt: DateTime
  tagId: Int!
}

input TagsOnTimelinesCreateManyTimelineInputEnvelope {
  data: [TagsOnTimelinesCreateManyTimelineInput!]!
  skipDuplicates: Boolean
}

input TagsOnTimelinesCreateNestedManyWithoutTagInput {
  connect: [TagsOnTimelinesWhereUniqueInput!]
  connectOrCreate: [TagsOnTimelinesCreateOrConnectWithoutTagInput!]
  create: [TagsOnTimelinesCreateWithoutTagInput!]
  createMany: TagsOnTimelinesCreateManyTagInputEnvelope
}

input TagsOnTimelinesCreateNestedManyWithoutTimelineInput {
  connect: [TagsOnTimelinesWhereUniqueInput!]
  connectOrCreate: [TagsOnTimelinesCreateOrConnectWithoutTimelineInput!]
  create: [TagsOnTimelinesCreateWithoutTimelineInput!]
  createMany: TagsOnTimelinesCreateManyTimelineInputEnvelope
}

input TagsOnTimelinesCreateOrConnectWithoutTagInput {
  create: TagsOnTimelinesCreateWithoutTagInput!
  where: TagsOnTimelinesWhereUniqueInput!
}

input TagsOnTimelinesCreateOrConnectWithoutTimelineInput {
  create: TagsOnTimelinesCreateWithoutTimelineInput!
  where: TagsOnTimelinesWhereUniqueInput!
}

input TagsOnTimelinesCreateWithoutTagInput {
  assignedAt: DateTime
  timeline: TimelineCreateNestedOneWithoutTagsOnTimelinesInput!
}

input TagsOnTimelinesCreateWithoutTimelineInput {
  assignedAt: DateTime
  tag: TagCreateNestedOneWithoutTagsOnTimelinesInput!
}

type TagsOnTimelinesGroupBy {
  _avg: TagsOnTimelinesAvgAggregate
  _count: TagsOnTimelinesCountAggregate
  _max: TagsOnTimelinesMaxAggregate
  _min: TagsOnTimelinesMinAggregate
  _sum: TagsOnTimelinesSumAggregate
  assignedAt: DateTime!
  tagId: Int!
  timelineId: String!
}

input TagsOnTimelinesListRelationFilter {
  every: TagsOnTimelinesWhereInput
  none: TagsOnTimelinesWhereInput
  some: TagsOnTimelinesWhereInput
}

type TagsOnTimelinesMaxAggregate {
  assignedAt: DateTime
  tagId: Int
  timelineId: String
}

input TagsOnTimelinesMaxOrderByAggregateInput {
  assignedAt: SortOrder
  tagId: SortOrder
  timelineId: SortOrder
}

type TagsOnTimelinesMinAggregate {
  assignedAt: DateTime
  tagId: Int
  timelineId: String
}

input TagsOnTimelinesMinOrderByAggregateInput {
  assignedAt: SortOrder
  tagId: SortOrder
  timelineId: SortOrder
}

input TagsOnTimelinesOrderByRelationAggregateInput {
  _count: SortOrder
}

input TagsOnTimelinesOrderByWithAggregationInput {
  _avg: TagsOnTimelinesAvgOrderByAggregateInput
  _count: TagsOnTimelinesCountOrderByAggregateInput
  _max: TagsOnTimelinesMaxOrderByAggregateInput
  _min: TagsOnTimelinesMinOrderByAggregateInput
  _sum: TagsOnTimelinesSumOrderByAggregateInput
  assignedAt: SortOrder
  tagId: SortOrder
  timelineId: SortOrder
}

input TagsOnTimelinesOrderByWithRelationInput {
  assignedAt: SortOrder
  tag: TagOrderByWithRelationInput
  tagId: SortOrder
  timeline: TimelineOrderByWithRelationInput
  timelineId: SortOrder
}

enum TagsOnTimelinesScalarFieldEnum {
  assignedAt
  tagId
  timelineId
}

input TagsOnTimelinesScalarWhereInput {
  AND: [TagsOnTimelinesScalarWhereInput!]
  NOT: [TagsOnTimelinesScalarWhereInput!]
  OR: [TagsOnTimelinesScalarWhereInput!]
  assignedAt: DateTimeFilter
  tagId: IntFilter
  timelineId: StringFilter
}

input TagsOnTimelinesScalarWhereWithAggregatesInput {
  AND: [TagsOnTimelinesScalarWhereWithAggregatesInput!]
  NOT: [TagsOnTimelinesScalarWhereWithAggregatesInput!]
  OR: [TagsOnTimelinesScalarWhereWithAggregatesInput!]
  assignedAt: DateTimeWithAggregatesFilter
  tagId: IntWithAggregatesFilter
  timelineId: StringWithAggregatesFilter
}

type TagsOnTimelinesSumAggregate {
  tagId: Int
}

input TagsOnTimelinesSumOrderByAggregateInput {
  tagId: SortOrder
}

input TagsOnTimelinesTagIdTimelineIdCompoundUniqueInput {
  tagId: Int!
  timelineId: String!
}

input TagsOnTimelinesUpdateInput {
  assignedAt: DateTimeFieldUpdateOperationsInput
  tag: TagUpdateOneRequiredWithoutTagsOnTimelinesInput
  timeline: TimelineUpdateOneRequiredWithoutTagsOnTimelinesInput
}

input TagsOnTimelinesUpdateManyMutationInput {
  assignedAt: DateTimeFieldUpdateOperationsInput
}

input TagsOnTimelinesUpdateManyWithWhereWithoutTagInput {
  data: TagsOnTimelinesUpdateManyMutationInput!
  where: TagsOnTimelinesScalarWhereInput!
}

input TagsOnTimelinesUpdateManyWithWhereWithoutTimelineInput {
  data: TagsOnTimelinesUpdateManyMutationInput!
  where: TagsOnTimelinesScalarWhereInput!
}

input TagsOnTimelinesUpdateManyWithoutTagInput {
  connect: [TagsOnTimelinesWhereUniqueInput!]
  connectOrCreate: [TagsOnTimelinesCreateOrConnectWithoutTagInput!]
  create: [TagsOnTimelinesCreateWithoutTagInput!]
  createMany: TagsOnTimelinesCreateManyTagInputEnvelope
  delete: [TagsOnTimelinesWhereUniqueInput!]
  deleteMany: [TagsOnTimelinesScalarWhereInput!]
  disconnect: [TagsOnTimelinesWhereUniqueInput!]
  set: [TagsOnTimelinesWhereUniqueInput!]
  update: [TagsOnTimelinesUpdateWithWhereUniqueWithoutTagInput!]
  updateMany: [TagsOnTimelinesUpdateManyWithWhereWithoutTagInput!]
  upsert: [TagsOnTimelinesUpsertWithWhereUniqueWithoutTagInput!]
}

input TagsOnTimelinesUpdateManyWithoutTimelineInput {
  connect: [TagsOnTimelinesWhereUniqueInput!]
  connectOrCreate: [TagsOnTimelinesCreateOrConnectWithoutTimelineInput!]
  create: [TagsOnTimelinesCreateWithoutTimelineInput!]
  createMany: TagsOnTimelinesCreateManyTimelineInputEnvelope
  delete: [TagsOnTimelinesWhereUniqueInput!]
  deleteMany: [TagsOnTimelinesScalarWhereInput!]
  disconnect: [TagsOnTimelinesWhereUniqueInput!]
  set: [TagsOnTimelinesWhereUniqueInput!]
  update: [TagsOnTimelinesUpdateWithWhereUniqueWithoutTimelineInput!]
  updateMany: [TagsOnTimelinesUpdateManyWithWhereWithoutTimelineInput!]
  upsert: [TagsOnTimelinesUpsertWithWhereUniqueWithoutTimelineInput!]
}

input TagsOnTimelinesUpdateWithWhereUniqueWithoutTagInput {
  data: TagsOnTimelinesUpdateWithoutTagInput!
  where: TagsOnTimelinesWhereUniqueInput!
}

input TagsOnTimelinesUpdateWithWhereUniqueWithoutTimelineInput {
  data: TagsOnTimelinesUpdateWithoutTimelineInput!
  where: TagsOnTimelinesWhereUniqueInput!
}

input TagsOnTimelinesUpdateWithoutTagInput {
  assignedAt: DateTimeFieldUpdateOperationsInput
  timeline: TimelineUpdateOneRequiredWithoutTagsOnTimelinesInput
}

input TagsOnTimelinesUpdateWithoutTimelineInput {
  assignedAt: DateTimeFieldUpdateOperationsInput
  tag: TagUpdateOneRequiredWithoutTagsOnTimelinesInput
}

input TagsOnTimelinesUpsertWithWhereUniqueWithoutTagInput {
  create: TagsOnTimelinesCreateWithoutTagInput!
  update: TagsOnTimelinesUpdateWithoutTagInput!
  where: TagsOnTimelinesWhereUniqueInput!
}

input TagsOnTimelinesUpsertWithWhereUniqueWithoutTimelineInput {
  create: TagsOnTimelinesCreateWithoutTimelineInput!
  update: TagsOnTimelinesUpdateWithoutTimelineInput!
  where: TagsOnTimelinesWhereUniqueInput!
}

input TagsOnTimelinesWhereInput {
  AND: [TagsOnTimelinesWhereInput!]
  NOT: [TagsOnTimelinesWhereInput!]
  OR: [TagsOnTimelinesWhereInput!]
  assignedAt: DateTimeFilter
  tag: TagRelationFilter
  tagId: IntFilter
  timeline: TimelineRelationFilter
  timelineId: StringFilter
}

input TagsOnTimelinesWhereUniqueInput {
  tagId_timelineId: TagsOnTimelinesTagIdTimelineIdCompoundUniqueInput
}

type TagsOnVisions {
  assignedAt: DateTime!
  tag: Tag!
  tagId: Int!
  vision: Vision!
  visionId: String!
}

type TagsOnVisionsAvgAggregate {
  tagId: Float
}

input TagsOnVisionsAvgOrderByAggregateInput {
  tagId: SortOrder
}

type TagsOnVisionsCountAggregate {
  _all: Int!
  assignedAt: Int!
  tagId: Int!
  visionId: Int!
}

input TagsOnVisionsCountOrderByAggregateInput {
  assignedAt: SortOrder
  tagId: SortOrder
  visionId: SortOrder
}

input TagsOnVisionsCreateInput {
  assignedAt: DateTime
  tag: TagCreateNestedOneWithoutTagsOnVisionsInput!
  vision: VisionCreateNestedOneWithoutTagsOnVisionsInput!
}

input TagsOnVisionsCreateManyInput {
  assignedAt: DateTime
  tagId: Int!
  visionId: String!
}

input TagsOnVisionsCreateManyTagInput {
  assignedAt: DateTime
  visionId: String!
}

input TagsOnVisionsCreateManyTagInputEnvelope {
  data: [TagsOnVisionsCreateManyTagInput!]!
  skipDuplicates: Boolean
}

input TagsOnVisionsCreateManyVisionInput {
  assignedAt: DateTime
  tagId: Int!
}

input TagsOnVisionsCreateManyVisionInputEnvelope {
  data: [TagsOnVisionsCreateManyVisionInput!]!
  skipDuplicates: Boolean
}

input TagsOnVisionsCreateNestedManyWithoutTagInput {
  connect: [TagsOnVisionsWhereUniqueInput!]
  connectOrCreate: [TagsOnVisionsCreateOrConnectWithoutTagInput!]
  create: [TagsOnVisionsCreateWithoutTagInput!]
  createMany: TagsOnVisionsCreateManyTagInputEnvelope
}

input TagsOnVisionsCreateNestedManyWithoutVisionInput {
  connect: [TagsOnVisionsWhereUniqueInput!]
  connectOrCreate: [TagsOnVisionsCreateOrConnectWithoutVisionInput!]
  create: [TagsOnVisionsCreateWithoutVisionInput!]
  createMany: TagsOnVisionsCreateManyVisionInputEnvelope
}

input TagsOnVisionsCreateOrConnectWithoutTagInput {
  create: TagsOnVisionsCreateWithoutTagInput!
  where: TagsOnVisionsWhereUniqueInput!
}

input TagsOnVisionsCreateOrConnectWithoutVisionInput {
  create: TagsOnVisionsCreateWithoutVisionInput!
  where: TagsOnVisionsWhereUniqueInput!
}

input TagsOnVisionsCreateWithoutTagInput {
  assignedAt: DateTime
  vision: VisionCreateNestedOneWithoutTagsOnVisionsInput!
}

input TagsOnVisionsCreateWithoutVisionInput {
  assignedAt: DateTime
  tag: TagCreateNestedOneWithoutTagsOnVisionsInput!
}

type TagsOnVisionsGroupBy {
  _avg: TagsOnVisionsAvgAggregate
  _count: TagsOnVisionsCountAggregate
  _max: TagsOnVisionsMaxAggregate
  _min: TagsOnVisionsMinAggregate
  _sum: TagsOnVisionsSumAggregate
  assignedAt: DateTime!
  tagId: Int!
  visionId: String!
}

input TagsOnVisionsListRelationFilter {
  every: TagsOnVisionsWhereInput
  none: TagsOnVisionsWhereInput
  some: TagsOnVisionsWhereInput
}

type TagsOnVisionsMaxAggregate {
  assignedAt: DateTime
  tagId: Int
  visionId: String
}

input TagsOnVisionsMaxOrderByAggregateInput {
  assignedAt: SortOrder
  tagId: SortOrder
  visionId: SortOrder
}

type TagsOnVisionsMinAggregate {
  assignedAt: DateTime
  tagId: Int
  visionId: String
}

input TagsOnVisionsMinOrderByAggregateInput {
  assignedAt: SortOrder
  tagId: SortOrder
  visionId: SortOrder
}

input TagsOnVisionsOrderByRelationAggregateInput {
  _count: SortOrder
}

input TagsOnVisionsOrderByWithAggregationInput {
  _avg: TagsOnVisionsAvgOrderByAggregateInput
  _count: TagsOnVisionsCountOrderByAggregateInput
  _max: TagsOnVisionsMaxOrderByAggregateInput
  _min: TagsOnVisionsMinOrderByAggregateInput
  _sum: TagsOnVisionsSumOrderByAggregateInput
  assignedAt: SortOrder
  tagId: SortOrder
  visionId: SortOrder
}

input TagsOnVisionsOrderByWithRelationInput {
  assignedAt: SortOrder
  tag: TagOrderByWithRelationInput
  tagId: SortOrder
  vision: VisionOrderByWithRelationInput
  visionId: SortOrder
}

enum TagsOnVisionsScalarFieldEnum {
  assignedAt
  tagId
  visionId
}

input TagsOnVisionsScalarWhereInput {
  AND: [TagsOnVisionsScalarWhereInput!]
  NOT: [TagsOnVisionsScalarWhereInput!]
  OR: [TagsOnVisionsScalarWhereInput!]
  assignedAt: DateTimeFilter
  tagId: IntFilter
  visionId: StringFilter
}

input TagsOnVisionsScalarWhereWithAggregatesInput {
  AND: [TagsOnVisionsScalarWhereWithAggregatesInput!]
  NOT: [TagsOnVisionsScalarWhereWithAggregatesInput!]
  OR: [TagsOnVisionsScalarWhereWithAggregatesInput!]
  assignedAt: DateTimeWithAggregatesFilter
  tagId: IntWithAggregatesFilter
  visionId: StringWithAggregatesFilter
}

type TagsOnVisionsSumAggregate {
  tagId: Int
}

input TagsOnVisionsSumOrderByAggregateInput {
  tagId: SortOrder
}

input TagsOnVisionsTagIdVisionIdCompoundUniqueInput {
  tagId: Int!
  visionId: String!
}

input TagsOnVisionsUpdateInput {
  assignedAt: DateTimeFieldUpdateOperationsInput
  tag: TagUpdateOneRequiredWithoutTagsOnVisionsInput
  vision: VisionUpdateOneRequiredWithoutTagsOnVisionsInput
}

input TagsOnVisionsUpdateManyMutationInput {
  assignedAt: DateTimeFieldUpdateOperationsInput
}

input TagsOnVisionsUpdateManyWithWhereWithoutTagInput {
  data: TagsOnVisionsUpdateManyMutationInput!
  where: TagsOnVisionsScalarWhereInput!
}

input TagsOnVisionsUpdateManyWithWhereWithoutVisionInput {
  data: TagsOnVisionsUpdateManyMutationInput!
  where: TagsOnVisionsScalarWhereInput!
}

input TagsOnVisionsUpdateManyWithoutTagInput {
  connect: [TagsOnVisionsWhereUniqueInput!]
  connectOrCreate: [TagsOnVisionsCreateOrConnectWithoutTagInput!]
  create: [TagsOnVisionsCreateWithoutTagInput!]
  createMany: TagsOnVisionsCreateManyTagInputEnvelope
  delete: [TagsOnVisionsWhereUniqueInput!]
  deleteMany: [TagsOnVisionsScalarWhereInput!]
  disconnect: [TagsOnVisionsWhereUniqueInput!]
  set: [TagsOnVisionsWhereUniqueInput!]
  update: [TagsOnVisionsUpdateWithWhereUniqueWithoutTagInput!]
  updateMany: [TagsOnVisionsUpdateManyWithWhereWithoutTagInput!]
  upsert: [TagsOnVisionsUpsertWithWhereUniqueWithoutTagInput!]
}

input TagsOnVisionsUpdateManyWithoutVisionInput {
  connect: [TagsOnVisionsWhereUniqueInput!]
  connectOrCreate: [TagsOnVisionsCreateOrConnectWithoutVisionInput!]
  create: [TagsOnVisionsCreateWithoutVisionInput!]
  createMany: TagsOnVisionsCreateManyVisionInputEnvelope
  delete: [TagsOnVisionsWhereUniqueInput!]
  deleteMany: [TagsOnVisionsScalarWhereInput!]
  disconnect: [TagsOnVisionsWhereUniqueInput!]
  set: [TagsOnVisionsWhereUniqueInput!]
  update: [TagsOnVisionsUpdateWithWhereUniqueWithoutVisionInput!]
  updateMany: [TagsOnVisionsUpdateManyWithWhereWithoutVisionInput!]
  upsert: [TagsOnVisionsUpsertWithWhereUniqueWithoutVisionInput!]
}

input TagsOnVisionsUpdateWithWhereUniqueWithoutTagInput {
  data: TagsOnVisionsUpdateWithoutTagInput!
  where: TagsOnVisionsWhereUniqueInput!
}

input TagsOnVisionsUpdateWithWhereUniqueWithoutVisionInput {
  data: TagsOnVisionsUpdateWithoutVisionInput!
  where: TagsOnVisionsWhereUniqueInput!
}

input TagsOnVisionsUpdateWithoutTagInput {
  assignedAt: DateTimeFieldUpdateOperationsInput
  vision: VisionUpdateOneRequiredWithoutTagsOnVisionsInput
}

input TagsOnVisionsUpdateWithoutVisionInput {
  assignedAt: DateTimeFieldUpdateOperationsInput
  tag: TagUpdateOneRequiredWithoutTagsOnVisionsInput
}

input TagsOnVisionsUpsertWithWhereUniqueWithoutTagInput {
  create: TagsOnVisionsCreateWithoutTagInput!
  update: TagsOnVisionsUpdateWithoutTagInput!
  where: TagsOnVisionsWhereUniqueInput!
}

input TagsOnVisionsUpsertWithWhereUniqueWithoutVisionInput {
  create: TagsOnVisionsCreateWithoutVisionInput!
  update: TagsOnVisionsUpdateWithoutVisionInput!
  where: TagsOnVisionsWhereUniqueInput!
}

input TagsOnVisionsWhereInput {
  AND: [TagsOnVisionsWhereInput!]
  NOT: [TagsOnVisionsWhereInput!]
  OR: [TagsOnVisionsWhereInput!]
  assignedAt: DateTimeFilter
  tag: TagRelationFilter
  tagId: IntFilter
  vision: VisionRelationFilter
  visionId: StringFilter
}

input TagsOnVisionsWhereUniqueInput {
  tagId_visionId: TagsOnVisionsTagIdVisionIdCompoundUniqueInput
}

type Thread {
  _count: ThreadCount
  activityDate: DateTime
  author: User
  authorId: String
  childThreads(cursor: ThreadWhereUniqueInput, distinct: [ThreadScalarFieldEnum!], orderBy: [ThreadOrderByWithRelationInput!], skip: Int, take: Int, where: ThreadWhereInput): [Thread!]!
  createdAt: DateTime!
  description: String
  id: String!
  parentThread: Thread
  parentThreadId: String
  reactionOnThreads(cursor: ReactionOnThreadsWhereUniqueInput, distinct: [ReactionOnThreadsScalarFieldEnum!], orderBy: [ReactionOnThreadsOrderByWithRelationInput!], skip: Int, take: Int, where: ReactionOnThreadsWhereInput): [ReactionOnThreads!]!
  reference: String
  threadsOnMergeRequest: ThreadsOnMergeRequest
  threadsOnPremise: ThreadsOnPremise
  threadsOnTimeline: ThreadsOnTimeline
  threadsOnVision: ThreadsOnVision
  title: String!
  updatedAt: DateTime!
  votesOnThread(cursor: VotesOnThreadWhereUniqueInput, distinct: [VotesOnThreadScalarFieldEnum!], orderBy: [VotesOnThreadOrderByWithRelationInput!], skip: Int, take: Int, where: VotesOnThreadWhereInput): [VotesOnThread!]!
}

type ThreadCount {
  childThreads: Int!
  reactionOnThreads: Int!
  votesOnThread: Int!
}

type ThreadCountAggregate {
  _all: Int!
  activityDate: Int!
  authorId: Int!
  createdAt: Int!
  description: Int!
  id: Int!
  parentThreadId: Int!
  reference: Int!
  title: Int!
  updatedAt: Int!
}

input ThreadCountOrderByAggregateInput {
  activityDate: SortOrder
  authorId: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  parentThreadId: SortOrder
  reference: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input ThreadCreateInput {
  activityDate: DateTime
  author: UserCreateNestedOneWithoutThreadsInput
  childThreads: ThreadCreateNestedManyWithoutParentThreadInput
  createdAt: DateTime
  description: String
  id: String
  parentThread: ThreadCreateNestedOneWithoutChildThreadsInput
  reactionOnThreads: ReactionOnThreadsCreateNestedManyWithoutThreadInput
  reference: String
  threadsOnMergeRequest: ThreadsOnMergeRequestCreateNestedOneWithoutThreadInput
  threadsOnPremise: ThreadsOnPremiseCreateNestedOneWithoutThreadInput
  threadsOnTimeline: ThreadsOnTimelineCreateNestedOneWithoutThreadInput
  threadsOnVision: ThreadsOnVisionCreateNestedOneWithoutThreadInput
  title: String!
  updatedAt: DateTime
  votesOnThread: VotesOnThreadCreateNestedManyWithoutThreadInput
}

input ThreadCreateManyAuthorInput {
  activityDate: DateTime
  createdAt: DateTime
  description: String
  id: String
  parentThreadId: String
  reference: String
  title: String!
  updatedAt: DateTime
}

input ThreadCreateManyAuthorInputEnvelope {
  data: [ThreadCreateManyAuthorInput!]!
  skipDuplicates: Boolean
}

input ThreadCreateManyInput {
  activityDate: DateTime
  authorId: String
  createdAt: DateTime
  description: String
  id: String
  parentThreadId: String
  reference: String
  title: String!
  updatedAt: DateTime
}

input ThreadCreateManyParentThreadInput {
  activityDate: DateTime
  authorId: String
  createdAt: DateTime
  description: String
  id: String
  reference: String
  title: String!
  updatedAt: DateTime
}

input ThreadCreateManyParentThreadInputEnvelope {
  data: [ThreadCreateManyParentThreadInput!]!
  skipDuplicates: Boolean
}

input ThreadCreateNestedManyWithoutAuthorInput {
  connect: [ThreadWhereUniqueInput!]
  connectOrCreate: [ThreadCreateOrConnectWithoutAuthorInput!]
  create: [ThreadCreateWithoutAuthorInput!]
  createMany: ThreadCreateManyAuthorInputEnvelope
}

input ThreadCreateNestedManyWithoutParentThreadInput {
  connect: [ThreadWhereUniqueInput!]
  connectOrCreate: [ThreadCreateOrConnectWithoutParentThreadInput!]
  create: [ThreadCreateWithoutParentThreadInput!]
  createMany: ThreadCreateManyParentThreadInputEnvelope
}

input ThreadCreateNestedOneWithoutChildThreadsInput {
  connect: ThreadWhereUniqueInput
  connectOrCreate: ThreadCreateOrConnectWithoutChildThreadsInput
  create: ThreadCreateWithoutChildThreadsInput
}

input ThreadCreateNestedOneWithoutReactionOnThreadsInput {
  connect: ThreadWhereUniqueInput
  connectOrCreate: ThreadCreateOrConnectWithoutReactionOnThreadsInput
  create: ThreadCreateWithoutReactionOnThreadsInput
}

input ThreadCreateNestedOneWithoutThreadsOnMergeRequestInput {
  connect: ThreadWhereUniqueInput
  connectOrCreate: ThreadCreateOrConnectWithoutThreadsOnMergeRequestInput
  create: ThreadCreateWithoutThreadsOnMergeRequestInput
}

input ThreadCreateNestedOneWithoutThreadsOnPremiseInput {
  connect: ThreadWhereUniqueInput
  connectOrCreate: ThreadCreateOrConnectWithoutThreadsOnPremiseInput
  create: ThreadCreateWithoutThreadsOnPremiseInput
}

input ThreadCreateNestedOneWithoutThreadsOnTimelineInput {
  connect: ThreadWhereUniqueInput
  connectOrCreate: ThreadCreateOrConnectWithoutThreadsOnTimelineInput
  create: ThreadCreateWithoutThreadsOnTimelineInput
}

input ThreadCreateNestedOneWithoutThreadsOnVisionInput {
  connect: ThreadWhereUniqueInput
  connectOrCreate: ThreadCreateOrConnectWithoutThreadsOnVisionInput
  create: ThreadCreateWithoutThreadsOnVisionInput
}

input ThreadCreateNestedOneWithoutVotesOnThreadInput {
  connect: ThreadWhereUniqueInput
  connectOrCreate: ThreadCreateOrConnectWithoutVotesOnThreadInput
  create: ThreadCreateWithoutVotesOnThreadInput
}

input ThreadCreateOrConnectWithoutAuthorInput {
  create: ThreadCreateWithoutAuthorInput!
  where: ThreadWhereUniqueInput!
}

input ThreadCreateOrConnectWithoutChildThreadsInput {
  create: ThreadCreateWithoutChildThreadsInput!
  where: ThreadWhereUniqueInput!
}

input ThreadCreateOrConnectWithoutParentThreadInput {
  create: ThreadCreateWithoutParentThreadInput!
  where: ThreadWhereUniqueInput!
}

input ThreadCreateOrConnectWithoutReactionOnThreadsInput {
  create: ThreadCreateWithoutReactionOnThreadsInput!
  where: ThreadWhereUniqueInput!
}

input ThreadCreateOrConnectWithoutThreadsOnMergeRequestInput {
  create: ThreadCreateWithoutThreadsOnMergeRequestInput!
  where: ThreadWhereUniqueInput!
}

input ThreadCreateOrConnectWithoutThreadsOnPremiseInput {
  create: ThreadCreateWithoutThreadsOnPremiseInput!
  where: ThreadWhereUniqueInput!
}

input ThreadCreateOrConnectWithoutThreadsOnTimelineInput {
  create: ThreadCreateWithoutThreadsOnTimelineInput!
  where: ThreadWhereUniqueInput!
}

input ThreadCreateOrConnectWithoutThreadsOnVisionInput {
  create: ThreadCreateWithoutThreadsOnVisionInput!
  where: ThreadWhereUniqueInput!
}

input ThreadCreateOrConnectWithoutVotesOnThreadInput {
  create: ThreadCreateWithoutVotesOnThreadInput!
  where: ThreadWhereUniqueInput!
}

input ThreadCreateWithoutAuthorInput {
  activityDate: DateTime
  childThreads: ThreadCreateNestedManyWithoutParentThreadInput
  createdAt: DateTime
  description: String
  id: String
  parentThread: ThreadCreateNestedOneWithoutChildThreadsInput
  reactionOnThreads: ReactionOnThreadsCreateNestedManyWithoutThreadInput
  reference: String
  threadsOnMergeRequest: ThreadsOnMergeRequestCreateNestedOneWithoutThreadInput
  threadsOnPremise: ThreadsOnPremiseCreateNestedOneWithoutThreadInput
  threadsOnTimeline: ThreadsOnTimelineCreateNestedOneWithoutThreadInput
  threadsOnVision: ThreadsOnVisionCreateNestedOneWithoutThreadInput
  title: String!
  updatedAt: DateTime
  votesOnThread: VotesOnThreadCreateNestedManyWithoutThreadInput
}

input ThreadCreateWithoutChildThreadsInput {
  activityDate: DateTime
  author: UserCreateNestedOneWithoutThreadsInput
  createdAt: DateTime
  description: String
  id: String
  parentThread: ThreadCreateNestedOneWithoutChildThreadsInput
  reactionOnThreads: ReactionOnThreadsCreateNestedManyWithoutThreadInput
  reference: String
  threadsOnMergeRequest: ThreadsOnMergeRequestCreateNestedOneWithoutThreadInput
  threadsOnPremise: ThreadsOnPremiseCreateNestedOneWithoutThreadInput
  threadsOnTimeline: ThreadsOnTimelineCreateNestedOneWithoutThreadInput
  threadsOnVision: ThreadsOnVisionCreateNestedOneWithoutThreadInput
  title: String!
  updatedAt: DateTime
  votesOnThread: VotesOnThreadCreateNestedManyWithoutThreadInput
}

input ThreadCreateWithoutParentThreadInput {
  activityDate: DateTime
  author: UserCreateNestedOneWithoutThreadsInput
  childThreads: ThreadCreateNestedManyWithoutParentThreadInput
  createdAt: DateTime
  description: String
  id: String
  reactionOnThreads: ReactionOnThreadsCreateNestedManyWithoutThreadInput
  reference: String
  threadsOnMergeRequest: ThreadsOnMergeRequestCreateNestedOneWithoutThreadInput
  threadsOnPremise: ThreadsOnPremiseCreateNestedOneWithoutThreadInput
  threadsOnTimeline: ThreadsOnTimelineCreateNestedOneWithoutThreadInput
  threadsOnVision: ThreadsOnVisionCreateNestedOneWithoutThreadInput
  title: String!
  updatedAt: DateTime
  votesOnThread: VotesOnThreadCreateNestedManyWithoutThreadInput
}

input ThreadCreateWithoutReactionOnThreadsInput {
  activityDate: DateTime
  author: UserCreateNestedOneWithoutThreadsInput
  childThreads: ThreadCreateNestedManyWithoutParentThreadInput
  createdAt: DateTime
  description: String
  id: String
  parentThread: ThreadCreateNestedOneWithoutChildThreadsInput
  reference: String
  threadsOnMergeRequest: ThreadsOnMergeRequestCreateNestedOneWithoutThreadInput
  threadsOnPremise: ThreadsOnPremiseCreateNestedOneWithoutThreadInput
  threadsOnTimeline: ThreadsOnTimelineCreateNestedOneWithoutThreadInput
  threadsOnVision: ThreadsOnVisionCreateNestedOneWithoutThreadInput
  title: String!
  updatedAt: DateTime
  votesOnThread: VotesOnThreadCreateNestedManyWithoutThreadInput
}

input ThreadCreateWithoutThreadsOnMergeRequestInput {
  activityDate: DateTime
  author: UserCreateNestedOneWithoutThreadsInput
  childThreads: ThreadCreateNestedManyWithoutParentThreadInput
  createdAt: DateTime
  description: String
  id: String
  parentThread: ThreadCreateNestedOneWithoutChildThreadsInput
  reactionOnThreads: ReactionOnThreadsCreateNestedManyWithoutThreadInput
  reference: String
  threadsOnPremise: ThreadsOnPremiseCreateNestedOneWithoutThreadInput
  threadsOnTimeline: ThreadsOnTimelineCreateNestedOneWithoutThreadInput
  threadsOnVision: ThreadsOnVisionCreateNestedOneWithoutThreadInput
  title: String!
  updatedAt: DateTime
  votesOnThread: VotesOnThreadCreateNestedManyWithoutThreadInput
}

input ThreadCreateWithoutThreadsOnPremiseInput {
  activityDate: DateTime
  author: UserCreateNestedOneWithoutThreadsInput
  childThreads: ThreadCreateNestedManyWithoutParentThreadInput
  createdAt: DateTime
  description: String
  id: String
  parentThread: ThreadCreateNestedOneWithoutChildThreadsInput
  reactionOnThreads: ReactionOnThreadsCreateNestedManyWithoutThreadInput
  reference: String
  threadsOnMergeRequest: ThreadsOnMergeRequestCreateNestedOneWithoutThreadInput
  threadsOnTimeline: ThreadsOnTimelineCreateNestedOneWithoutThreadInput
  threadsOnVision: ThreadsOnVisionCreateNestedOneWithoutThreadInput
  title: String!
  updatedAt: DateTime
  votesOnThread: VotesOnThreadCreateNestedManyWithoutThreadInput
}

input ThreadCreateWithoutThreadsOnTimelineInput {
  activityDate: DateTime
  author: UserCreateNestedOneWithoutThreadsInput
  childThreads: ThreadCreateNestedManyWithoutParentThreadInput
  createdAt: DateTime
  description: String
  id: String
  parentThread: ThreadCreateNestedOneWithoutChildThreadsInput
  reactionOnThreads: ReactionOnThreadsCreateNestedManyWithoutThreadInput
  reference: String
  threadsOnMergeRequest: ThreadsOnMergeRequestCreateNestedOneWithoutThreadInput
  threadsOnPremise: ThreadsOnPremiseCreateNestedOneWithoutThreadInput
  threadsOnVision: ThreadsOnVisionCreateNestedOneWithoutThreadInput
  title: String!
  updatedAt: DateTime
  votesOnThread: VotesOnThreadCreateNestedManyWithoutThreadInput
}

input ThreadCreateWithoutThreadsOnVisionInput {
  activityDate: DateTime
  author: UserCreateNestedOneWithoutThreadsInput
  childThreads: ThreadCreateNestedManyWithoutParentThreadInput
  createdAt: DateTime
  description: String
  id: String
  parentThread: ThreadCreateNestedOneWithoutChildThreadsInput
  reactionOnThreads: ReactionOnThreadsCreateNestedManyWithoutThreadInput
  reference: String
  threadsOnMergeRequest: ThreadsOnMergeRequestCreateNestedOneWithoutThreadInput
  threadsOnPremise: ThreadsOnPremiseCreateNestedOneWithoutThreadInput
  threadsOnTimeline: ThreadsOnTimelineCreateNestedOneWithoutThreadInput
  title: String!
  updatedAt: DateTime
  votesOnThread: VotesOnThreadCreateNestedManyWithoutThreadInput
}

input ThreadCreateWithoutVotesOnThreadInput {
  activityDate: DateTime
  author: UserCreateNestedOneWithoutThreadsInput
  childThreads: ThreadCreateNestedManyWithoutParentThreadInput
  createdAt: DateTime
  description: String
  id: String
  parentThread: ThreadCreateNestedOneWithoutChildThreadsInput
  reactionOnThreads: ReactionOnThreadsCreateNestedManyWithoutThreadInput
  reference: String
  threadsOnMergeRequest: ThreadsOnMergeRequestCreateNestedOneWithoutThreadInput
  threadsOnPremise: ThreadsOnPremiseCreateNestedOneWithoutThreadInput
  threadsOnTimeline: ThreadsOnTimelineCreateNestedOneWithoutThreadInput
  threadsOnVision: ThreadsOnVisionCreateNestedOneWithoutThreadInput
  title: String!
  updatedAt: DateTime
}

type ThreadGroupBy {
  _count: ThreadCountAggregate
  _max: ThreadMaxAggregate
  _min: ThreadMinAggregate
  activityDate: DateTime
  authorId: String
  createdAt: DateTime!
  description: String
  id: String!
  parentThreadId: String
  reference: String
  title: String!
  updatedAt: DateTime!
}

input ThreadListRelationFilter {
  every: ThreadWhereInput
  none: ThreadWhereInput
  some: ThreadWhereInput
}

type ThreadMaxAggregate {
  activityDate: DateTime
  authorId: String
  createdAt: DateTime
  description: String
  id: String
  parentThreadId: String
  reference: String
  title: String
  updatedAt: DateTime
}

input ThreadMaxOrderByAggregateInput {
  activityDate: SortOrder
  authorId: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  parentThreadId: SortOrder
  reference: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

type ThreadMinAggregate {
  activityDate: DateTime
  authorId: String
  createdAt: DateTime
  description: String
  id: String
  parentThreadId: String
  reference: String
  title: String
  updatedAt: DateTime
}

input ThreadMinOrderByAggregateInput {
  activityDate: SortOrder
  authorId: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  parentThreadId: SortOrder
  reference: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input ThreadOrderByRelationAggregateInput {
  _count: SortOrder
}

input ThreadOrderByWithAggregationInput {
  _count: ThreadCountOrderByAggregateInput
  _max: ThreadMaxOrderByAggregateInput
  _min: ThreadMinOrderByAggregateInput
  activityDate: SortOrder
  authorId: SortOrder
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  parentThreadId: SortOrder
  reference: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input ThreadOrderByWithRelationInput {
  activityDate: SortOrder
  author: UserOrderByWithRelationInput
  authorId: SortOrder
  childThreads: ThreadOrderByRelationAggregateInput
  createdAt: SortOrder
  description: SortOrder
  id: SortOrder
  parentThread: ThreadOrderByWithRelationInput
  parentThreadId: SortOrder
  reactionOnThreads: ReactionOnThreadsOrderByRelationAggregateInput
  reference: SortOrder
  threadsOnMergeRequest: ThreadsOnMergeRequestOrderByWithRelationInput
  threadsOnPremise: ThreadsOnPremiseOrderByWithRelationInput
  threadsOnTimeline: ThreadsOnTimelineOrderByWithRelationInput
  threadsOnVision: ThreadsOnVisionOrderByWithRelationInput
  title: SortOrder
  updatedAt: SortOrder
  votesOnThread: VotesOnThreadOrderByRelationAggregateInput
}

input ThreadRelationFilter {
  is: ThreadWhereInput
  isNot: ThreadWhereInput
}

enum ThreadScalarFieldEnum {
  activityDate
  authorId
  createdAt
  description
  id
  parentThreadId
  reference
  title
  updatedAt
}

input ThreadScalarWhereInput {
  AND: [ThreadScalarWhereInput!]
  NOT: [ThreadScalarWhereInput!]
  OR: [ThreadScalarWhereInput!]
  activityDate: DateTimeNullableFilter
  authorId: StringNullableFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  parentThreadId: StringNullableFilter
  reference: StringNullableFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input ThreadScalarWhereWithAggregatesInput {
  AND: [ThreadScalarWhereWithAggregatesInput!]
  NOT: [ThreadScalarWhereWithAggregatesInput!]
  OR: [ThreadScalarWhereWithAggregatesInput!]
  activityDate: DateTimeNullableWithAggregatesFilter
  authorId: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  description: StringNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  parentThreadId: StringNullableWithAggregatesFilter
  reference: StringNullableWithAggregatesFilter
  title: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input ThreadUpdateInput {
  activityDate: NullableDateTimeFieldUpdateOperationsInput
  author: UserUpdateOneWithoutThreadsInput
  childThreads: ThreadUpdateManyWithoutParentThreadInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  parentThread: ThreadUpdateOneWithoutChildThreadsInput
  reactionOnThreads: ReactionOnThreadsUpdateManyWithoutThreadInput
  reference: NullableStringFieldUpdateOperationsInput
  threadsOnMergeRequest: ThreadsOnMergeRequestUpdateOneWithoutThreadInput
  threadsOnPremise: ThreadsOnPremiseUpdateOneWithoutThreadInput
  threadsOnTimeline: ThreadsOnTimelineUpdateOneWithoutThreadInput
  threadsOnVision: ThreadsOnVisionUpdateOneWithoutThreadInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  votesOnThread: VotesOnThreadUpdateManyWithoutThreadInput
}

input ThreadUpdateManyMutationInput {
  activityDate: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  reference: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ThreadUpdateManyWithWhereWithoutAuthorInput {
  data: ThreadUpdateManyMutationInput!
  where: ThreadScalarWhereInput!
}

input ThreadUpdateManyWithWhereWithoutParentThreadInput {
  data: ThreadUpdateManyMutationInput!
  where: ThreadScalarWhereInput!
}

input ThreadUpdateManyWithoutAuthorInput {
  connect: [ThreadWhereUniqueInput!]
  connectOrCreate: [ThreadCreateOrConnectWithoutAuthorInput!]
  create: [ThreadCreateWithoutAuthorInput!]
  createMany: ThreadCreateManyAuthorInputEnvelope
  delete: [ThreadWhereUniqueInput!]
  deleteMany: [ThreadScalarWhereInput!]
  disconnect: [ThreadWhereUniqueInput!]
  set: [ThreadWhereUniqueInput!]
  update: [ThreadUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [ThreadUpdateManyWithWhereWithoutAuthorInput!]
  upsert: [ThreadUpsertWithWhereUniqueWithoutAuthorInput!]
}

input ThreadUpdateManyWithoutParentThreadInput {
  connect: [ThreadWhereUniqueInput!]
  connectOrCreate: [ThreadCreateOrConnectWithoutParentThreadInput!]
  create: [ThreadCreateWithoutParentThreadInput!]
  createMany: ThreadCreateManyParentThreadInputEnvelope
  delete: [ThreadWhereUniqueInput!]
  deleteMany: [ThreadScalarWhereInput!]
  disconnect: [ThreadWhereUniqueInput!]
  set: [ThreadWhereUniqueInput!]
  update: [ThreadUpdateWithWhereUniqueWithoutParentThreadInput!]
  updateMany: [ThreadUpdateManyWithWhereWithoutParentThreadInput!]
  upsert: [ThreadUpsertWithWhereUniqueWithoutParentThreadInput!]
}

input ThreadUpdateOneRequiredWithoutReactionOnThreadsInput {
  connect: ThreadWhereUniqueInput
  connectOrCreate: ThreadCreateOrConnectWithoutReactionOnThreadsInput
  create: ThreadCreateWithoutReactionOnThreadsInput
  update: ThreadUpdateWithoutReactionOnThreadsInput
  upsert: ThreadUpsertWithoutReactionOnThreadsInput
}

input ThreadUpdateOneRequiredWithoutThreadsOnMergeRequestInput {
  connect: ThreadWhereUniqueInput
  connectOrCreate: ThreadCreateOrConnectWithoutThreadsOnMergeRequestInput
  create: ThreadCreateWithoutThreadsOnMergeRequestInput
  update: ThreadUpdateWithoutThreadsOnMergeRequestInput
  upsert: ThreadUpsertWithoutThreadsOnMergeRequestInput
}

input ThreadUpdateOneRequiredWithoutThreadsOnPremiseInput {
  connect: ThreadWhereUniqueInput
  connectOrCreate: ThreadCreateOrConnectWithoutThreadsOnPremiseInput
  create: ThreadCreateWithoutThreadsOnPremiseInput
  update: ThreadUpdateWithoutThreadsOnPremiseInput
  upsert: ThreadUpsertWithoutThreadsOnPremiseInput
}

input ThreadUpdateOneRequiredWithoutThreadsOnTimelineInput {
  connect: ThreadWhereUniqueInput
  connectOrCreate: ThreadCreateOrConnectWithoutThreadsOnTimelineInput
  create: ThreadCreateWithoutThreadsOnTimelineInput
  update: ThreadUpdateWithoutThreadsOnTimelineInput
  upsert: ThreadUpsertWithoutThreadsOnTimelineInput
}

input ThreadUpdateOneRequiredWithoutThreadsOnVisionInput {
  connect: ThreadWhereUniqueInput
  connectOrCreate: ThreadCreateOrConnectWithoutThreadsOnVisionInput
  create: ThreadCreateWithoutThreadsOnVisionInput
  update: ThreadUpdateWithoutThreadsOnVisionInput
  upsert: ThreadUpsertWithoutThreadsOnVisionInput
}

input ThreadUpdateOneRequiredWithoutVotesOnThreadInput {
  connect: ThreadWhereUniqueInput
  connectOrCreate: ThreadCreateOrConnectWithoutVotesOnThreadInput
  create: ThreadCreateWithoutVotesOnThreadInput
  update: ThreadUpdateWithoutVotesOnThreadInput
  upsert: ThreadUpsertWithoutVotesOnThreadInput
}

input ThreadUpdateOneWithoutChildThreadsInput {
  connect: ThreadWhereUniqueInput
  connectOrCreate: ThreadCreateOrConnectWithoutChildThreadsInput
  create: ThreadCreateWithoutChildThreadsInput
  delete: Boolean
  disconnect: Boolean
  update: ThreadUpdateWithoutChildThreadsInput
  upsert: ThreadUpsertWithoutChildThreadsInput
}

input ThreadUpdateWithWhereUniqueWithoutAuthorInput {
  data: ThreadUpdateWithoutAuthorInput!
  where: ThreadWhereUniqueInput!
}

input ThreadUpdateWithWhereUniqueWithoutParentThreadInput {
  data: ThreadUpdateWithoutParentThreadInput!
  where: ThreadWhereUniqueInput!
}

input ThreadUpdateWithoutAuthorInput {
  activityDate: NullableDateTimeFieldUpdateOperationsInput
  childThreads: ThreadUpdateManyWithoutParentThreadInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  parentThread: ThreadUpdateOneWithoutChildThreadsInput
  reactionOnThreads: ReactionOnThreadsUpdateManyWithoutThreadInput
  reference: NullableStringFieldUpdateOperationsInput
  threadsOnMergeRequest: ThreadsOnMergeRequestUpdateOneWithoutThreadInput
  threadsOnPremise: ThreadsOnPremiseUpdateOneWithoutThreadInput
  threadsOnTimeline: ThreadsOnTimelineUpdateOneWithoutThreadInput
  threadsOnVision: ThreadsOnVisionUpdateOneWithoutThreadInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  votesOnThread: VotesOnThreadUpdateManyWithoutThreadInput
}

input ThreadUpdateWithoutChildThreadsInput {
  activityDate: NullableDateTimeFieldUpdateOperationsInput
  author: UserUpdateOneWithoutThreadsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  parentThread: ThreadUpdateOneWithoutChildThreadsInput
  reactionOnThreads: ReactionOnThreadsUpdateManyWithoutThreadInput
  reference: NullableStringFieldUpdateOperationsInput
  threadsOnMergeRequest: ThreadsOnMergeRequestUpdateOneWithoutThreadInput
  threadsOnPremise: ThreadsOnPremiseUpdateOneWithoutThreadInput
  threadsOnTimeline: ThreadsOnTimelineUpdateOneWithoutThreadInput
  threadsOnVision: ThreadsOnVisionUpdateOneWithoutThreadInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  votesOnThread: VotesOnThreadUpdateManyWithoutThreadInput
}

input ThreadUpdateWithoutParentThreadInput {
  activityDate: NullableDateTimeFieldUpdateOperationsInput
  author: UserUpdateOneWithoutThreadsInput
  childThreads: ThreadUpdateManyWithoutParentThreadInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  reactionOnThreads: ReactionOnThreadsUpdateManyWithoutThreadInput
  reference: NullableStringFieldUpdateOperationsInput
  threadsOnMergeRequest: ThreadsOnMergeRequestUpdateOneWithoutThreadInput
  threadsOnPremise: ThreadsOnPremiseUpdateOneWithoutThreadInput
  threadsOnTimeline: ThreadsOnTimelineUpdateOneWithoutThreadInput
  threadsOnVision: ThreadsOnVisionUpdateOneWithoutThreadInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  votesOnThread: VotesOnThreadUpdateManyWithoutThreadInput
}

input ThreadUpdateWithoutReactionOnThreadsInput {
  activityDate: NullableDateTimeFieldUpdateOperationsInput
  author: UserUpdateOneWithoutThreadsInput
  childThreads: ThreadUpdateManyWithoutParentThreadInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  parentThread: ThreadUpdateOneWithoutChildThreadsInput
  reference: NullableStringFieldUpdateOperationsInput
  threadsOnMergeRequest: ThreadsOnMergeRequestUpdateOneWithoutThreadInput
  threadsOnPremise: ThreadsOnPremiseUpdateOneWithoutThreadInput
  threadsOnTimeline: ThreadsOnTimelineUpdateOneWithoutThreadInput
  threadsOnVision: ThreadsOnVisionUpdateOneWithoutThreadInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  votesOnThread: VotesOnThreadUpdateManyWithoutThreadInput
}

input ThreadUpdateWithoutThreadsOnMergeRequestInput {
  activityDate: NullableDateTimeFieldUpdateOperationsInput
  author: UserUpdateOneWithoutThreadsInput
  childThreads: ThreadUpdateManyWithoutParentThreadInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  parentThread: ThreadUpdateOneWithoutChildThreadsInput
  reactionOnThreads: ReactionOnThreadsUpdateManyWithoutThreadInput
  reference: NullableStringFieldUpdateOperationsInput
  threadsOnPremise: ThreadsOnPremiseUpdateOneWithoutThreadInput
  threadsOnTimeline: ThreadsOnTimelineUpdateOneWithoutThreadInput
  threadsOnVision: ThreadsOnVisionUpdateOneWithoutThreadInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  votesOnThread: VotesOnThreadUpdateManyWithoutThreadInput
}

input ThreadUpdateWithoutThreadsOnPremiseInput {
  activityDate: NullableDateTimeFieldUpdateOperationsInput
  author: UserUpdateOneWithoutThreadsInput
  childThreads: ThreadUpdateManyWithoutParentThreadInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  parentThread: ThreadUpdateOneWithoutChildThreadsInput
  reactionOnThreads: ReactionOnThreadsUpdateManyWithoutThreadInput
  reference: NullableStringFieldUpdateOperationsInput
  threadsOnMergeRequest: ThreadsOnMergeRequestUpdateOneWithoutThreadInput
  threadsOnTimeline: ThreadsOnTimelineUpdateOneWithoutThreadInput
  threadsOnVision: ThreadsOnVisionUpdateOneWithoutThreadInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  votesOnThread: VotesOnThreadUpdateManyWithoutThreadInput
}

input ThreadUpdateWithoutThreadsOnTimelineInput {
  activityDate: NullableDateTimeFieldUpdateOperationsInput
  author: UserUpdateOneWithoutThreadsInput
  childThreads: ThreadUpdateManyWithoutParentThreadInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  parentThread: ThreadUpdateOneWithoutChildThreadsInput
  reactionOnThreads: ReactionOnThreadsUpdateManyWithoutThreadInput
  reference: NullableStringFieldUpdateOperationsInput
  threadsOnMergeRequest: ThreadsOnMergeRequestUpdateOneWithoutThreadInput
  threadsOnPremise: ThreadsOnPremiseUpdateOneWithoutThreadInput
  threadsOnVision: ThreadsOnVisionUpdateOneWithoutThreadInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  votesOnThread: VotesOnThreadUpdateManyWithoutThreadInput
}

input ThreadUpdateWithoutThreadsOnVisionInput {
  activityDate: NullableDateTimeFieldUpdateOperationsInput
  author: UserUpdateOneWithoutThreadsInput
  childThreads: ThreadUpdateManyWithoutParentThreadInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  parentThread: ThreadUpdateOneWithoutChildThreadsInput
  reactionOnThreads: ReactionOnThreadsUpdateManyWithoutThreadInput
  reference: NullableStringFieldUpdateOperationsInput
  threadsOnMergeRequest: ThreadsOnMergeRequestUpdateOneWithoutThreadInput
  threadsOnPremise: ThreadsOnPremiseUpdateOneWithoutThreadInput
  threadsOnTimeline: ThreadsOnTimelineUpdateOneWithoutThreadInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  votesOnThread: VotesOnThreadUpdateManyWithoutThreadInput
}

input ThreadUpdateWithoutVotesOnThreadInput {
  activityDate: NullableDateTimeFieldUpdateOperationsInput
  author: UserUpdateOneWithoutThreadsInput
  childThreads: ThreadUpdateManyWithoutParentThreadInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  parentThread: ThreadUpdateOneWithoutChildThreadsInput
  reactionOnThreads: ReactionOnThreadsUpdateManyWithoutThreadInput
  reference: NullableStringFieldUpdateOperationsInput
  threadsOnMergeRequest: ThreadsOnMergeRequestUpdateOneWithoutThreadInput
  threadsOnPremise: ThreadsOnPremiseUpdateOneWithoutThreadInput
  threadsOnTimeline: ThreadsOnTimelineUpdateOneWithoutThreadInput
  threadsOnVision: ThreadsOnVisionUpdateOneWithoutThreadInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input ThreadUpsertWithWhereUniqueWithoutAuthorInput {
  create: ThreadCreateWithoutAuthorInput!
  update: ThreadUpdateWithoutAuthorInput!
  where: ThreadWhereUniqueInput!
}

input ThreadUpsertWithWhereUniqueWithoutParentThreadInput {
  create: ThreadCreateWithoutParentThreadInput!
  update: ThreadUpdateWithoutParentThreadInput!
  where: ThreadWhereUniqueInput!
}

input ThreadUpsertWithoutChildThreadsInput {
  create: ThreadCreateWithoutChildThreadsInput!
  update: ThreadUpdateWithoutChildThreadsInput!
}

input ThreadUpsertWithoutReactionOnThreadsInput {
  create: ThreadCreateWithoutReactionOnThreadsInput!
  update: ThreadUpdateWithoutReactionOnThreadsInput!
}

input ThreadUpsertWithoutThreadsOnMergeRequestInput {
  create: ThreadCreateWithoutThreadsOnMergeRequestInput!
  update: ThreadUpdateWithoutThreadsOnMergeRequestInput!
}

input ThreadUpsertWithoutThreadsOnPremiseInput {
  create: ThreadCreateWithoutThreadsOnPremiseInput!
  update: ThreadUpdateWithoutThreadsOnPremiseInput!
}

input ThreadUpsertWithoutThreadsOnTimelineInput {
  create: ThreadCreateWithoutThreadsOnTimelineInput!
  update: ThreadUpdateWithoutThreadsOnTimelineInput!
}

input ThreadUpsertWithoutThreadsOnVisionInput {
  create: ThreadCreateWithoutThreadsOnVisionInput!
  update: ThreadUpdateWithoutThreadsOnVisionInput!
}

input ThreadUpsertWithoutVotesOnThreadInput {
  create: ThreadCreateWithoutVotesOnThreadInput!
  update: ThreadUpdateWithoutVotesOnThreadInput!
}

input ThreadWhereInput {
  AND: [ThreadWhereInput!]
  NOT: [ThreadWhereInput!]
  OR: [ThreadWhereInput!]
  activityDate: DateTimeNullableFilter
  author: UserRelationFilter
  authorId: StringNullableFilter
  childThreads: ThreadListRelationFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  id: StringFilter
  parentThread: ThreadRelationFilter
  parentThreadId: StringNullableFilter
  reactionOnThreads: ReactionOnThreadsListRelationFilter
  reference: StringNullableFilter
  threadsOnMergeRequest: ThreadsOnMergeRequestRelationFilter
  threadsOnPremise: ThreadsOnPremiseRelationFilter
  threadsOnTimeline: ThreadsOnTimelineRelationFilter
  threadsOnVision: ThreadsOnVisionRelationFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  votesOnThread: VotesOnThreadListRelationFilter
}

input ThreadWhereUniqueInput {
  id: String
}

type ThreadsOnMergeRequest {
  assignedAt: DateTime!
  mergeRequest: MergeRequest!
  mergeRequestId: String!
  thread: Thread!
  threadId: String!
}

type ThreadsOnMergeRequestCountAggregate {
  _all: Int!
  assignedAt: Int!
  mergeRequestId: Int!
  threadId: Int!
}

input ThreadsOnMergeRequestCountOrderByAggregateInput {
  assignedAt: SortOrder
  mergeRequestId: SortOrder
  threadId: SortOrder
}

input ThreadsOnMergeRequestCreateInput {
  assignedAt: DateTime
  mergeRequest: MergeRequestCreateNestedOneWithoutThreadsOnMergeRequestInput!
  thread: ThreadCreateNestedOneWithoutThreadsOnMergeRequestInput!
}

input ThreadsOnMergeRequestCreateManyInput {
  assignedAt: DateTime
  mergeRequestId: String!
  threadId: String!
}

input ThreadsOnMergeRequestCreateManyMergeRequestInput {
  assignedAt: DateTime
  threadId: String!
}

input ThreadsOnMergeRequestCreateManyMergeRequestInputEnvelope {
  data: [ThreadsOnMergeRequestCreateManyMergeRequestInput!]!
  skipDuplicates: Boolean
}

input ThreadsOnMergeRequestCreateNestedManyWithoutMergeRequestInput {
  connect: [ThreadsOnMergeRequestWhereUniqueInput!]
  connectOrCreate: [ThreadsOnMergeRequestCreateOrConnectWithoutMergeRequestInput!]
  create: [ThreadsOnMergeRequestCreateWithoutMergeRequestInput!]
  createMany: ThreadsOnMergeRequestCreateManyMergeRequestInputEnvelope
}

input ThreadsOnMergeRequestCreateNestedOneWithoutThreadInput {
  connect: ThreadsOnMergeRequestWhereUniqueInput
  connectOrCreate: ThreadsOnMergeRequestCreateOrConnectWithoutThreadInput
  create: ThreadsOnMergeRequestCreateWithoutThreadInput
}

input ThreadsOnMergeRequestCreateOrConnectWithoutMergeRequestInput {
  create: ThreadsOnMergeRequestCreateWithoutMergeRequestInput!
  where: ThreadsOnMergeRequestWhereUniqueInput!
}

input ThreadsOnMergeRequestCreateOrConnectWithoutThreadInput {
  create: ThreadsOnMergeRequestCreateWithoutThreadInput!
  where: ThreadsOnMergeRequestWhereUniqueInput!
}

input ThreadsOnMergeRequestCreateWithoutMergeRequestInput {
  assignedAt: DateTime
  thread: ThreadCreateNestedOneWithoutThreadsOnMergeRequestInput!
}

input ThreadsOnMergeRequestCreateWithoutThreadInput {
  assignedAt: DateTime
  mergeRequest: MergeRequestCreateNestedOneWithoutThreadsOnMergeRequestInput!
}

type ThreadsOnMergeRequestGroupBy {
  _count: ThreadsOnMergeRequestCountAggregate
  _max: ThreadsOnMergeRequestMaxAggregate
  _min: ThreadsOnMergeRequestMinAggregate
  assignedAt: DateTime!
  mergeRequestId: String!
  threadId: String!
}

input ThreadsOnMergeRequestListRelationFilter {
  every: ThreadsOnMergeRequestWhereInput
  none: ThreadsOnMergeRequestWhereInput
  some: ThreadsOnMergeRequestWhereInput
}

type ThreadsOnMergeRequestMaxAggregate {
  assignedAt: DateTime
  mergeRequestId: String
  threadId: String
}

input ThreadsOnMergeRequestMaxOrderByAggregateInput {
  assignedAt: SortOrder
  mergeRequestId: SortOrder
  threadId: SortOrder
}

type ThreadsOnMergeRequestMinAggregate {
  assignedAt: DateTime
  mergeRequestId: String
  threadId: String
}

input ThreadsOnMergeRequestMinOrderByAggregateInput {
  assignedAt: SortOrder
  mergeRequestId: SortOrder
  threadId: SortOrder
}

input ThreadsOnMergeRequestOrderByRelationAggregateInput {
  _count: SortOrder
}

input ThreadsOnMergeRequestOrderByWithAggregationInput {
  _count: ThreadsOnMergeRequestCountOrderByAggregateInput
  _max: ThreadsOnMergeRequestMaxOrderByAggregateInput
  _min: ThreadsOnMergeRequestMinOrderByAggregateInput
  assignedAt: SortOrder
  mergeRequestId: SortOrder
  threadId: SortOrder
}

input ThreadsOnMergeRequestOrderByWithRelationInput {
  assignedAt: SortOrder
  mergeRequest: MergeRequestOrderByWithRelationInput
  mergeRequestId: SortOrder
  thread: ThreadOrderByWithRelationInput
  threadId: SortOrder
}

input ThreadsOnMergeRequestRelationFilter {
  is: ThreadsOnMergeRequestWhereInput
  isNot: ThreadsOnMergeRequestWhereInput
}

enum ThreadsOnMergeRequestScalarFieldEnum {
  assignedAt
  mergeRequestId
  threadId
}

input ThreadsOnMergeRequestScalarWhereInput {
  AND: [ThreadsOnMergeRequestScalarWhereInput!]
  NOT: [ThreadsOnMergeRequestScalarWhereInput!]
  OR: [ThreadsOnMergeRequestScalarWhereInput!]
  assignedAt: DateTimeFilter
  mergeRequestId: StringFilter
  threadId: StringFilter
}

input ThreadsOnMergeRequestScalarWhereWithAggregatesInput {
  AND: [ThreadsOnMergeRequestScalarWhereWithAggregatesInput!]
  NOT: [ThreadsOnMergeRequestScalarWhereWithAggregatesInput!]
  OR: [ThreadsOnMergeRequestScalarWhereWithAggregatesInput!]
  assignedAt: DateTimeWithAggregatesFilter
  mergeRequestId: StringWithAggregatesFilter
  threadId: StringWithAggregatesFilter
}

input ThreadsOnMergeRequestThreadIdMergeRequestIdCompoundUniqueInput {
  mergeRequestId: String!
  threadId: String!
}

input ThreadsOnMergeRequestUpdateInput {
  assignedAt: DateTimeFieldUpdateOperationsInput
  mergeRequest: MergeRequestUpdateOneRequiredWithoutThreadsOnMergeRequestInput
  thread: ThreadUpdateOneRequiredWithoutThreadsOnMergeRequestInput
}

input ThreadsOnMergeRequestUpdateManyMutationInput {
  assignedAt: DateTimeFieldUpdateOperationsInput
}

input ThreadsOnMergeRequestUpdateManyWithWhereWithoutMergeRequestInput {
  data: ThreadsOnMergeRequestUpdateManyMutationInput!
  where: ThreadsOnMergeRequestScalarWhereInput!
}

input ThreadsOnMergeRequestUpdateManyWithoutMergeRequestInput {
  connect: [ThreadsOnMergeRequestWhereUniqueInput!]
  connectOrCreate: [ThreadsOnMergeRequestCreateOrConnectWithoutMergeRequestInput!]
  create: [ThreadsOnMergeRequestCreateWithoutMergeRequestInput!]
  createMany: ThreadsOnMergeRequestCreateManyMergeRequestInputEnvelope
  delete: [ThreadsOnMergeRequestWhereUniqueInput!]
  deleteMany: [ThreadsOnMergeRequestScalarWhereInput!]
  disconnect: [ThreadsOnMergeRequestWhereUniqueInput!]
  set: [ThreadsOnMergeRequestWhereUniqueInput!]
  update: [ThreadsOnMergeRequestUpdateWithWhereUniqueWithoutMergeRequestInput!]
  updateMany: [ThreadsOnMergeRequestUpdateManyWithWhereWithoutMergeRequestInput!]
  upsert: [ThreadsOnMergeRequestUpsertWithWhereUniqueWithoutMergeRequestInput!]
}

input ThreadsOnMergeRequestUpdateOneWithoutThreadInput {
  connect: ThreadsOnMergeRequestWhereUniqueInput
  connectOrCreate: ThreadsOnMergeRequestCreateOrConnectWithoutThreadInput
  create: ThreadsOnMergeRequestCreateWithoutThreadInput
  delete: Boolean
  disconnect: Boolean
  update: ThreadsOnMergeRequestUpdateWithoutThreadInput
  upsert: ThreadsOnMergeRequestUpsertWithoutThreadInput
}

input ThreadsOnMergeRequestUpdateWithWhereUniqueWithoutMergeRequestInput {
  data: ThreadsOnMergeRequestUpdateWithoutMergeRequestInput!
  where: ThreadsOnMergeRequestWhereUniqueInput!
}

input ThreadsOnMergeRequestUpdateWithoutMergeRequestInput {
  assignedAt: DateTimeFieldUpdateOperationsInput
  thread: ThreadUpdateOneRequiredWithoutThreadsOnMergeRequestInput
}

input ThreadsOnMergeRequestUpdateWithoutThreadInput {
  assignedAt: DateTimeFieldUpdateOperationsInput
  mergeRequest: MergeRequestUpdateOneRequiredWithoutThreadsOnMergeRequestInput
}

input ThreadsOnMergeRequestUpsertWithWhereUniqueWithoutMergeRequestInput {
  create: ThreadsOnMergeRequestCreateWithoutMergeRequestInput!
  update: ThreadsOnMergeRequestUpdateWithoutMergeRequestInput!
  where: ThreadsOnMergeRequestWhereUniqueInput!
}

input ThreadsOnMergeRequestUpsertWithoutThreadInput {
  create: ThreadsOnMergeRequestCreateWithoutThreadInput!
  update: ThreadsOnMergeRequestUpdateWithoutThreadInput!
}

input ThreadsOnMergeRequestWhereInput {
  AND: [ThreadsOnMergeRequestWhereInput!]
  NOT: [ThreadsOnMergeRequestWhereInput!]
  OR: [ThreadsOnMergeRequestWhereInput!]
  assignedAt: DateTimeFilter
  mergeRequest: MergeRequestRelationFilter
  mergeRequestId: StringFilter
  thread: ThreadRelationFilter
  threadId: StringFilter
}

input ThreadsOnMergeRequestWhereUniqueInput {
  threadId: String
  threadId_mergeRequestId: ThreadsOnMergeRequestThreadIdMergeRequestIdCompoundUniqueInput
}

type ThreadsOnPremise {
  assignedAt: DateTime!
  premise: Premise!
  premiseId: String!
  thread: Thread!
  threadId: String!
}

type ThreadsOnPremiseCountAggregate {
  _all: Int!
  assignedAt: Int!
  premiseId: Int!
  threadId: Int!
}

input ThreadsOnPremiseCountOrderByAggregateInput {
  assignedAt: SortOrder
  premiseId: SortOrder
  threadId: SortOrder
}

input ThreadsOnPremiseCreateInput {
  assignedAt: DateTime
  premise: PremiseCreateNestedOneWithoutThreadsOnPremiseInput!
  thread: ThreadCreateNestedOneWithoutThreadsOnPremiseInput!
}

input ThreadsOnPremiseCreateManyInput {
  assignedAt: DateTime
  premiseId: String!
  threadId: String!
}

input ThreadsOnPremiseCreateManyPremiseInput {
  assignedAt: DateTime
  threadId: String!
}

input ThreadsOnPremiseCreateManyPremiseInputEnvelope {
  data: [ThreadsOnPremiseCreateManyPremiseInput!]!
  skipDuplicates: Boolean
}

input ThreadsOnPremiseCreateNestedManyWithoutPremiseInput {
  connect: [ThreadsOnPremiseWhereUniqueInput!]
  connectOrCreate: [ThreadsOnPremiseCreateOrConnectWithoutPremiseInput!]
  create: [ThreadsOnPremiseCreateWithoutPremiseInput!]
  createMany: ThreadsOnPremiseCreateManyPremiseInputEnvelope
}

input ThreadsOnPremiseCreateNestedOneWithoutThreadInput {
  connect: ThreadsOnPremiseWhereUniqueInput
  connectOrCreate: ThreadsOnPremiseCreateOrConnectWithoutThreadInput
  create: ThreadsOnPremiseCreateWithoutThreadInput
}

input ThreadsOnPremiseCreateOrConnectWithoutPremiseInput {
  create: ThreadsOnPremiseCreateWithoutPremiseInput!
  where: ThreadsOnPremiseWhereUniqueInput!
}

input ThreadsOnPremiseCreateOrConnectWithoutThreadInput {
  create: ThreadsOnPremiseCreateWithoutThreadInput!
  where: ThreadsOnPremiseWhereUniqueInput!
}

input ThreadsOnPremiseCreateWithoutPremiseInput {
  assignedAt: DateTime
  thread: ThreadCreateNestedOneWithoutThreadsOnPremiseInput!
}

input ThreadsOnPremiseCreateWithoutThreadInput {
  assignedAt: DateTime
  premise: PremiseCreateNestedOneWithoutThreadsOnPremiseInput!
}

type ThreadsOnPremiseGroupBy {
  _count: ThreadsOnPremiseCountAggregate
  _max: ThreadsOnPremiseMaxAggregate
  _min: ThreadsOnPremiseMinAggregate
  assignedAt: DateTime!
  premiseId: String!
  threadId: String!
}

input ThreadsOnPremiseListRelationFilter {
  every: ThreadsOnPremiseWhereInput
  none: ThreadsOnPremiseWhereInput
  some: ThreadsOnPremiseWhereInput
}

type ThreadsOnPremiseMaxAggregate {
  assignedAt: DateTime
  premiseId: String
  threadId: String
}

input ThreadsOnPremiseMaxOrderByAggregateInput {
  assignedAt: SortOrder
  premiseId: SortOrder
  threadId: SortOrder
}

type ThreadsOnPremiseMinAggregate {
  assignedAt: DateTime
  premiseId: String
  threadId: String
}

input ThreadsOnPremiseMinOrderByAggregateInput {
  assignedAt: SortOrder
  premiseId: SortOrder
  threadId: SortOrder
}

input ThreadsOnPremiseOrderByRelationAggregateInput {
  _count: SortOrder
}

input ThreadsOnPremiseOrderByWithAggregationInput {
  _count: ThreadsOnPremiseCountOrderByAggregateInput
  _max: ThreadsOnPremiseMaxOrderByAggregateInput
  _min: ThreadsOnPremiseMinOrderByAggregateInput
  assignedAt: SortOrder
  premiseId: SortOrder
  threadId: SortOrder
}

input ThreadsOnPremiseOrderByWithRelationInput {
  assignedAt: SortOrder
  premise: PremiseOrderByWithRelationInput
  premiseId: SortOrder
  thread: ThreadOrderByWithRelationInput
  threadId: SortOrder
}

input ThreadsOnPremiseRelationFilter {
  is: ThreadsOnPremiseWhereInput
  isNot: ThreadsOnPremiseWhereInput
}

enum ThreadsOnPremiseScalarFieldEnum {
  assignedAt
  premiseId
  threadId
}

input ThreadsOnPremiseScalarWhereInput {
  AND: [ThreadsOnPremiseScalarWhereInput!]
  NOT: [ThreadsOnPremiseScalarWhereInput!]
  OR: [ThreadsOnPremiseScalarWhereInput!]
  assignedAt: DateTimeFilter
  premiseId: StringFilter
  threadId: StringFilter
}

input ThreadsOnPremiseScalarWhereWithAggregatesInput {
  AND: [ThreadsOnPremiseScalarWhereWithAggregatesInput!]
  NOT: [ThreadsOnPremiseScalarWhereWithAggregatesInput!]
  OR: [ThreadsOnPremiseScalarWhereWithAggregatesInput!]
  assignedAt: DateTimeWithAggregatesFilter
  premiseId: StringWithAggregatesFilter
  threadId: StringWithAggregatesFilter
}

input ThreadsOnPremiseThreadIdPremiseIdCompoundUniqueInput {
  premiseId: String!
  threadId: String!
}

input ThreadsOnPremiseUpdateInput {
  assignedAt: DateTimeFieldUpdateOperationsInput
  premise: PremiseUpdateOneRequiredWithoutThreadsOnPremiseInput
  thread: ThreadUpdateOneRequiredWithoutThreadsOnPremiseInput
}

input ThreadsOnPremiseUpdateManyMutationInput {
  assignedAt: DateTimeFieldUpdateOperationsInput
}

input ThreadsOnPremiseUpdateManyWithWhereWithoutPremiseInput {
  data: ThreadsOnPremiseUpdateManyMutationInput!
  where: ThreadsOnPremiseScalarWhereInput!
}

input ThreadsOnPremiseUpdateManyWithoutPremiseInput {
  connect: [ThreadsOnPremiseWhereUniqueInput!]
  connectOrCreate: [ThreadsOnPremiseCreateOrConnectWithoutPremiseInput!]
  create: [ThreadsOnPremiseCreateWithoutPremiseInput!]
  createMany: ThreadsOnPremiseCreateManyPremiseInputEnvelope
  delete: [ThreadsOnPremiseWhereUniqueInput!]
  deleteMany: [ThreadsOnPremiseScalarWhereInput!]
  disconnect: [ThreadsOnPremiseWhereUniqueInput!]
  set: [ThreadsOnPremiseWhereUniqueInput!]
  update: [ThreadsOnPremiseUpdateWithWhereUniqueWithoutPremiseInput!]
  updateMany: [ThreadsOnPremiseUpdateManyWithWhereWithoutPremiseInput!]
  upsert: [ThreadsOnPremiseUpsertWithWhereUniqueWithoutPremiseInput!]
}

input ThreadsOnPremiseUpdateOneWithoutThreadInput {
  connect: ThreadsOnPremiseWhereUniqueInput
  connectOrCreate: ThreadsOnPremiseCreateOrConnectWithoutThreadInput
  create: ThreadsOnPremiseCreateWithoutThreadInput
  delete: Boolean
  disconnect: Boolean
  update: ThreadsOnPremiseUpdateWithoutThreadInput
  upsert: ThreadsOnPremiseUpsertWithoutThreadInput
}

input ThreadsOnPremiseUpdateWithWhereUniqueWithoutPremiseInput {
  data: ThreadsOnPremiseUpdateWithoutPremiseInput!
  where: ThreadsOnPremiseWhereUniqueInput!
}

input ThreadsOnPremiseUpdateWithoutPremiseInput {
  assignedAt: DateTimeFieldUpdateOperationsInput
  thread: ThreadUpdateOneRequiredWithoutThreadsOnPremiseInput
}

input ThreadsOnPremiseUpdateWithoutThreadInput {
  assignedAt: DateTimeFieldUpdateOperationsInput
  premise: PremiseUpdateOneRequiredWithoutThreadsOnPremiseInput
}

input ThreadsOnPremiseUpsertWithWhereUniqueWithoutPremiseInput {
  create: ThreadsOnPremiseCreateWithoutPremiseInput!
  update: ThreadsOnPremiseUpdateWithoutPremiseInput!
  where: ThreadsOnPremiseWhereUniqueInput!
}

input ThreadsOnPremiseUpsertWithoutThreadInput {
  create: ThreadsOnPremiseCreateWithoutThreadInput!
  update: ThreadsOnPremiseUpdateWithoutThreadInput!
}

input ThreadsOnPremiseWhereInput {
  AND: [ThreadsOnPremiseWhereInput!]
  NOT: [ThreadsOnPremiseWhereInput!]
  OR: [ThreadsOnPremiseWhereInput!]
  assignedAt: DateTimeFilter
  premise: PremiseRelationFilter
  premiseId: StringFilter
  thread: ThreadRelationFilter
  threadId: StringFilter
}

input ThreadsOnPremiseWhereUniqueInput {
  threadId: String
  threadId_premiseId: ThreadsOnPremiseThreadIdPremiseIdCompoundUniqueInput
}

type ThreadsOnTimeline {
  assignedAt: DateTime!
  thread: Thread!
  threadId: String!
  timeline: Timeline!
  timelineId: String!
}

type ThreadsOnTimelineCountAggregate {
  _all: Int!
  assignedAt: Int!
  threadId: Int!
  timelineId: Int!
}

input ThreadsOnTimelineCountOrderByAggregateInput {
  assignedAt: SortOrder
  threadId: SortOrder
  timelineId: SortOrder
}

input ThreadsOnTimelineCreateInput {
  assignedAt: DateTime
  thread: ThreadCreateNestedOneWithoutThreadsOnTimelineInput!
  timeline: TimelineCreateNestedOneWithoutThreadsOnTimelineInput!
}

input ThreadsOnTimelineCreateManyInput {
  assignedAt: DateTime
  threadId: String!
  timelineId: String!
}

input ThreadsOnTimelineCreateManyTimelineInput {
  assignedAt: DateTime
  threadId: String!
}

input ThreadsOnTimelineCreateManyTimelineInputEnvelope {
  data: [ThreadsOnTimelineCreateManyTimelineInput!]!
  skipDuplicates: Boolean
}

input ThreadsOnTimelineCreateNestedManyWithoutTimelineInput {
  connect: [ThreadsOnTimelineWhereUniqueInput!]
  connectOrCreate: [ThreadsOnTimelineCreateOrConnectWithoutTimelineInput!]
  create: [ThreadsOnTimelineCreateWithoutTimelineInput!]
  createMany: ThreadsOnTimelineCreateManyTimelineInputEnvelope
}

input ThreadsOnTimelineCreateNestedOneWithoutThreadInput {
  connect: ThreadsOnTimelineWhereUniqueInput
  connectOrCreate: ThreadsOnTimelineCreateOrConnectWithoutThreadInput
  create: ThreadsOnTimelineCreateWithoutThreadInput
}

input ThreadsOnTimelineCreateOrConnectWithoutThreadInput {
  create: ThreadsOnTimelineCreateWithoutThreadInput!
  where: ThreadsOnTimelineWhereUniqueInput!
}

input ThreadsOnTimelineCreateOrConnectWithoutTimelineInput {
  create: ThreadsOnTimelineCreateWithoutTimelineInput!
  where: ThreadsOnTimelineWhereUniqueInput!
}

input ThreadsOnTimelineCreateWithoutThreadInput {
  assignedAt: DateTime
  timeline: TimelineCreateNestedOneWithoutThreadsOnTimelineInput!
}

input ThreadsOnTimelineCreateWithoutTimelineInput {
  assignedAt: DateTime
  thread: ThreadCreateNestedOneWithoutThreadsOnTimelineInput!
}

type ThreadsOnTimelineGroupBy {
  _count: ThreadsOnTimelineCountAggregate
  _max: ThreadsOnTimelineMaxAggregate
  _min: ThreadsOnTimelineMinAggregate
  assignedAt: DateTime!
  threadId: String!
  timelineId: String!
}

input ThreadsOnTimelineListRelationFilter {
  every: ThreadsOnTimelineWhereInput
  none: ThreadsOnTimelineWhereInput
  some: ThreadsOnTimelineWhereInput
}

type ThreadsOnTimelineMaxAggregate {
  assignedAt: DateTime
  threadId: String
  timelineId: String
}

input ThreadsOnTimelineMaxOrderByAggregateInput {
  assignedAt: SortOrder
  threadId: SortOrder
  timelineId: SortOrder
}

type ThreadsOnTimelineMinAggregate {
  assignedAt: DateTime
  threadId: String
  timelineId: String
}

input ThreadsOnTimelineMinOrderByAggregateInput {
  assignedAt: SortOrder
  threadId: SortOrder
  timelineId: SortOrder
}

input ThreadsOnTimelineOrderByRelationAggregateInput {
  _count: SortOrder
}

input ThreadsOnTimelineOrderByWithAggregationInput {
  _count: ThreadsOnTimelineCountOrderByAggregateInput
  _max: ThreadsOnTimelineMaxOrderByAggregateInput
  _min: ThreadsOnTimelineMinOrderByAggregateInput
  assignedAt: SortOrder
  threadId: SortOrder
  timelineId: SortOrder
}

input ThreadsOnTimelineOrderByWithRelationInput {
  assignedAt: SortOrder
  thread: ThreadOrderByWithRelationInput
  threadId: SortOrder
  timeline: TimelineOrderByWithRelationInput
  timelineId: SortOrder
}

input ThreadsOnTimelineRelationFilter {
  is: ThreadsOnTimelineWhereInput
  isNot: ThreadsOnTimelineWhereInput
}

enum ThreadsOnTimelineScalarFieldEnum {
  assignedAt
  threadId
  timelineId
}

input ThreadsOnTimelineScalarWhereInput {
  AND: [ThreadsOnTimelineScalarWhereInput!]
  NOT: [ThreadsOnTimelineScalarWhereInput!]
  OR: [ThreadsOnTimelineScalarWhereInput!]
  assignedAt: DateTimeFilter
  threadId: StringFilter
  timelineId: StringFilter
}

input ThreadsOnTimelineScalarWhereWithAggregatesInput {
  AND: [ThreadsOnTimelineScalarWhereWithAggregatesInput!]
  NOT: [ThreadsOnTimelineScalarWhereWithAggregatesInput!]
  OR: [ThreadsOnTimelineScalarWhereWithAggregatesInput!]
  assignedAt: DateTimeWithAggregatesFilter
  threadId: StringWithAggregatesFilter
  timelineId: StringWithAggregatesFilter
}

input ThreadsOnTimelineThreadIdTimelineIdCompoundUniqueInput {
  threadId: String!
  timelineId: String!
}

input ThreadsOnTimelineUpdateInput {
  assignedAt: DateTimeFieldUpdateOperationsInput
  thread: ThreadUpdateOneRequiredWithoutThreadsOnTimelineInput
  timeline: TimelineUpdateOneRequiredWithoutThreadsOnTimelineInput
}

input ThreadsOnTimelineUpdateManyMutationInput {
  assignedAt: DateTimeFieldUpdateOperationsInput
}

input ThreadsOnTimelineUpdateManyWithWhereWithoutTimelineInput {
  data: ThreadsOnTimelineUpdateManyMutationInput!
  where: ThreadsOnTimelineScalarWhereInput!
}

input ThreadsOnTimelineUpdateManyWithoutTimelineInput {
  connect: [ThreadsOnTimelineWhereUniqueInput!]
  connectOrCreate: [ThreadsOnTimelineCreateOrConnectWithoutTimelineInput!]
  create: [ThreadsOnTimelineCreateWithoutTimelineInput!]
  createMany: ThreadsOnTimelineCreateManyTimelineInputEnvelope
  delete: [ThreadsOnTimelineWhereUniqueInput!]
  deleteMany: [ThreadsOnTimelineScalarWhereInput!]
  disconnect: [ThreadsOnTimelineWhereUniqueInput!]
  set: [ThreadsOnTimelineWhereUniqueInput!]
  update: [ThreadsOnTimelineUpdateWithWhereUniqueWithoutTimelineInput!]
  updateMany: [ThreadsOnTimelineUpdateManyWithWhereWithoutTimelineInput!]
  upsert: [ThreadsOnTimelineUpsertWithWhereUniqueWithoutTimelineInput!]
}

input ThreadsOnTimelineUpdateOneWithoutThreadInput {
  connect: ThreadsOnTimelineWhereUniqueInput
  connectOrCreate: ThreadsOnTimelineCreateOrConnectWithoutThreadInput
  create: ThreadsOnTimelineCreateWithoutThreadInput
  delete: Boolean
  disconnect: Boolean
  update: ThreadsOnTimelineUpdateWithoutThreadInput
  upsert: ThreadsOnTimelineUpsertWithoutThreadInput
}

input ThreadsOnTimelineUpdateWithWhereUniqueWithoutTimelineInput {
  data: ThreadsOnTimelineUpdateWithoutTimelineInput!
  where: ThreadsOnTimelineWhereUniqueInput!
}

input ThreadsOnTimelineUpdateWithoutThreadInput {
  assignedAt: DateTimeFieldUpdateOperationsInput
  timeline: TimelineUpdateOneRequiredWithoutThreadsOnTimelineInput
}

input ThreadsOnTimelineUpdateWithoutTimelineInput {
  assignedAt: DateTimeFieldUpdateOperationsInput
  thread: ThreadUpdateOneRequiredWithoutThreadsOnTimelineInput
}

input ThreadsOnTimelineUpsertWithWhereUniqueWithoutTimelineInput {
  create: ThreadsOnTimelineCreateWithoutTimelineInput!
  update: ThreadsOnTimelineUpdateWithoutTimelineInput!
  where: ThreadsOnTimelineWhereUniqueInput!
}

input ThreadsOnTimelineUpsertWithoutThreadInput {
  create: ThreadsOnTimelineCreateWithoutThreadInput!
  update: ThreadsOnTimelineUpdateWithoutThreadInput!
}

input ThreadsOnTimelineWhereInput {
  AND: [ThreadsOnTimelineWhereInput!]
  NOT: [ThreadsOnTimelineWhereInput!]
  OR: [ThreadsOnTimelineWhereInput!]
  assignedAt: DateTimeFilter
  thread: ThreadRelationFilter
  threadId: StringFilter
  timeline: TimelineRelationFilter
  timelineId: StringFilter
}

input ThreadsOnTimelineWhereUniqueInput {
  threadId: String
  threadId_timelineId: ThreadsOnTimelineThreadIdTimelineIdCompoundUniqueInput
}

type ThreadsOnVision {
  assignedAt: DateTime!
  thread: Thread!
  threadId: String!
  vision: Vision!
  visionId: String!
}

type ThreadsOnVisionCountAggregate {
  _all: Int!
  assignedAt: Int!
  threadId: Int!
  visionId: Int!
}

input ThreadsOnVisionCountOrderByAggregateInput {
  assignedAt: SortOrder
  threadId: SortOrder
  visionId: SortOrder
}

input ThreadsOnVisionCreateInput {
  assignedAt: DateTime
  thread: ThreadCreateNestedOneWithoutThreadsOnVisionInput!
  vision: VisionCreateNestedOneWithoutThreadsOnVisionInput!
}

input ThreadsOnVisionCreateManyInput {
  assignedAt: DateTime
  threadId: String!
  visionId: String!
}

input ThreadsOnVisionCreateManyVisionInput {
  assignedAt: DateTime
  threadId: String!
}

input ThreadsOnVisionCreateManyVisionInputEnvelope {
  data: [ThreadsOnVisionCreateManyVisionInput!]!
  skipDuplicates: Boolean
}

input ThreadsOnVisionCreateNestedManyWithoutVisionInput {
  connect: [ThreadsOnVisionWhereUniqueInput!]
  connectOrCreate: [ThreadsOnVisionCreateOrConnectWithoutVisionInput!]
  create: [ThreadsOnVisionCreateWithoutVisionInput!]
  createMany: ThreadsOnVisionCreateManyVisionInputEnvelope
}

input ThreadsOnVisionCreateNestedOneWithoutThreadInput {
  connect: ThreadsOnVisionWhereUniqueInput
  connectOrCreate: ThreadsOnVisionCreateOrConnectWithoutThreadInput
  create: ThreadsOnVisionCreateWithoutThreadInput
}

input ThreadsOnVisionCreateOrConnectWithoutThreadInput {
  create: ThreadsOnVisionCreateWithoutThreadInput!
  where: ThreadsOnVisionWhereUniqueInput!
}

input ThreadsOnVisionCreateOrConnectWithoutVisionInput {
  create: ThreadsOnVisionCreateWithoutVisionInput!
  where: ThreadsOnVisionWhereUniqueInput!
}

input ThreadsOnVisionCreateWithoutThreadInput {
  assignedAt: DateTime
  vision: VisionCreateNestedOneWithoutThreadsOnVisionInput!
}

input ThreadsOnVisionCreateWithoutVisionInput {
  assignedAt: DateTime
  thread: ThreadCreateNestedOneWithoutThreadsOnVisionInput!
}

type ThreadsOnVisionGroupBy {
  _count: ThreadsOnVisionCountAggregate
  _max: ThreadsOnVisionMaxAggregate
  _min: ThreadsOnVisionMinAggregate
  assignedAt: DateTime!
  threadId: String!
  visionId: String!
}

input ThreadsOnVisionListRelationFilter {
  every: ThreadsOnVisionWhereInput
  none: ThreadsOnVisionWhereInput
  some: ThreadsOnVisionWhereInput
}

type ThreadsOnVisionMaxAggregate {
  assignedAt: DateTime
  threadId: String
  visionId: String
}

input ThreadsOnVisionMaxOrderByAggregateInput {
  assignedAt: SortOrder
  threadId: SortOrder
  visionId: SortOrder
}

type ThreadsOnVisionMinAggregate {
  assignedAt: DateTime
  threadId: String
  visionId: String
}

input ThreadsOnVisionMinOrderByAggregateInput {
  assignedAt: SortOrder
  threadId: SortOrder
  visionId: SortOrder
}

input ThreadsOnVisionOrderByRelationAggregateInput {
  _count: SortOrder
}

input ThreadsOnVisionOrderByWithAggregationInput {
  _count: ThreadsOnVisionCountOrderByAggregateInput
  _max: ThreadsOnVisionMaxOrderByAggregateInput
  _min: ThreadsOnVisionMinOrderByAggregateInput
  assignedAt: SortOrder
  threadId: SortOrder
  visionId: SortOrder
}

input ThreadsOnVisionOrderByWithRelationInput {
  assignedAt: SortOrder
  thread: ThreadOrderByWithRelationInput
  threadId: SortOrder
  vision: VisionOrderByWithRelationInput
  visionId: SortOrder
}

input ThreadsOnVisionRelationFilter {
  is: ThreadsOnVisionWhereInput
  isNot: ThreadsOnVisionWhereInput
}

enum ThreadsOnVisionScalarFieldEnum {
  assignedAt
  threadId
  visionId
}

input ThreadsOnVisionScalarWhereInput {
  AND: [ThreadsOnVisionScalarWhereInput!]
  NOT: [ThreadsOnVisionScalarWhereInput!]
  OR: [ThreadsOnVisionScalarWhereInput!]
  assignedAt: DateTimeFilter
  threadId: StringFilter
  visionId: StringFilter
}

input ThreadsOnVisionScalarWhereWithAggregatesInput {
  AND: [ThreadsOnVisionScalarWhereWithAggregatesInput!]
  NOT: [ThreadsOnVisionScalarWhereWithAggregatesInput!]
  OR: [ThreadsOnVisionScalarWhereWithAggregatesInput!]
  assignedAt: DateTimeWithAggregatesFilter
  threadId: StringWithAggregatesFilter
  visionId: StringWithAggregatesFilter
}

input ThreadsOnVisionThreadIdVisionIdCompoundUniqueInput {
  threadId: String!
  visionId: String!
}

input ThreadsOnVisionUpdateInput {
  assignedAt: DateTimeFieldUpdateOperationsInput
  thread: ThreadUpdateOneRequiredWithoutThreadsOnVisionInput
  vision: VisionUpdateOneRequiredWithoutThreadsOnVisionInput
}

input ThreadsOnVisionUpdateManyMutationInput {
  assignedAt: DateTimeFieldUpdateOperationsInput
}

input ThreadsOnVisionUpdateManyWithWhereWithoutVisionInput {
  data: ThreadsOnVisionUpdateManyMutationInput!
  where: ThreadsOnVisionScalarWhereInput!
}

input ThreadsOnVisionUpdateManyWithoutVisionInput {
  connect: [ThreadsOnVisionWhereUniqueInput!]
  connectOrCreate: [ThreadsOnVisionCreateOrConnectWithoutVisionInput!]
  create: [ThreadsOnVisionCreateWithoutVisionInput!]
  createMany: ThreadsOnVisionCreateManyVisionInputEnvelope
  delete: [ThreadsOnVisionWhereUniqueInput!]
  deleteMany: [ThreadsOnVisionScalarWhereInput!]
  disconnect: [ThreadsOnVisionWhereUniqueInput!]
  set: [ThreadsOnVisionWhereUniqueInput!]
  update: [ThreadsOnVisionUpdateWithWhereUniqueWithoutVisionInput!]
  updateMany: [ThreadsOnVisionUpdateManyWithWhereWithoutVisionInput!]
  upsert: [ThreadsOnVisionUpsertWithWhereUniqueWithoutVisionInput!]
}

input ThreadsOnVisionUpdateOneWithoutThreadInput {
  connect: ThreadsOnVisionWhereUniqueInput
  connectOrCreate: ThreadsOnVisionCreateOrConnectWithoutThreadInput
  create: ThreadsOnVisionCreateWithoutThreadInput
  delete: Boolean
  disconnect: Boolean
  update: ThreadsOnVisionUpdateWithoutThreadInput
  upsert: ThreadsOnVisionUpsertWithoutThreadInput
}

input ThreadsOnVisionUpdateWithWhereUniqueWithoutVisionInput {
  data: ThreadsOnVisionUpdateWithoutVisionInput!
  where: ThreadsOnVisionWhereUniqueInput!
}

input ThreadsOnVisionUpdateWithoutThreadInput {
  assignedAt: DateTimeFieldUpdateOperationsInput
  vision: VisionUpdateOneRequiredWithoutThreadsOnVisionInput
}

input ThreadsOnVisionUpdateWithoutVisionInput {
  assignedAt: DateTimeFieldUpdateOperationsInput
  thread: ThreadUpdateOneRequiredWithoutThreadsOnVisionInput
}

input ThreadsOnVisionUpsertWithWhereUniqueWithoutVisionInput {
  create: ThreadsOnVisionCreateWithoutVisionInput!
  update: ThreadsOnVisionUpdateWithoutVisionInput!
  where: ThreadsOnVisionWhereUniqueInput!
}

input ThreadsOnVisionUpsertWithoutThreadInput {
  create: ThreadsOnVisionCreateWithoutThreadInput!
  update: ThreadsOnVisionUpdateWithoutThreadInput!
}

input ThreadsOnVisionWhereInput {
  AND: [ThreadsOnVisionWhereInput!]
  NOT: [ThreadsOnVisionWhereInput!]
  OR: [ThreadsOnVisionWhereInput!]
  assignedAt: DateTimeFilter
  thread: ThreadRelationFilter
  threadId: StringFilter
  vision: VisionRelationFilter
  visionId: StringFilter
}

input ThreadsOnVisionWhereUniqueInput {
  threadId: String
  threadId_visionId: ThreadsOnVisionThreadIdVisionIdCompoundUniqueInput
}

type Timeline {
  _count: TimelineCount
  author: User!
  authorId: String!
  description: String!
  id: String!
  premisesOnTimelines(cursor: PremisesOnTimelinesWhereUniqueInput, distinct: [PremisesOnTimelinesScalarFieldEnum!], orderBy: [PremisesOnTimelinesOrderByWithRelationInput!], skip: Int, take: Int, where: PremisesOnTimelinesWhereInput): [PremisesOnTimelines!]!
  reactionOnTimelines(cursor: ReactionOnTimelinesWhereUniqueInput, distinct: [ReactionOnTimelinesScalarFieldEnum!], orderBy: [ReactionOnTimelinesOrderByWithRelationInput!], skip: Int, take: Int, where: ReactionOnTimelinesWhereInput): [ReactionOnTimelines!]!
  status: String
  subscriptionsOnTimelines(cursor: SubscriptionsOnTimelinesWhereUniqueInput, distinct: [SubscriptionsOnTimelinesScalarFieldEnum!], orderBy: [SubscriptionsOnTimelinesOrderByWithRelationInput!], skip: Int, take: Int, where: SubscriptionsOnTimelinesWhereInput): [SubscriptionsOnTimelines!]!
  tagsOnTimelines(cursor: TagsOnTimelinesWhereUniqueInput, distinct: [TagsOnTimelinesScalarFieldEnum!], orderBy: [TagsOnTimelinesOrderByWithRelationInput!], skip: Int, take: Int, where: TagsOnTimelinesWhereInput): [TagsOnTimelines!]!
  threadsOnTimeline(cursor: ThreadsOnTimelineWhereUniqueInput, distinct: [ThreadsOnTimelineScalarFieldEnum!], orderBy: [ThreadsOnTimelineOrderByWithRelationInput!], skip: Int, take: Int, where: ThreadsOnTimelineWhereInput): [ThreadsOnTimeline!]!
  title: String!
  votesOnTimeline(cursor: VotesOnTimelineWhereUniqueInput, distinct: [VotesOnTimelineScalarFieldEnum!], orderBy: [VotesOnTimelineOrderByWithRelationInput!], skip: Int, take: Int, where: VotesOnTimelineWhereInput): [VotesOnTimeline!]!
}

type TimelineCount {
  premisesOnTimelines: Int!
  reactionOnTimelines: Int!
  subscriptionsOnTimelines: Int!
  tagsOnTimelines: Int!
  threadsOnTimeline: Int!
  votesOnTimeline: Int!
}

type TimelineCountAggregate {
  _all: Int!
  authorId: Int!
  description: Int!
  id: Int!
  status: Int!
  title: Int!
}

input TimelineCountOrderByAggregateInput {
  authorId: SortOrder
  description: SortOrder
  id: SortOrder
  status: SortOrder
  title: SortOrder
}

input TimelineCreateInput {
  author: UserCreateNestedOneWithoutTimelinesInput!
  description: String!
  id: String
  premisesOnTimelines: PremisesOnTimelinesCreateNestedManyWithoutTimelineInput
  reactionOnTimelines: ReactionOnTimelinesCreateNestedManyWithoutTimelineInput
  status: String
  subscriptionsOnTimelines: SubscriptionsOnTimelinesCreateNestedManyWithoutTimelineInput
  tagsOnTimelines: TagsOnTimelinesCreateNestedManyWithoutTimelineInput
  threadsOnTimeline: ThreadsOnTimelineCreateNestedManyWithoutTimelineInput
  title: String!
  votesOnTimeline: VotesOnTimelineCreateNestedManyWithoutTimelineInput
}

input TimelineCreateManyAuthorInput {
  description: String!
  id: String
  status: String
  title: String!
}

input TimelineCreateManyAuthorInputEnvelope {
  data: [TimelineCreateManyAuthorInput!]!
  skipDuplicates: Boolean
}

input TimelineCreateManyInput {
  authorId: String!
  description: String!
  id: String
  status: String
  title: String!
}

input TimelineCreateNestedManyWithoutAuthorInput {
  connect: [TimelineWhereUniqueInput!]
  connectOrCreate: [TimelineCreateOrConnectWithoutAuthorInput!]
  create: [TimelineCreateWithoutAuthorInput!]
  createMany: TimelineCreateManyAuthorInputEnvelope
}

input TimelineCreateNestedOneWithoutPremisesOnTimelinesInput {
  connect: TimelineWhereUniqueInput
  connectOrCreate: TimelineCreateOrConnectWithoutPremisesOnTimelinesInput
  create: TimelineCreateWithoutPremisesOnTimelinesInput
}

input TimelineCreateNestedOneWithoutReactionOnTimelinesInput {
  connect: TimelineWhereUniqueInput
  connectOrCreate: TimelineCreateOrConnectWithoutReactionOnTimelinesInput
  create: TimelineCreateWithoutReactionOnTimelinesInput
}

input TimelineCreateNestedOneWithoutSubscriptionsOnTimelinesInput {
  connect: TimelineWhereUniqueInput
  connectOrCreate: TimelineCreateOrConnectWithoutSubscriptionsOnTimelinesInput
  create: TimelineCreateWithoutSubscriptionsOnTimelinesInput
}

input TimelineCreateNestedOneWithoutTagsOnTimelinesInput {
  connect: TimelineWhereUniqueInput
  connectOrCreate: TimelineCreateOrConnectWithoutTagsOnTimelinesInput
  create: TimelineCreateWithoutTagsOnTimelinesInput
}

input TimelineCreateNestedOneWithoutThreadsOnTimelineInput {
  connect: TimelineWhereUniqueInput
  connectOrCreate: TimelineCreateOrConnectWithoutThreadsOnTimelineInput
  create: TimelineCreateWithoutThreadsOnTimelineInput
}

input TimelineCreateNestedOneWithoutVotesOnTimelineInput {
  connect: TimelineWhereUniqueInput
  connectOrCreate: TimelineCreateOrConnectWithoutVotesOnTimelineInput
  create: TimelineCreateWithoutVotesOnTimelineInput
}

input TimelineCreateOrConnectWithoutAuthorInput {
  create: TimelineCreateWithoutAuthorInput!
  where: TimelineWhereUniqueInput!
}

input TimelineCreateOrConnectWithoutPremisesOnTimelinesInput {
  create: TimelineCreateWithoutPremisesOnTimelinesInput!
  where: TimelineWhereUniqueInput!
}

input TimelineCreateOrConnectWithoutReactionOnTimelinesInput {
  create: TimelineCreateWithoutReactionOnTimelinesInput!
  where: TimelineWhereUniqueInput!
}

input TimelineCreateOrConnectWithoutSubscriptionsOnTimelinesInput {
  create: TimelineCreateWithoutSubscriptionsOnTimelinesInput!
  where: TimelineWhereUniqueInput!
}

input TimelineCreateOrConnectWithoutTagsOnTimelinesInput {
  create: TimelineCreateWithoutTagsOnTimelinesInput!
  where: TimelineWhereUniqueInput!
}

input TimelineCreateOrConnectWithoutThreadsOnTimelineInput {
  create: TimelineCreateWithoutThreadsOnTimelineInput!
  where: TimelineWhereUniqueInput!
}

input TimelineCreateOrConnectWithoutVotesOnTimelineInput {
  create: TimelineCreateWithoutVotesOnTimelineInput!
  where: TimelineWhereUniqueInput!
}

input TimelineCreateWithoutAuthorInput {
  description: String!
  id: String
  premisesOnTimelines: PremisesOnTimelinesCreateNestedManyWithoutTimelineInput
  reactionOnTimelines: ReactionOnTimelinesCreateNestedManyWithoutTimelineInput
  status: String
  subscriptionsOnTimelines: SubscriptionsOnTimelinesCreateNestedManyWithoutTimelineInput
  tagsOnTimelines: TagsOnTimelinesCreateNestedManyWithoutTimelineInput
  threadsOnTimeline: ThreadsOnTimelineCreateNestedManyWithoutTimelineInput
  title: String!
  votesOnTimeline: VotesOnTimelineCreateNestedManyWithoutTimelineInput
}

input TimelineCreateWithoutPremisesOnTimelinesInput {
  author: UserCreateNestedOneWithoutTimelinesInput!
  description: String!
  id: String
  reactionOnTimelines: ReactionOnTimelinesCreateNestedManyWithoutTimelineInput
  status: String
  subscriptionsOnTimelines: SubscriptionsOnTimelinesCreateNestedManyWithoutTimelineInput
  tagsOnTimelines: TagsOnTimelinesCreateNestedManyWithoutTimelineInput
  threadsOnTimeline: ThreadsOnTimelineCreateNestedManyWithoutTimelineInput
  title: String!
  votesOnTimeline: VotesOnTimelineCreateNestedManyWithoutTimelineInput
}

input TimelineCreateWithoutReactionOnTimelinesInput {
  author: UserCreateNestedOneWithoutTimelinesInput!
  description: String!
  id: String
  premisesOnTimelines: PremisesOnTimelinesCreateNestedManyWithoutTimelineInput
  status: String
  subscriptionsOnTimelines: SubscriptionsOnTimelinesCreateNestedManyWithoutTimelineInput
  tagsOnTimelines: TagsOnTimelinesCreateNestedManyWithoutTimelineInput
  threadsOnTimeline: ThreadsOnTimelineCreateNestedManyWithoutTimelineInput
  title: String!
  votesOnTimeline: VotesOnTimelineCreateNestedManyWithoutTimelineInput
}

input TimelineCreateWithoutSubscriptionsOnTimelinesInput {
  author: UserCreateNestedOneWithoutTimelinesInput!
  description: String!
  id: String
  premisesOnTimelines: PremisesOnTimelinesCreateNestedManyWithoutTimelineInput
  reactionOnTimelines: ReactionOnTimelinesCreateNestedManyWithoutTimelineInput
  status: String
  tagsOnTimelines: TagsOnTimelinesCreateNestedManyWithoutTimelineInput
  threadsOnTimeline: ThreadsOnTimelineCreateNestedManyWithoutTimelineInput
  title: String!
  votesOnTimeline: VotesOnTimelineCreateNestedManyWithoutTimelineInput
}

input TimelineCreateWithoutTagsOnTimelinesInput {
  author: UserCreateNestedOneWithoutTimelinesInput!
  description: String!
  id: String
  premisesOnTimelines: PremisesOnTimelinesCreateNestedManyWithoutTimelineInput
  reactionOnTimelines: ReactionOnTimelinesCreateNestedManyWithoutTimelineInput
  status: String
  subscriptionsOnTimelines: SubscriptionsOnTimelinesCreateNestedManyWithoutTimelineInput
  threadsOnTimeline: ThreadsOnTimelineCreateNestedManyWithoutTimelineInput
  title: String!
  votesOnTimeline: VotesOnTimelineCreateNestedManyWithoutTimelineInput
}

input TimelineCreateWithoutThreadsOnTimelineInput {
  author: UserCreateNestedOneWithoutTimelinesInput!
  description: String!
  id: String
  premisesOnTimelines: PremisesOnTimelinesCreateNestedManyWithoutTimelineInput
  reactionOnTimelines: ReactionOnTimelinesCreateNestedManyWithoutTimelineInput
  status: String
  subscriptionsOnTimelines: SubscriptionsOnTimelinesCreateNestedManyWithoutTimelineInput
  tagsOnTimelines: TagsOnTimelinesCreateNestedManyWithoutTimelineInput
  title: String!
  votesOnTimeline: VotesOnTimelineCreateNestedManyWithoutTimelineInput
}

input TimelineCreateWithoutVotesOnTimelineInput {
  author: UserCreateNestedOneWithoutTimelinesInput!
  description: String!
  id: String
  premisesOnTimelines: PremisesOnTimelinesCreateNestedManyWithoutTimelineInput
  reactionOnTimelines: ReactionOnTimelinesCreateNestedManyWithoutTimelineInput
  status: String
  subscriptionsOnTimelines: SubscriptionsOnTimelinesCreateNestedManyWithoutTimelineInput
  tagsOnTimelines: TagsOnTimelinesCreateNestedManyWithoutTimelineInput
  threadsOnTimeline: ThreadsOnTimelineCreateNestedManyWithoutTimelineInput
  title: String!
}

type TimelineGroupBy {
  _count: TimelineCountAggregate
  _max: TimelineMaxAggregate
  _min: TimelineMinAggregate
  authorId: String!
  description: String!
  id: String!
  status: String
  title: String!
}

input TimelineListRelationFilter {
  every: TimelineWhereInput
  none: TimelineWhereInput
  some: TimelineWhereInput
}

type TimelineMaxAggregate {
  authorId: String
  description: String
  id: String
  status: String
  title: String
}

input TimelineMaxOrderByAggregateInput {
  authorId: SortOrder
  description: SortOrder
  id: SortOrder
  status: SortOrder
  title: SortOrder
}

type TimelineMinAggregate {
  authorId: String
  description: String
  id: String
  status: String
  title: String
}

input TimelineMinOrderByAggregateInput {
  authorId: SortOrder
  description: SortOrder
  id: SortOrder
  status: SortOrder
  title: SortOrder
}

input TimelineOrderByRelationAggregateInput {
  _count: SortOrder
}

input TimelineOrderByWithAggregationInput {
  _count: TimelineCountOrderByAggregateInput
  _max: TimelineMaxOrderByAggregateInput
  _min: TimelineMinOrderByAggregateInput
  authorId: SortOrder
  description: SortOrder
  id: SortOrder
  status: SortOrder
  title: SortOrder
}

input TimelineOrderByWithRelationInput {
  author: UserOrderByWithRelationInput
  authorId: SortOrder
  description: SortOrder
  id: SortOrder
  premisesOnTimelines: PremisesOnTimelinesOrderByRelationAggregateInput
  reactionOnTimelines: ReactionOnTimelinesOrderByRelationAggregateInput
  status: SortOrder
  subscriptionsOnTimelines: SubscriptionsOnTimelinesOrderByRelationAggregateInput
  tagsOnTimelines: TagsOnTimelinesOrderByRelationAggregateInput
  threadsOnTimeline: ThreadsOnTimelineOrderByRelationAggregateInput
  title: SortOrder
  votesOnTimeline: VotesOnTimelineOrderByRelationAggregateInput
}

input TimelineRelationFilter {
  is: TimelineWhereInput
  isNot: TimelineWhereInput
}

enum TimelineScalarFieldEnum {
  authorId
  description
  id
  status
  title
}

input TimelineScalarWhereInput {
  AND: [TimelineScalarWhereInput!]
  NOT: [TimelineScalarWhereInput!]
  OR: [TimelineScalarWhereInput!]
  authorId: StringFilter
  description: StringFilter
  id: StringFilter
  status: StringNullableFilter
  title: StringFilter
}

input TimelineScalarWhereWithAggregatesInput {
  AND: [TimelineScalarWhereWithAggregatesInput!]
  NOT: [TimelineScalarWhereWithAggregatesInput!]
  OR: [TimelineScalarWhereWithAggregatesInput!]
  authorId: StringWithAggregatesFilter
  description: StringWithAggregatesFilter
  id: StringWithAggregatesFilter
  status: StringNullableWithAggregatesFilter
  title: StringWithAggregatesFilter
}

input TimelineUpdateInput {
  author: UserUpdateOneRequiredWithoutTimelinesInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  premisesOnTimelines: PremisesOnTimelinesUpdateManyWithoutTimelineInput
  reactionOnTimelines: ReactionOnTimelinesUpdateManyWithoutTimelineInput
  status: NullableStringFieldUpdateOperationsInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesUpdateManyWithoutTimelineInput
  tagsOnTimelines: TagsOnTimelinesUpdateManyWithoutTimelineInput
  threadsOnTimeline: ThreadsOnTimelineUpdateManyWithoutTimelineInput
  title: StringFieldUpdateOperationsInput
  votesOnTimeline: VotesOnTimelineUpdateManyWithoutTimelineInput
}

input TimelineUpdateManyMutationInput {
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  status: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
}

input TimelineUpdateManyWithWhereWithoutAuthorInput {
  data: TimelineUpdateManyMutationInput!
  where: TimelineScalarWhereInput!
}

input TimelineUpdateManyWithoutAuthorInput {
  connect: [TimelineWhereUniqueInput!]
  connectOrCreate: [TimelineCreateOrConnectWithoutAuthorInput!]
  create: [TimelineCreateWithoutAuthorInput!]
  createMany: TimelineCreateManyAuthorInputEnvelope
  delete: [TimelineWhereUniqueInput!]
  deleteMany: [TimelineScalarWhereInput!]
  disconnect: [TimelineWhereUniqueInput!]
  set: [TimelineWhereUniqueInput!]
  update: [TimelineUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [TimelineUpdateManyWithWhereWithoutAuthorInput!]
  upsert: [TimelineUpsertWithWhereUniqueWithoutAuthorInput!]
}

input TimelineUpdateOneRequiredWithoutPremisesOnTimelinesInput {
  connect: TimelineWhereUniqueInput
  connectOrCreate: TimelineCreateOrConnectWithoutPremisesOnTimelinesInput
  create: TimelineCreateWithoutPremisesOnTimelinesInput
  update: TimelineUpdateWithoutPremisesOnTimelinesInput
  upsert: TimelineUpsertWithoutPremisesOnTimelinesInput
}

input TimelineUpdateOneRequiredWithoutReactionOnTimelinesInput {
  connect: TimelineWhereUniqueInput
  connectOrCreate: TimelineCreateOrConnectWithoutReactionOnTimelinesInput
  create: TimelineCreateWithoutReactionOnTimelinesInput
  update: TimelineUpdateWithoutReactionOnTimelinesInput
  upsert: TimelineUpsertWithoutReactionOnTimelinesInput
}

input TimelineUpdateOneRequiredWithoutSubscriptionsOnTimelinesInput {
  connect: TimelineWhereUniqueInput
  connectOrCreate: TimelineCreateOrConnectWithoutSubscriptionsOnTimelinesInput
  create: TimelineCreateWithoutSubscriptionsOnTimelinesInput
  update: TimelineUpdateWithoutSubscriptionsOnTimelinesInput
  upsert: TimelineUpsertWithoutSubscriptionsOnTimelinesInput
}

input TimelineUpdateOneRequiredWithoutTagsOnTimelinesInput {
  connect: TimelineWhereUniqueInput
  connectOrCreate: TimelineCreateOrConnectWithoutTagsOnTimelinesInput
  create: TimelineCreateWithoutTagsOnTimelinesInput
  update: TimelineUpdateWithoutTagsOnTimelinesInput
  upsert: TimelineUpsertWithoutTagsOnTimelinesInput
}

input TimelineUpdateOneRequiredWithoutThreadsOnTimelineInput {
  connect: TimelineWhereUniqueInput
  connectOrCreate: TimelineCreateOrConnectWithoutThreadsOnTimelineInput
  create: TimelineCreateWithoutThreadsOnTimelineInput
  update: TimelineUpdateWithoutThreadsOnTimelineInput
  upsert: TimelineUpsertWithoutThreadsOnTimelineInput
}

input TimelineUpdateOneRequiredWithoutVotesOnTimelineInput {
  connect: TimelineWhereUniqueInput
  connectOrCreate: TimelineCreateOrConnectWithoutVotesOnTimelineInput
  create: TimelineCreateWithoutVotesOnTimelineInput
  update: TimelineUpdateWithoutVotesOnTimelineInput
  upsert: TimelineUpsertWithoutVotesOnTimelineInput
}

input TimelineUpdateWithWhereUniqueWithoutAuthorInput {
  data: TimelineUpdateWithoutAuthorInput!
  where: TimelineWhereUniqueInput!
}

input TimelineUpdateWithoutAuthorInput {
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  premisesOnTimelines: PremisesOnTimelinesUpdateManyWithoutTimelineInput
  reactionOnTimelines: ReactionOnTimelinesUpdateManyWithoutTimelineInput
  status: NullableStringFieldUpdateOperationsInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesUpdateManyWithoutTimelineInput
  tagsOnTimelines: TagsOnTimelinesUpdateManyWithoutTimelineInput
  threadsOnTimeline: ThreadsOnTimelineUpdateManyWithoutTimelineInput
  title: StringFieldUpdateOperationsInput
  votesOnTimeline: VotesOnTimelineUpdateManyWithoutTimelineInput
}

input TimelineUpdateWithoutPremisesOnTimelinesInput {
  author: UserUpdateOneRequiredWithoutTimelinesInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  reactionOnTimelines: ReactionOnTimelinesUpdateManyWithoutTimelineInput
  status: NullableStringFieldUpdateOperationsInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesUpdateManyWithoutTimelineInput
  tagsOnTimelines: TagsOnTimelinesUpdateManyWithoutTimelineInput
  threadsOnTimeline: ThreadsOnTimelineUpdateManyWithoutTimelineInput
  title: StringFieldUpdateOperationsInput
  votesOnTimeline: VotesOnTimelineUpdateManyWithoutTimelineInput
}

input TimelineUpdateWithoutReactionOnTimelinesInput {
  author: UserUpdateOneRequiredWithoutTimelinesInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  premisesOnTimelines: PremisesOnTimelinesUpdateManyWithoutTimelineInput
  status: NullableStringFieldUpdateOperationsInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesUpdateManyWithoutTimelineInput
  tagsOnTimelines: TagsOnTimelinesUpdateManyWithoutTimelineInput
  threadsOnTimeline: ThreadsOnTimelineUpdateManyWithoutTimelineInput
  title: StringFieldUpdateOperationsInput
  votesOnTimeline: VotesOnTimelineUpdateManyWithoutTimelineInput
}

input TimelineUpdateWithoutSubscriptionsOnTimelinesInput {
  author: UserUpdateOneRequiredWithoutTimelinesInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  premisesOnTimelines: PremisesOnTimelinesUpdateManyWithoutTimelineInput
  reactionOnTimelines: ReactionOnTimelinesUpdateManyWithoutTimelineInput
  status: NullableStringFieldUpdateOperationsInput
  tagsOnTimelines: TagsOnTimelinesUpdateManyWithoutTimelineInput
  threadsOnTimeline: ThreadsOnTimelineUpdateManyWithoutTimelineInput
  title: StringFieldUpdateOperationsInput
  votesOnTimeline: VotesOnTimelineUpdateManyWithoutTimelineInput
}

input TimelineUpdateWithoutTagsOnTimelinesInput {
  author: UserUpdateOneRequiredWithoutTimelinesInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  premisesOnTimelines: PremisesOnTimelinesUpdateManyWithoutTimelineInput
  reactionOnTimelines: ReactionOnTimelinesUpdateManyWithoutTimelineInput
  status: NullableStringFieldUpdateOperationsInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesUpdateManyWithoutTimelineInput
  threadsOnTimeline: ThreadsOnTimelineUpdateManyWithoutTimelineInput
  title: StringFieldUpdateOperationsInput
  votesOnTimeline: VotesOnTimelineUpdateManyWithoutTimelineInput
}

input TimelineUpdateWithoutThreadsOnTimelineInput {
  author: UserUpdateOneRequiredWithoutTimelinesInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  premisesOnTimelines: PremisesOnTimelinesUpdateManyWithoutTimelineInput
  reactionOnTimelines: ReactionOnTimelinesUpdateManyWithoutTimelineInput
  status: NullableStringFieldUpdateOperationsInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesUpdateManyWithoutTimelineInput
  tagsOnTimelines: TagsOnTimelinesUpdateManyWithoutTimelineInput
  title: StringFieldUpdateOperationsInput
  votesOnTimeline: VotesOnTimelineUpdateManyWithoutTimelineInput
}

input TimelineUpdateWithoutVotesOnTimelineInput {
  author: UserUpdateOneRequiredWithoutTimelinesInput
  description: StringFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  premisesOnTimelines: PremisesOnTimelinesUpdateManyWithoutTimelineInput
  reactionOnTimelines: ReactionOnTimelinesUpdateManyWithoutTimelineInput
  status: NullableStringFieldUpdateOperationsInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesUpdateManyWithoutTimelineInput
  tagsOnTimelines: TagsOnTimelinesUpdateManyWithoutTimelineInput
  threadsOnTimeline: ThreadsOnTimelineUpdateManyWithoutTimelineInput
  title: StringFieldUpdateOperationsInput
}

input TimelineUpsertWithWhereUniqueWithoutAuthorInput {
  create: TimelineCreateWithoutAuthorInput!
  update: TimelineUpdateWithoutAuthorInput!
  where: TimelineWhereUniqueInput!
}

input TimelineUpsertWithoutPremisesOnTimelinesInput {
  create: TimelineCreateWithoutPremisesOnTimelinesInput!
  update: TimelineUpdateWithoutPremisesOnTimelinesInput!
}

input TimelineUpsertWithoutReactionOnTimelinesInput {
  create: TimelineCreateWithoutReactionOnTimelinesInput!
  update: TimelineUpdateWithoutReactionOnTimelinesInput!
}

input TimelineUpsertWithoutSubscriptionsOnTimelinesInput {
  create: TimelineCreateWithoutSubscriptionsOnTimelinesInput!
  update: TimelineUpdateWithoutSubscriptionsOnTimelinesInput!
}

input TimelineUpsertWithoutTagsOnTimelinesInput {
  create: TimelineCreateWithoutTagsOnTimelinesInput!
  update: TimelineUpdateWithoutTagsOnTimelinesInput!
}

input TimelineUpsertWithoutThreadsOnTimelineInput {
  create: TimelineCreateWithoutThreadsOnTimelineInput!
  update: TimelineUpdateWithoutThreadsOnTimelineInput!
}

input TimelineUpsertWithoutVotesOnTimelineInput {
  create: TimelineCreateWithoutVotesOnTimelineInput!
  update: TimelineUpdateWithoutVotesOnTimelineInput!
}

input TimelineWhereInput {
  AND: [TimelineWhereInput!]
  NOT: [TimelineWhereInput!]
  OR: [TimelineWhereInput!]
  author: UserRelationFilter
  authorId: StringFilter
  description: StringFilter
  id: StringFilter
  premisesOnTimelines: PremisesOnTimelinesListRelationFilter
  reactionOnTimelines: ReactionOnTimelinesListRelationFilter
  status: StringNullableFilter
  subscriptionsOnTimelines: SubscriptionsOnTimelinesListRelationFilter
  tagsOnTimelines: TagsOnTimelinesListRelationFilter
  threadsOnTimeline: ThreadsOnTimelineListRelationFilter
  title: StringFilter
  votesOnTimeline: VotesOnTimelineListRelationFilter
}

input TimelineWhereUniqueInput {
  id: String
}

type User {
  _count: UserCount
  accounts(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): [Account!]!
  email: String
  emailVerified: DateTime
  id: String!
  image: String
  mergedRequests(cursor: MergeRequestWhereUniqueInput, distinct: [MergeRequestScalarFieldEnum!], orderBy: [MergeRequestOrderByWithRelationInput!], skip: Int, take: Int, where: MergeRequestWhereInput): [MergeRequest!]!
  name: String
  premises(cursor: PremiseWhereUniqueInput, distinct: [PremiseScalarFieldEnum!], orderBy: [PremiseOrderByWithRelationInput!], skip: Int, take: Int, where: PremiseWhereInput): [Premise!]!
  reactionOnThreads(cursor: ReactionOnThreadsWhereUniqueInput, distinct: [ReactionOnThreadsScalarFieldEnum!], orderBy: [ReactionOnThreadsOrderByWithRelationInput!], skip: Int, take: Int, where: ReactionOnThreadsWhereInput): [ReactionOnThreads!]!
  reactionOnTimelines(cursor: ReactionOnTimelinesWhereUniqueInput, distinct: [ReactionOnTimelinesScalarFieldEnum!], orderBy: [ReactionOnTimelinesOrderByWithRelationInput!], skip: Int, take: Int, where: ReactionOnTimelinesWhereInput): [ReactionOnTimelines!]!
  reactionOnVisions(cursor: ReactionOnVisionsWhereUniqueInput, distinct: [ReactionOnVisionsScalarFieldEnum!], orderBy: [ReactionOnVisionsOrderByWithRelationInput!], skip: Int, take: Int, where: ReactionOnVisionsWhereInput): [ReactionOnVisions!]!
  relationsBetweenVisions(cursor: RelationBetweenVisionsWhereUniqueInput, distinct: [RelationBetweenVisionsScalarFieldEnum!], orderBy: [RelationBetweenVisionsOrderByWithRelationInput!], skip: Int, take: Int, where: RelationBetweenVisionsWhereInput): [RelationBetweenVisions!]!
  reputationRecords(cursor: ReputationRecordWhereUniqueInput, distinct: [ReputationRecordScalarFieldEnum!], orderBy: [ReputationRecordOrderByWithRelationInput!], skip: Int, take: Int, where: ReputationRecordWhereInput): [ReputationRecord!]!
  sessions(cursor: SessionWhereUniqueInput, distinct: [SessionScalarFieldEnum!], orderBy: [SessionOrderByWithRelationInput!], skip: Int, take: Int, where: SessionWhereInput): [Session!]!
  subscriptionsOnPremises(cursor: SubscriptionsOnPremisesWhereUniqueInput, distinct: [SubscriptionsOnPremisesScalarFieldEnum!], orderBy: [SubscriptionsOnPremisesOrderByWithRelationInput!], skip: Int, take: Int, where: SubscriptionsOnPremisesWhereInput): [SubscriptionsOnPremises!]!
  subscriptionsOnTimelines(cursor: SubscriptionsOnTimelinesWhereUniqueInput, distinct: [SubscriptionsOnTimelinesScalarFieldEnum!], orderBy: [SubscriptionsOnTimelinesOrderByWithRelationInput!], skip: Int, take: Int, where: SubscriptionsOnTimelinesWhereInput): [SubscriptionsOnTimelines!]!
  threads(cursor: ThreadWhereUniqueInput, distinct: [ThreadScalarFieldEnum!], orderBy: [ThreadOrderByWithRelationInput!], skip: Int, take: Int, where: ThreadWhereInput): [Thread!]!
  timelines(cursor: TimelineWhereUniqueInput, distinct: [TimelineScalarFieldEnum!], orderBy: [TimelineOrderByWithRelationInput!], skip: Int, take: Int, where: TimelineWhereInput): [Timeline!]!
  updatedAt: DateTime
  visionViewsHistory(cursor: VisionViewsHistoryWhereUniqueInput, distinct: [VisionViewsHistoryScalarFieldEnum!], orderBy: [VisionViewsHistoryOrderByWithRelationInput!], skip: Int, take: Int, where: VisionViewsHistoryWhereInput): [VisionViewsHistory!]!
  visions(cursor: VisionWhereUniqueInput, distinct: [VisionScalarFieldEnum!], orderBy: [VisionOrderByWithRelationInput!], skip: Int, take: Int, where: VisionWhereInput): [Vision!]!
  votesOnPremise(cursor: VotesOnPremiseWhereUniqueInput, distinct: [VotesOnPremiseScalarFieldEnum!], orderBy: [VotesOnPremiseOrderByWithRelationInput!], skip: Int, take: Int, where: VotesOnPremiseWhereInput): [VotesOnPremise!]!
  votesOnThread(cursor: VotesOnThreadWhereUniqueInput, distinct: [VotesOnThreadScalarFieldEnum!], orderBy: [VotesOnThreadOrderByWithRelationInput!], skip: Int, take: Int, where: VotesOnThreadWhereInput): [VotesOnThread!]!
  votesOnTimeline(cursor: VotesOnTimelineWhereUniqueInput, distinct: [VotesOnTimelineScalarFieldEnum!], orderBy: [VotesOnTimelineOrderByWithRelationInput!], skip: Int, take: Int, where: VotesOnTimelineWhereInput): [VotesOnTimeline!]!
  votesOnVision(cursor: VotesOnVisionWhereUniqueInput, distinct: [VotesOnVisionScalarFieldEnum!], orderBy: [VotesOnVisionOrderByWithRelationInput!], skip: Int, take: Int, where: VotesOnVisionWhereInput): [VotesOnVision!]!
}

type UserCount {
  accounts: Int!
  mergedRequests: Int!
  premises: Int!
  reactionOnThreads: Int!
  reactionOnTimelines: Int!
  reactionOnVisions: Int!
  relationsBetweenVisions: Int!
  reputationRecords: Int!
  sessions: Int!
  subscriptionsOnPremises: Int!
  subscriptionsOnTimelines: Int!
  threads: Int!
  timelines: Int!
  visionViewsHistory: Int!
  visions: Int!
  votesOnPremise: Int!
  votesOnThread: Int!
  votesOnTimeline: Int!
  votesOnVision: Int!
}

type UserCountAggregate {
  _all: Int!
  email: Int!
  emailVerified: Int!
  id: Int!
  image: Int!
  name: Int!
  updatedAt: Int!
}

input UserCountOrderByAggregateInput {
  email: SortOrder
  emailVerified: SortOrder
  id: SortOrder
  image: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input UserCreateInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  email: String
  emailVerified: DateTime
  id: String
  image: String
  mergedRequests: MergeRequestCreateNestedManyWithoutAuthorInput
  name: String
  premises: PremiseCreateNestedManyWithoutAuthorInput
  reactionOnThreads: ReactionOnThreadsCreateNestedManyWithoutUserInput
  reactionOnTimelines: ReactionOnTimelinesCreateNestedManyWithoutUserInput
  reactionOnVisions: ReactionOnVisionsCreateNestedManyWithoutUserInput
  relationsBetweenVisions: RelationBetweenVisionsCreateNestedManyWithoutAuthorInput
  reputationRecords: ReputationRecordCreateNestedManyWithoutUserInput
  sessions: SessionCreateNestedManyWithoutUserInput
  subscriptionsOnPremises: SubscriptionsOnPremisesCreateNestedManyWithoutUserInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesCreateNestedManyWithoutUserInput
  threads: ThreadCreateNestedManyWithoutAuthorInput
  timelines: TimelineCreateNestedManyWithoutAuthorInput
  updatedAt: DateTime
  visionViewsHistory: VisionViewsHistoryCreateNestedManyWithoutUserInput
  visions: VisionCreateNestedManyWithoutAuthorInput
  votesOnPremise: VotesOnPremiseCreateNestedManyWithoutUserInput
  votesOnThread: VotesOnThreadCreateNestedManyWithoutUserInput
  votesOnTimeline: VotesOnTimelineCreateNestedManyWithoutUserInput
  votesOnVision: VotesOnVisionCreateNestedManyWithoutUserInput
}

input UserCreateManyInput {
  email: String
  emailVerified: DateTime
  id: String
  image: String
  name: String
  updatedAt: DateTime
}

input UserCreateNestedOneWithoutAccountsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAccountsInput
  create: UserCreateWithoutAccountsInput
}

input UserCreateNestedOneWithoutMergedRequestsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutMergedRequestsInput
  create: UserCreateWithoutMergedRequestsInput
}

input UserCreateNestedOneWithoutPremisesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPremisesInput
  create: UserCreateWithoutPremisesInput
}

input UserCreateNestedOneWithoutReactionOnThreadsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutReactionOnThreadsInput
  create: UserCreateWithoutReactionOnThreadsInput
}

input UserCreateNestedOneWithoutReactionOnTimelinesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutReactionOnTimelinesInput
  create: UserCreateWithoutReactionOnTimelinesInput
}

input UserCreateNestedOneWithoutReactionOnVisionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutReactionOnVisionsInput
  create: UserCreateWithoutReactionOnVisionsInput
}

input UserCreateNestedOneWithoutRelationsBetweenVisionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutRelationsBetweenVisionsInput
  create: UserCreateWithoutRelationsBetweenVisionsInput
}

input UserCreateNestedOneWithoutReputationRecordsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutReputationRecordsInput
  create: UserCreateWithoutReputationRecordsInput
}

input UserCreateNestedOneWithoutSessionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSessionsInput
  create: UserCreateWithoutSessionsInput
}

input UserCreateNestedOneWithoutSubscriptionsOnPremisesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSubscriptionsOnPremisesInput
  create: UserCreateWithoutSubscriptionsOnPremisesInput
}

input UserCreateNestedOneWithoutSubscriptionsOnTimelinesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSubscriptionsOnTimelinesInput
  create: UserCreateWithoutSubscriptionsOnTimelinesInput
}

input UserCreateNestedOneWithoutThreadsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutThreadsInput
  create: UserCreateWithoutThreadsInput
}

input UserCreateNestedOneWithoutTimelinesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTimelinesInput
  create: UserCreateWithoutTimelinesInput
}

input UserCreateNestedOneWithoutVisionViewsHistoryInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutVisionViewsHistoryInput
  create: UserCreateWithoutVisionViewsHistoryInput
}

input UserCreateNestedOneWithoutVisionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutVisionsInput
  create: UserCreateWithoutVisionsInput
}

input UserCreateNestedOneWithoutVotesOnPremiseInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutVotesOnPremiseInput
  create: UserCreateWithoutVotesOnPremiseInput
}

input UserCreateNestedOneWithoutVotesOnThreadInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutVotesOnThreadInput
  create: UserCreateWithoutVotesOnThreadInput
}

input UserCreateNestedOneWithoutVotesOnTimelineInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutVotesOnTimelineInput
  create: UserCreateWithoutVotesOnTimelineInput
}

input UserCreateNestedOneWithoutVotesOnVisionInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutVotesOnVisionInput
  create: UserCreateWithoutVotesOnVisionInput
}

input UserCreateOrConnectWithoutAccountsInput {
  create: UserCreateWithoutAccountsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutMergedRequestsInput {
  create: UserCreateWithoutMergedRequestsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutPremisesInput {
  create: UserCreateWithoutPremisesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutReactionOnThreadsInput {
  create: UserCreateWithoutReactionOnThreadsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutReactionOnTimelinesInput {
  create: UserCreateWithoutReactionOnTimelinesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutReactionOnVisionsInput {
  create: UserCreateWithoutReactionOnVisionsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutRelationsBetweenVisionsInput {
  create: UserCreateWithoutRelationsBetweenVisionsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutReputationRecordsInput {
  create: UserCreateWithoutReputationRecordsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutSessionsInput {
  create: UserCreateWithoutSessionsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutSubscriptionsOnPremisesInput {
  create: UserCreateWithoutSubscriptionsOnPremisesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutSubscriptionsOnTimelinesInput {
  create: UserCreateWithoutSubscriptionsOnTimelinesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutThreadsInput {
  create: UserCreateWithoutThreadsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutTimelinesInput {
  create: UserCreateWithoutTimelinesInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutVisionViewsHistoryInput {
  create: UserCreateWithoutVisionViewsHistoryInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutVisionsInput {
  create: UserCreateWithoutVisionsInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutVotesOnPremiseInput {
  create: UserCreateWithoutVotesOnPremiseInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutVotesOnThreadInput {
  create: UserCreateWithoutVotesOnThreadInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutVotesOnTimelineInput {
  create: UserCreateWithoutVotesOnTimelineInput!
  where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutVotesOnVisionInput {
  create: UserCreateWithoutVotesOnVisionInput!
  where: UserWhereUniqueInput!
}

input UserCreateWithoutAccountsInput {
  email: String
  emailVerified: DateTime
  id: String
  image: String
  mergedRequests: MergeRequestCreateNestedManyWithoutAuthorInput
  name: String
  premises: PremiseCreateNestedManyWithoutAuthorInput
  reactionOnThreads: ReactionOnThreadsCreateNestedManyWithoutUserInput
  reactionOnTimelines: ReactionOnTimelinesCreateNestedManyWithoutUserInput
  reactionOnVisions: ReactionOnVisionsCreateNestedManyWithoutUserInput
  relationsBetweenVisions: RelationBetweenVisionsCreateNestedManyWithoutAuthorInput
  reputationRecords: ReputationRecordCreateNestedManyWithoutUserInput
  sessions: SessionCreateNestedManyWithoutUserInput
  subscriptionsOnPremises: SubscriptionsOnPremisesCreateNestedManyWithoutUserInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesCreateNestedManyWithoutUserInput
  threads: ThreadCreateNestedManyWithoutAuthorInput
  timelines: TimelineCreateNestedManyWithoutAuthorInput
  updatedAt: DateTime
  visionViewsHistory: VisionViewsHistoryCreateNestedManyWithoutUserInput
  visions: VisionCreateNestedManyWithoutAuthorInput
  votesOnPremise: VotesOnPremiseCreateNestedManyWithoutUserInput
  votesOnThread: VotesOnThreadCreateNestedManyWithoutUserInput
  votesOnTimeline: VotesOnTimelineCreateNestedManyWithoutUserInput
  votesOnVision: VotesOnVisionCreateNestedManyWithoutUserInput
}

input UserCreateWithoutMergedRequestsInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  email: String
  emailVerified: DateTime
  id: String
  image: String
  name: String
  premises: PremiseCreateNestedManyWithoutAuthorInput
  reactionOnThreads: ReactionOnThreadsCreateNestedManyWithoutUserInput
  reactionOnTimelines: ReactionOnTimelinesCreateNestedManyWithoutUserInput
  reactionOnVisions: ReactionOnVisionsCreateNestedManyWithoutUserInput
  relationsBetweenVisions: RelationBetweenVisionsCreateNestedManyWithoutAuthorInput
  reputationRecords: ReputationRecordCreateNestedManyWithoutUserInput
  sessions: SessionCreateNestedManyWithoutUserInput
  subscriptionsOnPremises: SubscriptionsOnPremisesCreateNestedManyWithoutUserInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesCreateNestedManyWithoutUserInput
  threads: ThreadCreateNestedManyWithoutAuthorInput
  timelines: TimelineCreateNestedManyWithoutAuthorInput
  updatedAt: DateTime
  visionViewsHistory: VisionViewsHistoryCreateNestedManyWithoutUserInput
  visions: VisionCreateNestedManyWithoutAuthorInput
  votesOnPremise: VotesOnPremiseCreateNestedManyWithoutUserInput
  votesOnThread: VotesOnThreadCreateNestedManyWithoutUserInput
  votesOnTimeline: VotesOnTimelineCreateNestedManyWithoutUserInput
  votesOnVision: VotesOnVisionCreateNestedManyWithoutUserInput
}

input UserCreateWithoutPremisesInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  email: String
  emailVerified: DateTime
  id: String
  image: String
  mergedRequests: MergeRequestCreateNestedManyWithoutAuthorInput
  name: String
  reactionOnThreads: ReactionOnThreadsCreateNestedManyWithoutUserInput
  reactionOnTimelines: ReactionOnTimelinesCreateNestedManyWithoutUserInput
  reactionOnVisions: ReactionOnVisionsCreateNestedManyWithoutUserInput
  relationsBetweenVisions: RelationBetweenVisionsCreateNestedManyWithoutAuthorInput
  reputationRecords: ReputationRecordCreateNestedManyWithoutUserInput
  sessions: SessionCreateNestedManyWithoutUserInput
  subscriptionsOnPremises: SubscriptionsOnPremisesCreateNestedManyWithoutUserInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesCreateNestedManyWithoutUserInput
  threads: ThreadCreateNestedManyWithoutAuthorInput
  timelines: TimelineCreateNestedManyWithoutAuthorInput
  updatedAt: DateTime
  visionViewsHistory: VisionViewsHistoryCreateNestedManyWithoutUserInput
  visions: VisionCreateNestedManyWithoutAuthorInput
  votesOnPremise: VotesOnPremiseCreateNestedManyWithoutUserInput
  votesOnThread: VotesOnThreadCreateNestedManyWithoutUserInput
  votesOnTimeline: VotesOnTimelineCreateNestedManyWithoutUserInput
  votesOnVision: VotesOnVisionCreateNestedManyWithoutUserInput
}

input UserCreateWithoutReactionOnThreadsInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  email: String
  emailVerified: DateTime
  id: String
  image: String
  mergedRequests: MergeRequestCreateNestedManyWithoutAuthorInput
  name: String
  premises: PremiseCreateNestedManyWithoutAuthorInput
  reactionOnTimelines: ReactionOnTimelinesCreateNestedManyWithoutUserInput
  reactionOnVisions: ReactionOnVisionsCreateNestedManyWithoutUserInput
  relationsBetweenVisions: RelationBetweenVisionsCreateNestedManyWithoutAuthorInput
  reputationRecords: ReputationRecordCreateNestedManyWithoutUserInput
  sessions: SessionCreateNestedManyWithoutUserInput
  subscriptionsOnPremises: SubscriptionsOnPremisesCreateNestedManyWithoutUserInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesCreateNestedManyWithoutUserInput
  threads: ThreadCreateNestedManyWithoutAuthorInput
  timelines: TimelineCreateNestedManyWithoutAuthorInput
  updatedAt: DateTime
  visionViewsHistory: VisionViewsHistoryCreateNestedManyWithoutUserInput
  visions: VisionCreateNestedManyWithoutAuthorInput
  votesOnPremise: VotesOnPremiseCreateNestedManyWithoutUserInput
  votesOnThread: VotesOnThreadCreateNestedManyWithoutUserInput
  votesOnTimeline: VotesOnTimelineCreateNestedManyWithoutUserInput
  votesOnVision: VotesOnVisionCreateNestedManyWithoutUserInput
}

input UserCreateWithoutReactionOnTimelinesInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  email: String
  emailVerified: DateTime
  id: String
  image: String
  mergedRequests: MergeRequestCreateNestedManyWithoutAuthorInput
  name: String
  premises: PremiseCreateNestedManyWithoutAuthorInput
  reactionOnThreads: ReactionOnThreadsCreateNestedManyWithoutUserInput
  reactionOnVisions: ReactionOnVisionsCreateNestedManyWithoutUserInput
  relationsBetweenVisions: RelationBetweenVisionsCreateNestedManyWithoutAuthorInput
  reputationRecords: ReputationRecordCreateNestedManyWithoutUserInput
  sessions: SessionCreateNestedManyWithoutUserInput
  subscriptionsOnPremises: SubscriptionsOnPremisesCreateNestedManyWithoutUserInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesCreateNestedManyWithoutUserInput
  threads: ThreadCreateNestedManyWithoutAuthorInput
  timelines: TimelineCreateNestedManyWithoutAuthorInput
  updatedAt: DateTime
  visionViewsHistory: VisionViewsHistoryCreateNestedManyWithoutUserInput
  visions: VisionCreateNestedManyWithoutAuthorInput
  votesOnPremise: VotesOnPremiseCreateNestedManyWithoutUserInput
  votesOnThread: VotesOnThreadCreateNestedManyWithoutUserInput
  votesOnTimeline: VotesOnTimelineCreateNestedManyWithoutUserInput
  votesOnVision: VotesOnVisionCreateNestedManyWithoutUserInput
}

input UserCreateWithoutReactionOnVisionsInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  email: String
  emailVerified: DateTime
  id: String
  image: String
  mergedRequests: MergeRequestCreateNestedManyWithoutAuthorInput
  name: String
  premises: PremiseCreateNestedManyWithoutAuthorInput
  reactionOnThreads: ReactionOnThreadsCreateNestedManyWithoutUserInput
  reactionOnTimelines: ReactionOnTimelinesCreateNestedManyWithoutUserInput
  relationsBetweenVisions: RelationBetweenVisionsCreateNestedManyWithoutAuthorInput
  reputationRecords: ReputationRecordCreateNestedManyWithoutUserInput
  sessions: SessionCreateNestedManyWithoutUserInput
  subscriptionsOnPremises: SubscriptionsOnPremisesCreateNestedManyWithoutUserInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesCreateNestedManyWithoutUserInput
  threads: ThreadCreateNestedManyWithoutAuthorInput
  timelines: TimelineCreateNestedManyWithoutAuthorInput
  updatedAt: DateTime
  visionViewsHistory: VisionViewsHistoryCreateNestedManyWithoutUserInput
  visions: VisionCreateNestedManyWithoutAuthorInput
  votesOnPremise: VotesOnPremiseCreateNestedManyWithoutUserInput
  votesOnThread: VotesOnThreadCreateNestedManyWithoutUserInput
  votesOnTimeline: VotesOnTimelineCreateNestedManyWithoutUserInput
  votesOnVision: VotesOnVisionCreateNestedManyWithoutUserInput
}

input UserCreateWithoutRelationsBetweenVisionsInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  email: String
  emailVerified: DateTime
  id: String
  image: String
  mergedRequests: MergeRequestCreateNestedManyWithoutAuthorInput
  name: String
  premises: PremiseCreateNestedManyWithoutAuthorInput
  reactionOnThreads: ReactionOnThreadsCreateNestedManyWithoutUserInput
  reactionOnTimelines: ReactionOnTimelinesCreateNestedManyWithoutUserInput
  reactionOnVisions: ReactionOnVisionsCreateNestedManyWithoutUserInput
  reputationRecords: ReputationRecordCreateNestedManyWithoutUserInput
  sessions: SessionCreateNestedManyWithoutUserInput
  subscriptionsOnPremises: SubscriptionsOnPremisesCreateNestedManyWithoutUserInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesCreateNestedManyWithoutUserInput
  threads: ThreadCreateNestedManyWithoutAuthorInput
  timelines: TimelineCreateNestedManyWithoutAuthorInput
  updatedAt: DateTime
  visionViewsHistory: VisionViewsHistoryCreateNestedManyWithoutUserInput
  visions: VisionCreateNestedManyWithoutAuthorInput
  votesOnPremise: VotesOnPremiseCreateNestedManyWithoutUserInput
  votesOnThread: VotesOnThreadCreateNestedManyWithoutUserInput
  votesOnTimeline: VotesOnTimelineCreateNestedManyWithoutUserInput
  votesOnVision: VotesOnVisionCreateNestedManyWithoutUserInput
}

input UserCreateWithoutReputationRecordsInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  email: String
  emailVerified: DateTime
  id: String
  image: String
  mergedRequests: MergeRequestCreateNestedManyWithoutAuthorInput
  name: String
  premises: PremiseCreateNestedManyWithoutAuthorInput
  reactionOnThreads: ReactionOnThreadsCreateNestedManyWithoutUserInput
  reactionOnTimelines: ReactionOnTimelinesCreateNestedManyWithoutUserInput
  reactionOnVisions: ReactionOnVisionsCreateNestedManyWithoutUserInput
  relationsBetweenVisions: RelationBetweenVisionsCreateNestedManyWithoutAuthorInput
  sessions: SessionCreateNestedManyWithoutUserInput
  subscriptionsOnPremises: SubscriptionsOnPremisesCreateNestedManyWithoutUserInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesCreateNestedManyWithoutUserInput
  threads: ThreadCreateNestedManyWithoutAuthorInput
  timelines: TimelineCreateNestedManyWithoutAuthorInput
  updatedAt: DateTime
  visionViewsHistory: VisionViewsHistoryCreateNestedManyWithoutUserInput
  visions: VisionCreateNestedManyWithoutAuthorInput
  votesOnPremise: VotesOnPremiseCreateNestedManyWithoutUserInput
  votesOnThread: VotesOnThreadCreateNestedManyWithoutUserInput
  votesOnTimeline: VotesOnTimelineCreateNestedManyWithoutUserInput
  votesOnVision: VotesOnVisionCreateNestedManyWithoutUserInput
}

input UserCreateWithoutSessionsInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  email: String
  emailVerified: DateTime
  id: String
  image: String
  mergedRequests: MergeRequestCreateNestedManyWithoutAuthorInput
  name: String
  premises: PremiseCreateNestedManyWithoutAuthorInput
  reactionOnThreads: ReactionOnThreadsCreateNestedManyWithoutUserInput
  reactionOnTimelines: ReactionOnTimelinesCreateNestedManyWithoutUserInput
  reactionOnVisions: ReactionOnVisionsCreateNestedManyWithoutUserInput
  relationsBetweenVisions: RelationBetweenVisionsCreateNestedManyWithoutAuthorInput
  reputationRecords: ReputationRecordCreateNestedManyWithoutUserInput
  subscriptionsOnPremises: SubscriptionsOnPremisesCreateNestedManyWithoutUserInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesCreateNestedManyWithoutUserInput
  threads: ThreadCreateNestedManyWithoutAuthorInput
  timelines: TimelineCreateNestedManyWithoutAuthorInput
  updatedAt: DateTime
  visionViewsHistory: VisionViewsHistoryCreateNestedManyWithoutUserInput
  visions: VisionCreateNestedManyWithoutAuthorInput
  votesOnPremise: VotesOnPremiseCreateNestedManyWithoutUserInput
  votesOnThread: VotesOnThreadCreateNestedManyWithoutUserInput
  votesOnTimeline: VotesOnTimelineCreateNestedManyWithoutUserInput
  votesOnVision: VotesOnVisionCreateNestedManyWithoutUserInput
}

input UserCreateWithoutSubscriptionsOnPremisesInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  email: String
  emailVerified: DateTime
  id: String
  image: String
  mergedRequests: MergeRequestCreateNestedManyWithoutAuthorInput
  name: String
  premises: PremiseCreateNestedManyWithoutAuthorInput
  reactionOnThreads: ReactionOnThreadsCreateNestedManyWithoutUserInput
  reactionOnTimelines: ReactionOnTimelinesCreateNestedManyWithoutUserInput
  reactionOnVisions: ReactionOnVisionsCreateNestedManyWithoutUserInput
  relationsBetweenVisions: RelationBetweenVisionsCreateNestedManyWithoutAuthorInput
  reputationRecords: ReputationRecordCreateNestedManyWithoutUserInput
  sessions: SessionCreateNestedManyWithoutUserInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesCreateNestedManyWithoutUserInput
  threads: ThreadCreateNestedManyWithoutAuthorInput
  timelines: TimelineCreateNestedManyWithoutAuthorInput
  updatedAt: DateTime
  visionViewsHistory: VisionViewsHistoryCreateNestedManyWithoutUserInput
  visions: VisionCreateNestedManyWithoutAuthorInput
  votesOnPremise: VotesOnPremiseCreateNestedManyWithoutUserInput
  votesOnThread: VotesOnThreadCreateNestedManyWithoutUserInput
  votesOnTimeline: VotesOnTimelineCreateNestedManyWithoutUserInput
  votesOnVision: VotesOnVisionCreateNestedManyWithoutUserInput
}

input UserCreateWithoutSubscriptionsOnTimelinesInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  email: String
  emailVerified: DateTime
  id: String
  image: String
  mergedRequests: MergeRequestCreateNestedManyWithoutAuthorInput
  name: String
  premises: PremiseCreateNestedManyWithoutAuthorInput
  reactionOnThreads: ReactionOnThreadsCreateNestedManyWithoutUserInput
  reactionOnTimelines: ReactionOnTimelinesCreateNestedManyWithoutUserInput
  reactionOnVisions: ReactionOnVisionsCreateNestedManyWithoutUserInput
  relationsBetweenVisions: RelationBetweenVisionsCreateNestedManyWithoutAuthorInput
  reputationRecords: ReputationRecordCreateNestedManyWithoutUserInput
  sessions: SessionCreateNestedManyWithoutUserInput
  subscriptionsOnPremises: SubscriptionsOnPremisesCreateNestedManyWithoutUserInput
  threads: ThreadCreateNestedManyWithoutAuthorInput
  timelines: TimelineCreateNestedManyWithoutAuthorInput
  updatedAt: DateTime
  visionViewsHistory: VisionViewsHistoryCreateNestedManyWithoutUserInput
  visions: VisionCreateNestedManyWithoutAuthorInput
  votesOnPremise: VotesOnPremiseCreateNestedManyWithoutUserInput
  votesOnThread: VotesOnThreadCreateNestedManyWithoutUserInput
  votesOnTimeline: VotesOnTimelineCreateNestedManyWithoutUserInput
  votesOnVision: VotesOnVisionCreateNestedManyWithoutUserInput
}

input UserCreateWithoutThreadsInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  email: String
  emailVerified: DateTime
  id: String
  image: String
  mergedRequests: MergeRequestCreateNestedManyWithoutAuthorInput
  name: String
  premises: PremiseCreateNestedManyWithoutAuthorInput
  reactionOnThreads: ReactionOnThreadsCreateNestedManyWithoutUserInput
  reactionOnTimelines: ReactionOnTimelinesCreateNestedManyWithoutUserInput
  reactionOnVisions: ReactionOnVisionsCreateNestedManyWithoutUserInput
  relationsBetweenVisions: RelationBetweenVisionsCreateNestedManyWithoutAuthorInput
  reputationRecords: ReputationRecordCreateNestedManyWithoutUserInput
  sessions: SessionCreateNestedManyWithoutUserInput
  subscriptionsOnPremises: SubscriptionsOnPremisesCreateNestedManyWithoutUserInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesCreateNestedManyWithoutUserInput
  timelines: TimelineCreateNestedManyWithoutAuthorInput
  updatedAt: DateTime
  visionViewsHistory: VisionViewsHistoryCreateNestedManyWithoutUserInput
  visions: VisionCreateNestedManyWithoutAuthorInput
  votesOnPremise: VotesOnPremiseCreateNestedManyWithoutUserInput
  votesOnThread: VotesOnThreadCreateNestedManyWithoutUserInput
  votesOnTimeline: VotesOnTimelineCreateNestedManyWithoutUserInput
  votesOnVision: VotesOnVisionCreateNestedManyWithoutUserInput
}

input UserCreateWithoutTimelinesInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  email: String
  emailVerified: DateTime
  id: String
  image: String
  mergedRequests: MergeRequestCreateNestedManyWithoutAuthorInput
  name: String
  premises: PremiseCreateNestedManyWithoutAuthorInput
  reactionOnThreads: ReactionOnThreadsCreateNestedManyWithoutUserInput
  reactionOnTimelines: ReactionOnTimelinesCreateNestedManyWithoutUserInput
  reactionOnVisions: ReactionOnVisionsCreateNestedManyWithoutUserInput
  relationsBetweenVisions: RelationBetweenVisionsCreateNestedManyWithoutAuthorInput
  reputationRecords: ReputationRecordCreateNestedManyWithoutUserInput
  sessions: SessionCreateNestedManyWithoutUserInput
  subscriptionsOnPremises: SubscriptionsOnPremisesCreateNestedManyWithoutUserInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesCreateNestedManyWithoutUserInput
  threads: ThreadCreateNestedManyWithoutAuthorInput
  updatedAt: DateTime
  visionViewsHistory: VisionViewsHistoryCreateNestedManyWithoutUserInput
  visions: VisionCreateNestedManyWithoutAuthorInput
  votesOnPremise: VotesOnPremiseCreateNestedManyWithoutUserInput
  votesOnThread: VotesOnThreadCreateNestedManyWithoutUserInput
  votesOnTimeline: VotesOnTimelineCreateNestedManyWithoutUserInput
  votesOnVision: VotesOnVisionCreateNestedManyWithoutUserInput
}

input UserCreateWithoutVisionViewsHistoryInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  email: String
  emailVerified: DateTime
  id: String
  image: String
  mergedRequests: MergeRequestCreateNestedManyWithoutAuthorInput
  name: String
  premises: PremiseCreateNestedManyWithoutAuthorInput
  reactionOnThreads: ReactionOnThreadsCreateNestedManyWithoutUserInput
  reactionOnTimelines: ReactionOnTimelinesCreateNestedManyWithoutUserInput
  reactionOnVisions: ReactionOnVisionsCreateNestedManyWithoutUserInput
  relationsBetweenVisions: RelationBetweenVisionsCreateNestedManyWithoutAuthorInput
  reputationRecords: ReputationRecordCreateNestedManyWithoutUserInput
  sessions: SessionCreateNestedManyWithoutUserInput
  subscriptionsOnPremises: SubscriptionsOnPremisesCreateNestedManyWithoutUserInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesCreateNestedManyWithoutUserInput
  threads: ThreadCreateNestedManyWithoutAuthorInput
  timelines: TimelineCreateNestedManyWithoutAuthorInput
  updatedAt: DateTime
  visions: VisionCreateNestedManyWithoutAuthorInput
  votesOnPremise: VotesOnPremiseCreateNestedManyWithoutUserInput
  votesOnThread: VotesOnThreadCreateNestedManyWithoutUserInput
  votesOnTimeline: VotesOnTimelineCreateNestedManyWithoutUserInput
  votesOnVision: VotesOnVisionCreateNestedManyWithoutUserInput
}

input UserCreateWithoutVisionsInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  email: String
  emailVerified: DateTime
  id: String
  image: String
  mergedRequests: MergeRequestCreateNestedManyWithoutAuthorInput
  name: String
  premises: PremiseCreateNestedManyWithoutAuthorInput
  reactionOnThreads: ReactionOnThreadsCreateNestedManyWithoutUserInput
  reactionOnTimelines: ReactionOnTimelinesCreateNestedManyWithoutUserInput
  reactionOnVisions: ReactionOnVisionsCreateNestedManyWithoutUserInput
  relationsBetweenVisions: RelationBetweenVisionsCreateNestedManyWithoutAuthorInput
  reputationRecords: ReputationRecordCreateNestedManyWithoutUserInput
  sessions: SessionCreateNestedManyWithoutUserInput
  subscriptionsOnPremises: SubscriptionsOnPremisesCreateNestedManyWithoutUserInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesCreateNestedManyWithoutUserInput
  threads: ThreadCreateNestedManyWithoutAuthorInput
  timelines: TimelineCreateNestedManyWithoutAuthorInput
  updatedAt: DateTime
  visionViewsHistory: VisionViewsHistoryCreateNestedManyWithoutUserInput
  votesOnPremise: VotesOnPremiseCreateNestedManyWithoutUserInput
  votesOnThread: VotesOnThreadCreateNestedManyWithoutUserInput
  votesOnTimeline: VotesOnTimelineCreateNestedManyWithoutUserInput
  votesOnVision: VotesOnVisionCreateNestedManyWithoutUserInput
}

input UserCreateWithoutVotesOnPremiseInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  email: String
  emailVerified: DateTime
  id: String
  image: String
  mergedRequests: MergeRequestCreateNestedManyWithoutAuthorInput
  name: String
  premises: PremiseCreateNestedManyWithoutAuthorInput
  reactionOnThreads: ReactionOnThreadsCreateNestedManyWithoutUserInput
  reactionOnTimelines: ReactionOnTimelinesCreateNestedManyWithoutUserInput
  reactionOnVisions: ReactionOnVisionsCreateNestedManyWithoutUserInput
  relationsBetweenVisions: RelationBetweenVisionsCreateNestedManyWithoutAuthorInput
  reputationRecords: ReputationRecordCreateNestedManyWithoutUserInput
  sessions: SessionCreateNestedManyWithoutUserInput
  subscriptionsOnPremises: SubscriptionsOnPremisesCreateNestedManyWithoutUserInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesCreateNestedManyWithoutUserInput
  threads: ThreadCreateNestedManyWithoutAuthorInput
  timelines: TimelineCreateNestedManyWithoutAuthorInput
  updatedAt: DateTime
  visionViewsHistory: VisionViewsHistoryCreateNestedManyWithoutUserInput
  visions: VisionCreateNestedManyWithoutAuthorInput
  votesOnThread: VotesOnThreadCreateNestedManyWithoutUserInput
  votesOnTimeline: VotesOnTimelineCreateNestedManyWithoutUserInput
  votesOnVision: VotesOnVisionCreateNestedManyWithoutUserInput
}

input UserCreateWithoutVotesOnThreadInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  email: String
  emailVerified: DateTime
  id: String
  image: String
  mergedRequests: MergeRequestCreateNestedManyWithoutAuthorInput
  name: String
  premises: PremiseCreateNestedManyWithoutAuthorInput
  reactionOnThreads: ReactionOnThreadsCreateNestedManyWithoutUserInput
  reactionOnTimelines: ReactionOnTimelinesCreateNestedManyWithoutUserInput
  reactionOnVisions: ReactionOnVisionsCreateNestedManyWithoutUserInput
  relationsBetweenVisions: RelationBetweenVisionsCreateNestedManyWithoutAuthorInput
  reputationRecords: ReputationRecordCreateNestedManyWithoutUserInput
  sessions: SessionCreateNestedManyWithoutUserInput
  subscriptionsOnPremises: SubscriptionsOnPremisesCreateNestedManyWithoutUserInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesCreateNestedManyWithoutUserInput
  threads: ThreadCreateNestedManyWithoutAuthorInput
  timelines: TimelineCreateNestedManyWithoutAuthorInput
  updatedAt: DateTime
  visionViewsHistory: VisionViewsHistoryCreateNestedManyWithoutUserInput
  visions: VisionCreateNestedManyWithoutAuthorInput
  votesOnPremise: VotesOnPremiseCreateNestedManyWithoutUserInput
  votesOnTimeline: VotesOnTimelineCreateNestedManyWithoutUserInput
  votesOnVision: VotesOnVisionCreateNestedManyWithoutUserInput
}

input UserCreateWithoutVotesOnTimelineInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  email: String
  emailVerified: DateTime
  id: String
  image: String
  mergedRequests: MergeRequestCreateNestedManyWithoutAuthorInput
  name: String
  premises: PremiseCreateNestedManyWithoutAuthorInput
  reactionOnThreads: ReactionOnThreadsCreateNestedManyWithoutUserInput
  reactionOnTimelines: ReactionOnTimelinesCreateNestedManyWithoutUserInput
  reactionOnVisions: ReactionOnVisionsCreateNestedManyWithoutUserInput
  relationsBetweenVisions: RelationBetweenVisionsCreateNestedManyWithoutAuthorInput
  reputationRecords: ReputationRecordCreateNestedManyWithoutUserInput
  sessions: SessionCreateNestedManyWithoutUserInput
  subscriptionsOnPremises: SubscriptionsOnPremisesCreateNestedManyWithoutUserInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesCreateNestedManyWithoutUserInput
  threads: ThreadCreateNestedManyWithoutAuthorInput
  timelines: TimelineCreateNestedManyWithoutAuthorInput
  updatedAt: DateTime
  visionViewsHistory: VisionViewsHistoryCreateNestedManyWithoutUserInput
  visions: VisionCreateNestedManyWithoutAuthorInput
  votesOnPremise: VotesOnPremiseCreateNestedManyWithoutUserInput
  votesOnThread: VotesOnThreadCreateNestedManyWithoutUserInput
  votesOnVision: VotesOnVisionCreateNestedManyWithoutUserInput
}

input UserCreateWithoutVotesOnVisionInput {
  accounts: AccountCreateNestedManyWithoutUserInput
  email: String
  emailVerified: DateTime
  id: String
  image: String
  mergedRequests: MergeRequestCreateNestedManyWithoutAuthorInput
  name: String
  premises: PremiseCreateNestedManyWithoutAuthorInput
  reactionOnThreads: ReactionOnThreadsCreateNestedManyWithoutUserInput
  reactionOnTimelines: ReactionOnTimelinesCreateNestedManyWithoutUserInput
  reactionOnVisions: ReactionOnVisionsCreateNestedManyWithoutUserInput
  relationsBetweenVisions: RelationBetweenVisionsCreateNestedManyWithoutAuthorInput
  reputationRecords: ReputationRecordCreateNestedManyWithoutUserInput
  sessions: SessionCreateNestedManyWithoutUserInput
  subscriptionsOnPremises: SubscriptionsOnPremisesCreateNestedManyWithoutUserInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesCreateNestedManyWithoutUserInput
  threads: ThreadCreateNestedManyWithoutAuthorInput
  timelines: TimelineCreateNestedManyWithoutAuthorInput
  updatedAt: DateTime
  visionViewsHistory: VisionViewsHistoryCreateNestedManyWithoutUserInput
  visions: VisionCreateNestedManyWithoutAuthorInput
  votesOnPremise: VotesOnPremiseCreateNestedManyWithoutUserInput
  votesOnThread: VotesOnThreadCreateNestedManyWithoutUserInput
  votesOnTimeline: VotesOnTimelineCreateNestedManyWithoutUserInput
}

type UserGroupBy {
  _count: UserCountAggregate
  _max: UserMaxAggregate
  _min: UserMinAggregate
  email: String
  emailVerified: DateTime
  id: String!
  image: String
  name: String
  updatedAt: DateTime
}

type UserMaxAggregate {
  email: String
  emailVerified: DateTime
  id: String
  image: String
  name: String
  updatedAt: DateTime
}

input UserMaxOrderByAggregateInput {
  email: SortOrder
  emailVerified: SortOrder
  id: SortOrder
  image: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

type UserMinAggregate {
  email: String
  emailVerified: DateTime
  id: String
  image: String
  name: String
  updatedAt: DateTime
}

input UserMinOrderByAggregateInput {
  email: SortOrder
  emailVerified: SortOrder
  id: SortOrder
  image: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input UserOrderByWithAggregationInput {
  _count: UserCountOrderByAggregateInput
  _max: UserMaxOrderByAggregateInput
  _min: UserMinOrderByAggregateInput
  email: SortOrder
  emailVerified: SortOrder
  id: SortOrder
  image: SortOrder
  name: SortOrder
  updatedAt: SortOrder
}

input UserOrderByWithRelationInput {
  accounts: AccountOrderByRelationAggregateInput
  email: SortOrder
  emailVerified: SortOrder
  id: SortOrder
  image: SortOrder
  mergedRequests: MergeRequestOrderByRelationAggregateInput
  name: SortOrder
  premises: PremiseOrderByRelationAggregateInput
  reactionOnThreads: ReactionOnThreadsOrderByRelationAggregateInput
  reactionOnTimelines: ReactionOnTimelinesOrderByRelationAggregateInput
  reactionOnVisions: ReactionOnVisionsOrderByRelationAggregateInput
  relationsBetweenVisions: RelationBetweenVisionsOrderByRelationAggregateInput
  reputationRecords: ReputationRecordOrderByRelationAggregateInput
  sessions: SessionOrderByRelationAggregateInput
  subscriptionsOnPremises: SubscriptionsOnPremisesOrderByRelationAggregateInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesOrderByRelationAggregateInput
  threads: ThreadOrderByRelationAggregateInput
  timelines: TimelineOrderByRelationAggregateInput
  updatedAt: SortOrder
  visionViewsHistory: VisionViewsHistoryOrderByRelationAggregateInput
  visions: VisionOrderByRelationAggregateInput
  votesOnPremise: VotesOnPremiseOrderByRelationAggregateInput
  votesOnThread: VotesOnThreadOrderByRelationAggregateInput
  votesOnTimeline: VotesOnTimelineOrderByRelationAggregateInput
  votesOnVision: VotesOnVisionOrderByRelationAggregateInput
}

input UserRelationFilter {
  is: UserWhereInput
  isNot: UserWhereInput
}

enum UserScalarFieldEnum {
  email
  emailVerified
  id
  image
  name
  updatedAt
}

input UserScalarWhereWithAggregatesInput {
  AND: [UserScalarWhereWithAggregatesInput!]
  NOT: [UserScalarWhereWithAggregatesInput!]
  OR: [UserScalarWhereWithAggregatesInput!]
  email: StringNullableWithAggregatesFilter
  emailVerified: DateTimeNullableWithAggregatesFilter
  id: StringWithAggregatesFilter
  image: StringNullableWithAggregatesFilter
  name: StringNullableWithAggregatesFilter
  updatedAt: DateTimeNullableWithAggregatesFilter
}

input UserUpdateInput {
  accounts: AccountUpdateManyWithoutUserInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  mergedRequests: MergeRequestUpdateManyWithoutAuthorInput
  name: NullableStringFieldUpdateOperationsInput
  premises: PremiseUpdateManyWithoutAuthorInput
  reactionOnThreads: ReactionOnThreadsUpdateManyWithoutUserInput
  reactionOnTimelines: ReactionOnTimelinesUpdateManyWithoutUserInput
  reactionOnVisions: ReactionOnVisionsUpdateManyWithoutUserInput
  relationsBetweenVisions: RelationBetweenVisionsUpdateManyWithoutAuthorInput
  reputationRecords: ReputationRecordUpdateManyWithoutUserInput
  sessions: SessionUpdateManyWithoutUserInput
  subscriptionsOnPremises: SubscriptionsOnPremisesUpdateManyWithoutUserInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesUpdateManyWithoutUserInput
  threads: ThreadUpdateManyWithoutAuthorInput
  timelines: TimelineUpdateManyWithoutAuthorInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  visionViewsHistory: VisionViewsHistoryUpdateManyWithoutUserInput
  visions: VisionUpdateManyWithoutAuthorInput
  votesOnPremise: VotesOnPremiseUpdateManyWithoutUserInput
  votesOnThread: VotesOnThreadUpdateManyWithoutUserInput
  votesOnTimeline: VotesOnTimelineUpdateManyWithoutUserInput
  votesOnVision: VotesOnVisionUpdateManyWithoutUserInput
}

input UserUpdateManyMutationInput {
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutAccountsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutAccountsInput
  create: UserCreateWithoutAccountsInput
  update: UserUpdateWithoutAccountsInput
  upsert: UserUpsertWithoutAccountsInput
}

input UserUpdateOneRequiredWithoutReactionOnThreadsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutReactionOnThreadsInput
  create: UserCreateWithoutReactionOnThreadsInput
  update: UserUpdateWithoutReactionOnThreadsInput
  upsert: UserUpsertWithoutReactionOnThreadsInput
}

input UserUpdateOneRequiredWithoutReactionOnTimelinesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutReactionOnTimelinesInput
  create: UserCreateWithoutReactionOnTimelinesInput
  update: UserUpdateWithoutReactionOnTimelinesInput
  upsert: UserUpsertWithoutReactionOnTimelinesInput
}

input UserUpdateOneRequiredWithoutReactionOnVisionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutReactionOnVisionsInput
  create: UserCreateWithoutReactionOnVisionsInput
  update: UserUpdateWithoutReactionOnVisionsInput
  upsert: UserUpsertWithoutReactionOnVisionsInput
}

input UserUpdateOneRequiredWithoutRelationsBetweenVisionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutRelationsBetweenVisionsInput
  create: UserCreateWithoutRelationsBetweenVisionsInput
  update: UserUpdateWithoutRelationsBetweenVisionsInput
  upsert: UserUpsertWithoutRelationsBetweenVisionsInput
}

input UserUpdateOneRequiredWithoutReputationRecordsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutReputationRecordsInput
  create: UserCreateWithoutReputationRecordsInput
  update: UserUpdateWithoutReputationRecordsInput
  upsert: UserUpsertWithoutReputationRecordsInput
}

input UserUpdateOneRequiredWithoutSessionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSessionsInput
  create: UserCreateWithoutSessionsInput
  update: UserUpdateWithoutSessionsInput
  upsert: UserUpsertWithoutSessionsInput
}

input UserUpdateOneRequiredWithoutSubscriptionsOnPremisesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSubscriptionsOnPremisesInput
  create: UserCreateWithoutSubscriptionsOnPremisesInput
  update: UserUpdateWithoutSubscriptionsOnPremisesInput
  upsert: UserUpsertWithoutSubscriptionsOnPremisesInput
}

input UserUpdateOneRequiredWithoutSubscriptionsOnTimelinesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutSubscriptionsOnTimelinesInput
  create: UserCreateWithoutSubscriptionsOnTimelinesInput
  update: UserUpdateWithoutSubscriptionsOnTimelinesInput
  upsert: UserUpsertWithoutSubscriptionsOnTimelinesInput
}

input UserUpdateOneRequiredWithoutTimelinesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutTimelinesInput
  create: UserCreateWithoutTimelinesInput
  update: UserUpdateWithoutTimelinesInput
  upsert: UserUpsertWithoutTimelinesInput
}

input UserUpdateOneRequiredWithoutVisionViewsHistoryInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutVisionViewsHistoryInput
  create: UserCreateWithoutVisionViewsHistoryInput
  update: UserUpdateWithoutVisionViewsHistoryInput
  upsert: UserUpsertWithoutVisionViewsHistoryInput
}

input UserUpdateOneRequiredWithoutVotesOnPremiseInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutVotesOnPremiseInput
  create: UserCreateWithoutVotesOnPremiseInput
  update: UserUpdateWithoutVotesOnPremiseInput
  upsert: UserUpsertWithoutVotesOnPremiseInput
}

input UserUpdateOneRequiredWithoutVotesOnThreadInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutVotesOnThreadInput
  create: UserCreateWithoutVotesOnThreadInput
  update: UserUpdateWithoutVotesOnThreadInput
  upsert: UserUpsertWithoutVotesOnThreadInput
}

input UserUpdateOneRequiredWithoutVotesOnTimelineInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutVotesOnTimelineInput
  create: UserCreateWithoutVotesOnTimelineInput
  update: UserUpdateWithoutVotesOnTimelineInput
  upsert: UserUpsertWithoutVotesOnTimelineInput
}

input UserUpdateOneRequiredWithoutVotesOnVisionInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutVotesOnVisionInput
  create: UserCreateWithoutVotesOnVisionInput
  update: UserUpdateWithoutVotesOnVisionInput
  upsert: UserUpsertWithoutVotesOnVisionInput
}

input UserUpdateOneWithoutMergedRequestsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutMergedRequestsInput
  create: UserCreateWithoutMergedRequestsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutMergedRequestsInput
  upsert: UserUpsertWithoutMergedRequestsInput
}

input UserUpdateOneWithoutPremisesInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutPremisesInput
  create: UserCreateWithoutPremisesInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutPremisesInput
  upsert: UserUpsertWithoutPremisesInput
}

input UserUpdateOneWithoutThreadsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutThreadsInput
  create: UserCreateWithoutThreadsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutThreadsInput
  upsert: UserUpsertWithoutThreadsInput
}

input UserUpdateOneWithoutVisionsInput {
  connect: UserWhereUniqueInput
  connectOrCreate: UserCreateOrConnectWithoutVisionsInput
  create: UserCreateWithoutVisionsInput
  delete: Boolean
  disconnect: Boolean
  update: UserUpdateWithoutVisionsInput
  upsert: UserUpsertWithoutVisionsInput
}

input UserUpdateWithoutAccountsInput {
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  mergedRequests: MergeRequestUpdateManyWithoutAuthorInput
  name: NullableStringFieldUpdateOperationsInput
  premises: PremiseUpdateManyWithoutAuthorInput
  reactionOnThreads: ReactionOnThreadsUpdateManyWithoutUserInput
  reactionOnTimelines: ReactionOnTimelinesUpdateManyWithoutUserInput
  reactionOnVisions: ReactionOnVisionsUpdateManyWithoutUserInput
  relationsBetweenVisions: RelationBetweenVisionsUpdateManyWithoutAuthorInput
  reputationRecords: ReputationRecordUpdateManyWithoutUserInput
  sessions: SessionUpdateManyWithoutUserInput
  subscriptionsOnPremises: SubscriptionsOnPremisesUpdateManyWithoutUserInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesUpdateManyWithoutUserInput
  threads: ThreadUpdateManyWithoutAuthorInput
  timelines: TimelineUpdateManyWithoutAuthorInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  visionViewsHistory: VisionViewsHistoryUpdateManyWithoutUserInput
  visions: VisionUpdateManyWithoutAuthorInput
  votesOnPremise: VotesOnPremiseUpdateManyWithoutUserInput
  votesOnThread: VotesOnThreadUpdateManyWithoutUserInput
  votesOnTimeline: VotesOnTimelineUpdateManyWithoutUserInput
  votesOnVision: VotesOnVisionUpdateManyWithoutUserInput
}

input UserUpdateWithoutMergedRequestsInput {
  accounts: AccountUpdateManyWithoutUserInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  name: NullableStringFieldUpdateOperationsInput
  premises: PremiseUpdateManyWithoutAuthorInput
  reactionOnThreads: ReactionOnThreadsUpdateManyWithoutUserInput
  reactionOnTimelines: ReactionOnTimelinesUpdateManyWithoutUserInput
  reactionOnVisions: ReactionOnVisionsUpdateManyWithoutUserInput
  relationsBetweenVisions: RelationBetweenVisionsUpdateManyWithoutAuthorInput
  reputationRecords: ReputationRecordUpdateManyWithoutUserInput
  sessions: SessionUpdateManyWithoutUserInput
  subscriptionsOnPremises: SubscriptionsOnPremisesUpdateManyWithoutUserInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesUpdateManyWithoutUserInput
  threads: ThreadUpdateManyWithoutAuthorInput
  timelines: TimelineUpdateManyWithoutAuthorInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  visionViewsHistory: VisionViewsHistoryUpdateManyWithoutUserInput
  visions: VisionUpdateManyWithoutAuthorInput
  votesOnPremise: VotesOnPremiseUpdateManyWithoutUserInput
  votesOnThread: VotesOnThreadUpdateManyWithoutUserInput
  votesOnTimeline: VotesOnTimelineUpdateManyWithoutUserInput
  votesOnVision: VotesOnVisionUpdateManyWithoutUserInput
}

input UserUpdateWithoutPremisesInput {
  accounts: AccountUpdateManyWithoutUserInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  mergedRequests: MergeRequestUpdateManyWithoutAuthorInput
  name: NullableStringFieldUpdateOperationsInput
  reactionOnThreads: ReactionOnThreadsUpdateManyWithoutUserInput
  reactionOnTimelines: ReactionOnTimelinesUpdateManyWithoutUserInput
  reactionOnVisions: ReactionOnVisionsUpdateManyWithoutUserInput
  relationsBetweenVisions: RelationBetweenVisionsUpdateManyWithoutAuthorInput
  reputationRecords: ReputationRecordUpdateManyWithoutUserInput
  sessions: SessionUpdateManyWithoutUserInput
  subscriptionsOnPremises: SubscriptionsOnPremisesUpdateManyWithoutUserInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesUpdateManyWithoutUserInput
  threads: ThreadUpdateManyWithoutAuthorInput
  timelines: TimelineUpdateManyWithoutAuthorInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  visionViewsHistory: VisionViewsHistoryUpdateManyWithoutUserInput
  visions: VisionUpdateManyWithoutAuthorInput
  votesOnPremise: VotesOnPremiseUpdateManyWithoutUserInput
  votesOnThread: VotesOnThreadUpdateManyWithoutUserInput
  votesOnTimeline: VotesOnTimelineUpdateManyWithoutUserInput
  votesOnVision: VotesOnVisionUpdateManyWithoutUserInput
}

input UserUpdateWithoutReactionOnThreadsInput {
  accounts: AccountUpdateManyWithoutUserInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  mergedRequests: MergeRequestUpdateManyWithoutAuthorInput
  name: NullableStringFieldUpdateOperationsInput
  premises: PremiseUpdateManyWithoutAuthorInput
  reactionOnTimelines: ReactionOnTimelinesUpdateManyWithoutUserInput
  reactionOnVisions: ReactionOnVisionsUpdateManyWithoutUserInput
  relationsBetweenVisions: RelationBetweenVisionsUpdateManyWithoutAuthorInput
  reputationRecords: ReputationRecordUpdateManyWithoutUserInput
  sessions: SessionUpdateManyWithoutUserInput
  subscriptionsOnPremises: SubscriptionsOnPremisesUpdateManyWithoutUserInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesUpdateManyWithoutUserInput
  threads: ThreadUpdateManyWithoutAuthorInput
  timelines: TimelineUpdateManyWithoutAuthorInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  visionViewsHistory: VisionViewsHistoryUpdateManyWithoutUserInput
  visions: VisionUpdateManyWithoutAuthorInput
  votesOnPremise: VotesOnPremiseUpdateManyWithoutUserInput
  votesOnThread: VotesOnThreadUpdateManyWithoutUserInput
  votesOnTimeline: VotesOnTimelineUpdateManyWithoutUserInput
  votesOnVision: VotesOnVisionUpdateManyWithoutUserInput
}

input UserUpdateWithoutReactionOnTimelinesInput {
  accounts: AccountUpdateManyWithoutUserInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  mergedRequests: MergeRequestUpdateManyWithoutAuthorInput
  name: NullableStringFieldUpdateOperationsInput
  premises: PremiseUpdateManyWithoutAuthorInput
  reactionOnThreads: ReactionOnThreadsUpdateManyWithoutUserInput
  reactionOnVisions: ReactionOnVisionsUpdateManyWithoutUserInput
  relationsBetweenVisions: RelationBetweenVisionsUpdateManyWithoutAuthorInput
  reputationRecords: ReputationRecordUpdateManyWithoutUserInput
  sessions: SessionUpdateManyWithoutUserInput
  subscriptionsOnPremises: SubscriptionsOnPremisesUpdateManyWithoutUserInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesUpdateManyWithoutUserInput
  threads: ThreadUpdateManyWithoutAuthorInput
  timelines: TimelineUpdateManyWithoutAuthorInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  visionViewsHistory: VisionViewsHistoryUpdateManyWithoutUserInput
  visions: VisionUpdateManyWithoutAuthorInput
  votesOnPremise: VotesOnPremiseUpdateManyWithoutUserInput
  votesOnThread: VotesOnThreadUpdateManyWithoutUserInput
  votesOnTimeline: VotesOnTimelineUpdateManyWithoutUserInput
  votesOnVision: VotesOnVisionUpdateManyWithoutUserInput
}

input UserUpdateWithoutReactionOnVisionsInput {
  accounts: AccountUpdateManyWithoutUserInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  mergedRequests: MergeRequestUpdateManyWithoutAuthorInput
  name: NullableStringFieldUpdateOperationsInput
  premises: PremiseUpdateManyWithoutAuthorInput
  reactionOnThreads: ReactionOnThreadsUpdateManyWithoutUserInput
  reactionOnTimelines: ReactionOnTimelinesUpdateManyWithoutUserInput
  relationsBetweenVisions: RelationBetweenVisionsUpdateManyWithoutAuthorInput
  reputationRecords: ReputationRecordUpdateManyWithoutUserInput
  sessions: SessionUpdateManyWithoutUserInput
  subscriptionsOnPremises: SubscriptionsOnPremisesUpdateManyWithoutUserInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesUpdateManyWithoutUserInput
  threads: ThreadUpdateManyWithoutAuthorInput
  timelines: TimelineUpdateManyWithoutAuthorInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  visionViewsHistory: VisionViewsHistoryUpdateManyWithoutUserInput
  visions: VisionUpdateManyWithoutAuthorInput
  votesOnPremise: VotesOnPremiseUpdateManyWithoutUserInput
  votesOnThread: VotesOnThreadUpdateManyWithoutUserInput
  votesOnTimeline: VotesOnTimelineUpdateManyWithoutUserInput
  votesOnVision: VotesOnVisionUpdateManyWithoutUserInput
}

input UserUpdateWithoutRelationsBetweenVisionsInput {
  accounts: AccountUpdateManyWithoutUserInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  mergedRequests: MergeRequestUpdateManyWithoutAuthorInput
  name: NullableStringFieldUpdateOperationsInput
  premises: PremiseUpdateManyWithoutAuthorInput
  reactionOnThreads: ReactionOnThreadsUpdateManyWithoutUserInput
  reactionOnTimelines: ReactionOnTimelinesUpdateManyWithoutUserInput
  reactionOnVisions: ReactionOnVisionsUpdateManyWithoutUserInput
  reputationRecords: ReputationRecordUpdateManyWithoutUserInput
  sessions: SessionUpdateManyWithoutUserInput
  subscriptionsOnPremises: SubscriptionsOnPremisesUpdateManyWithoutUserInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesUpdateManyWithoutUserInput
  threads: ThreadUpdateManyWithoutAuthorInput
  timelines: TimelineUpdateManyWithoutAuthorInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  visionViewsHistory: VisionViewsHistoryUpdateManyWithoutUserInput
  visions: VisionUpdateManyWithoutAuthorInput
  votesOnPremise: VotesOnPremiseUpdateManyWithoutUserInput
  votesOnThread: VotesOnThreadUpdateManyWithoutUserInput
  votesOnTimeline: VotesOnTimelineUpdateManyWithoutUserInput
  votesOnVision: VotesOnVisionUpdateManyWithoutUserInput
}

input UserUpdateWithoutReputationRecordsInput {
  accounts: AccountUpdateManyWithoutUserInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  mergedRequests: MergeRequestUpdateManyWithoutAuthorInput
  name: NullableStringFieldUpdateOperationsInput
  premises: PremiseUpdateManyWithoutAuthorInput
  reactionOnThreads: ReactionOnThreadsUpdateManyWithoutUserInput
  reactionOnTimelines: ReactionOnTimelinesUpdateManyWithoutUserInput
  reactionOnVisions: ReactionOnVisionsUpdateManyWithoutUserInput
  relationsBetweenVisions: RelationBetweenVisionsUpdateManyWithoutAuthorInput
  sessions: SessionUpdateManyWithoutUserInput
  subscriptionsOnPremises: SubscriptionsOnPremisesUpdateManyWithoutUserInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesUpdateManyWithoutUserInput
  threads: ThreadUpdateManyWithoutAuthorInput
  timelines: TimelineUpdateManyWithoutAuthorInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  visionViewsHistory: VisionViewsHistoryUpdateManyWithoutUserInput
  visions: VisionUpdateManyWithoutAuthorInput
  votesOnPremise: VotesOnPremiseUpdateManyWithoutUserInput
  votesOnThread: VotesOnThreadUpdateManyWithoutUserInput
  votesOnTimeline: VotesOnTimelineUpdateManyWithoutUserInput
  votesOnVision: VotesOnVisionUpdateManyWithoutUserInput
}

input UserUpdateWithoutSessionsInput {
  accounts: AccountUpdateManyWithoutUserInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  mergedRequests: MergeRequestUpdateManyWithoutAuthorInput
  name: NullableStringFieldUpdateOperationsInput
  premises: PremiseUpdateManyWithoutAuthorInput
  reactionOnThreads: ReactionOnThreadsUpdateManyWithoutUserInput
  reactionOnTimelines: ReactionOnTimelinesUpdateManyWithoutUserInput
  reactionOnVisions: ReactionOnVisionsUpdateManyWithoutUserInput
  relationsBetweenVisions: RelationBetweenVisionsUpdateManyWithoutAuthorInput
  reputationRecords: ReputationRecordUpdateManyWithoutUserInput
  subscriptionsOnPremises: SubscriptionsOnPremisesUpdateManyWithoutUserInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesUpdateManyWithoutUserInput
  threads: ThreadUpdateManyWithoutAuthorInput
  timelines: TimelineUpdateManyWithoutAuthorInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  visionViewsHistory: VisionViewsHistoryUpdateManyWithoutUserInput
  visions: VisionUpdateManyWithoutAuthorInput
  votesOnPremise: VotesOnPremiseUpdateManyWithoutUserInput
  votesOnThread: VotesOnThreadUpdateManyWithoutUserInput
  votesOnTimeline: VotesOnTimelineUpdateManyWithoutUserInput
  votesOnVision: VotesOnVisionUpdateManyWithoutUserInput
}

input UserUpdateWithoutSubscriptionsOnPremisesInput {
  accounts: AccountUpdateManyWithoutUserInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  mergedRequests: MergeRequestUpdateManyWithoutAuthorInput
  name: NullableStringFieldUpdateOperationsInput
  premises: PremiseUpdateManyWithoutAuthorInput
  reactionOnThreads: ReactionOnThreadsUpdateManyWithoutUserInput
  reactionOnTimelines: ReactionOnTimelinesUpdateManyWithoutUserInput
  reactionOnVisions: ReactionOnVisionsUpdateManyWithoutUserInput
  relationsBetweenVisions: RelationBetweenVisionsUpdateManyWithoutAuthorInput
  reputationRecords: ReputationRecordUpdateManyWithoutUserInput
  sessions: SessionUpdateManyWithoutUserInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesUpdateManyWithoutUserInput
  threads: ThreadUpdateManyWithoutAuthorInput
  timelines: TimelineUpdateManyWithoutAuthorInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  visionViewsHistory: VisionViewsHistoryUpdateManyWithoutUserInput
  visions: VisionUpdateManyWithoutAuthorInput
  votesOnPremise: VotesOnPremiseUpdateManyWithoutUserInput
  votesOnThread: VotesOnThreadUpdateManyWithoutUserInput
  votesOnTimeline: VotesOnTimelineUpdateManyWithoutUserInput
  votesOnVision: VotesOnVisionUpdateManyWithoutUserInput
}

input UserUpdateWithoutSubscriptionsOnTimelinesInput {
  accounts: AccountUpdateManyWithoutUserInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  mergedRequests: MergeRequestUpdateManyWithoutAuthorInput
  name: NullableStringFieldUpdateOperationsInput
  premises: PremiseUpdateManyWithoutAuthorInput
  reactionOnThreads: ReactionOnThreadsUpdateManyWithoutUserInput
  reactionOnTimelines: ReactionOnTimelinesUpdateManyWithoutUserInput
  reactionOnVisions: ReactionOnVisionsUpdateManyWithoutUserInput
  relationsBetweenVisions: RelationBetweenVisionsUpdateManyWithoutAuthorInput
  reputationRecords: ReputationRecordUpdateManyWithoutUserInput
  sessions: SessionUpdateManyWithoutUserInput
  subscriptionsOnPremises: SubscriptionsOnPremisesUpdateManyWithoutUserInput
  threads: ThreadUpdateManyWithoutAuthorInput
  timelines: TimelineUpdateManyWithoutAuthorInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  visionViewsHistory: VisionViewsHistoryUpdateManyWithoutUserInput
  visions: VisionUpdateManyWithoutAuthorInput
  votesOnPremise: VotesOnPremiseUpdateManyWithoutUserInput
  votesOnThread: VotesOnThreadUpdateManyWithoutUserInput
  votesOnTimeline: VotesOnTimelineUpdateManyWithoutUserInput
  votesOnVision: VotesOnVisionUpdateManyWithoutUserInput
}

input UserUpdateWithoutThreadsInput {
  accounts: AccountUpdateManyWithoutUserInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  mergedRequests: MergeRequestUpdateManyWithoutAuthorInput
  name: NullableStringFieldUpdateOperationsInput
  premises: PremiseUpdateManyWithoutAuthorInput
  reactionOnThreads: ReactionOnThreadsUpdateManyWithoutUserInput
  reactionOnTimelines: ReactionOnTimelinesUpdateManyWithoutUserInput
  reactionOnVisions: ReactionOnVisionsUpdateManyWithoutUserInput
  relationsBetweenVisions: RelationBetweenVisionsUpdateManyWithoutAuthorInput
  reputationRecords: ReputationRecordUpdateManyWithoutUserInput
  sessions: SessionUpdateManyWithoutUserInput
  subscriptionsOnPremises: SubscriptionsOnPremisesUpdateManyWithoutUserInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesUpdateManyWithoutUserInput
  timelines: TimelineUpdateManyWithoutAuthorInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  visionViewsHistory: VisionViewsHistoryUpdateManyWithoutUserInput
  visions: VisionUpdateManyWithoutAuthorInput
  votesOnPremise: VotesOnPremiseUpdateManyWithoutUserInput
  votesOnThread: VotesOnThreadUpdateManyWithoutUserInput
  votesOnTimeline: VotesOnTimelineUpdateManyWithoutUserInput
  votesOnVision: VotesOnVisionUpdateManyWithoutUserInput
}

input UserUpdateWithoutTimelinesInput {
  accounts: AccountUpdateManyWithoutUserInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  mergedRequests: MergeRequestUpdateManyWithoutAuthorInput
  name: NullableStringFieldUpdateOperationsInput
  premises: PremiseUpdateManyWithoutAuthorInput
  reactionOnThreads: ReactionOnThreadsUpdateManyWithoutUserInput
  reactionOnTimelines: ReactionOnTimelinesUpdateManyWithoutUserInput
  reactionOnVisions: ReactionOnVisionsUpdateManyWithoutUserInput
  relationsBetweenVisions: RelationBetweenVisionsUpdateManyWithoutAuthorInput
  reputationRecords: ReputationRecordUpdateManyWithoutUserInput
  sessions: SessionUpdateManyWithoutUserInput
  subscriptionsOnPremises: SubscriptionsOnPremisesUpdateManyWithoutUserInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesUpdateManyWithoutUserInput
  threads: ThreadUpdateManyWithoutAuthorInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  visionViewsHistory: VisionViewsHistoryUpdateManyWithoutUserInput
  visions: VisionUpdateManyWithoutAuthorInput
  votesOnPremise: VotesOnPremiseUpdateManyWithoutUserInput
  votesOnThread: VotesOnThreadUpdateManyWithoutUserInput
  votesOnTimeline: VotesOnTimelineUpdateManyWithoutUserInput
  votesOnVision: VotesOnVisionUpdateManyWithoutUserInput
}

input UserUpdateWithoutVisionViewsHistoryInput {
  accounts: AccountUpdateManyWithoutUserInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  mergedRequests: MergeRequestUpdateManyWithoutAuthorInput
  name: NullableStringFieldUpdateOperationsInput
  premises: PremiseUpdateManyWithoutAuthorInput
  reactionOnThreads: ReactionOnThreadsUpdateManyWithoutUserInput
  reactionOnTimelines: ReactionOnTimelinesUpdateManyWithoutUserInput
  reactionOnVisions: ReactionOnVisionsUpdateManyWithoutUserInput
  relationsBetweenVisions: RelationBetweenVisionsUpdateManyWithoutAuthorInput
  reputationRecords: ReputationRecordUpdateManyWithoutUserInput
  sessions: SessionUpdateManyWithoutUserInput
  subscriptionsOnPremises: SubscriptionsOnPremisesUpdateManyWithoutUserInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesUpdateManyWithoutUserInput
  threads: ThreadUpdateManyWithoutAuthorInput
  timelines: TimelineUpdateManyWithoutAuthorInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  visions: VisionUpdateManyWithoutAuthorInput
  votesOnPremise: VotesOnPremiseUpdateManyWithoutUserInput
  votesOnThread: VotesOnThreadUpdateManyWithoutUserInput
  votesOnTimeline: VotesOnTimelineUpdateManyWithoutUserInput
  votesOnVision: VotesOnVisionUpdateManyWithoutUserInput
}

input UserUpdateWithoutVisionsInput {
  accounts: AccountUpdateManyWithoutUserInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  mergedRequests: MergeRequestUpdateManyWithoutAuthorInput
  name: NullableStringFieldUpdateOperationsInput
  premises: PremiseUpdateManyWithoutAuthorInput
  reactionOnThreads: ReactionOnThreadsUpdateManyWithoutUserInput
  reactionOnTimelines: ReactionOnTimelinesUpdateManyWithoutUserInput
  reactionOnVisions: ReactionOnVisionsUpdateManyWithoutUserInput
  relationsBetweenVisions: RelationBetweenVisionsUpdateManyWithoutAuthorInput
  reputationRecords: ReputationRecordUpdateManyWithoutUserInput
  sessions: SessionUpdateManyWithoutUserInput
  subscriptionsOnPremises: SubscriptionsOnPremisesUpdateManyWithoutUserInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesUpdateManyWithoutUserInput
  threads: ThreadUpdateManyWithoutAuthorInput
  timelines: TimelineUpdateManyWithoutAuthorInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  visionViewsHistory: VisionViewsHistoryUpdateManyWithoutUserInput
  votesOnPremise: VotesOnPremiseUpdateManyWithoutUserInput
  votesOnThread: VotesOnThreadUpdateManyWithoutUserInput
  votesOnTimeline: VotesOnTimelineUpdateManyWithoutUserInput
  votesOnVision: VotesOnVisionUpdateManyWithoutUserInput
}

input UserUpdateWithoutVotesOnPremiseInput {
  accounts: AccountUpdateManyWithoutUserInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  mergedRequests: MergeRequestUpdateManyWithoutAuthorInput
  name: NullableStringFieldUpdateOperationsInput
  premises: PremiseUpdateManyWithoutAuthorInput
  reactionOnThreads: ReactionOnThreadsUpdateManyWithoutUserInput
  reactionOnTimelines: ReactionOnTimelinesUpdateManyWithoutUserInput
  reactionOnVisions: ReactionOnVisionsUpdateManyWithoutUserInput
  relationsBetweenVisions: RelationBetweenVisionsUpdateManyWithoutAuthorInput
  reputationRecords: ReputationRecordUpdateManyWithoutUserInput
  sessions: SessionUpdateManyWithoutUserInput
  subscriptionsOnPremises: SubscriptionsOnPremisesUpdateManyWithoutUserInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesUpdateManyWithoutUserInput
  threads: ThreadUpdateManyWithoutAuthorInput
  timelines: TimelineUpdateManyWithoutAuthorInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  visionViewsHistory: VisionViewsHistoryUpdateManyWithoutUserInput
  visions: VisionUpdateManyWithoutAuthorInput
  votesOnThread: VotesOnThreadUpdateManyWithoutUserInput
  votesOnTimeline: VotesOnTimelineUpdateManyWithoutUserInput
  votesOnVision: VotesOnVisionUpdateManyWithoutUserInput
}

input UserUpdateWithoutVotesOnThreadInput {
  accounts: AccountUpdateManyWithoutUserInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  mergedRequests: MergeRequestUpdateManyWithoutAuthorInput
  name: NullableStringFieldUpdateOperationsInput
  premises: PremiseUpdateManyWithoutAuthorInput
  reactionOnThreads: ReactionOnThreadsUpdateManyWithoutUserInput
  reactionOnTimelines: ReactionOnTimelinesUpdateManyWithoutUserInput
  reactionOnVisions: ReactionOnVisionsUpdateManyWithoutUserInput
  relationsBetweenVisions: RelationBetweenVisionsUpdateManyWithoutAuthorInput
  reputationRecords: ReputationRecordUpdateManyWithoutUserInput
  sessions: SessionUpdateManyWithoutUserInput
  subscriptionsOnPremises: SubscriptionsOnPremisesUpdateManyWithoutUserInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesUpdateManyWithoutUserInput
  threads: ThreadUpdateManyWithoutAuthorInput
  timelines: TimelineUpdateManyWithoutAuthorInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  visionViewsHistory: VisionViewsHistoryUpdateManyWithoutUserInput
  visions: VisionUpdateManyWithoutAuthorInput
  votesOnPremise: VotesOnPremiseUpdateManyWithoutUserInput
  votesOnTimeline: VotesOnTimelineUpdateManyWithoutUserInput
  votesOnVision: VotesOnVisionUpdateManyWithoutUserInput
}

input UserUpdateWithoutVotesOnTimelineInput {
  accounts: AccountUpdateManyWithoutUserInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  mergedRequests: MergeRequestUpdateManyWithoutAuthorInput
  name: NullableStringFieldUpdateOperationsInput
  premises: PremiseUpdateManyWithoutAuthorInput
  reactionOnThreads: ReactionOnThreadsUpdateManyWithoutUserInput
  reactionOnTimelines: ReactionOnTimelinesUpdateManyWithoutUserInput
  reactionOnVisions: ReactionOnVisionsUpdateManyWithoutUserInput
  relationsBetweenVisions: RelationBetweenVisionsUpdateManyWithoutAuthorInput
  reputationRecords: ReputationRecordUpdateManyWithoutUserInput
  sessions: SessionUpdateManyWithoutUserInput
  subscriptionsOnPremises: SubscriptionsOnPremisesUpdateManyWithoutUserInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesUpdateManyWithoutUserInput
  threads: ThreadUpdateManyWithoutAuthorInput
  timelines: TimelineUpdateManyWithoutAuthorInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  visionViewsHistory: VisionViewsHistoryUpdateManyWithoutUserInput
  visions: VisionUpdateManyWithoutAuthorInput
  votesOnPremise: VotesOnPremiseUpdateManyWithoutUserInput
  votesOnThread: VotesOnThreadUpdateManyWithoutUserInput
  votesOnVision: VotesOnVisionUpdateManyWithoutUserInput
}

input UserUpdateWithoutVotesOnVisionInput {
  accounts: AccountUpdateManyWithoutUserInput
  email: NullableStringFieldUpdateOperationsInput
  emailVerified: NullableDateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  image: NullableStringFieldUpdateOperationsInput
  mergedRequests: MergeRequestUpdateManyWithoutAuthorInput
  name: NullableStringFieldUpdateOperationsInput
  premises: PremiseUpdateManyWithoutAuthorInput
  reactionOnThreads: ReactionOnThreadsUpdateManyWithoutUserInput
  reactionOnTimelines: ReactionOnTimelinesUpdateManyWithoutUserInput
  reactionOnVisions: ReactionOnVisionsUpdateManyWithoutUserInput
  relationsBetweenVisions: RelationBetweenVisionsUpdateManyWithoutAuthorInput
  reputationRecords: ReputationRecordUpdateManyWithoutUserInput
  sessions: SessionUpdateManyWithoutUserInput
  subscriptionsOnPremises: SubscriptionsOnPremisesUpdateManyWithoutUserInput
  subscriptionsOnTimelines: SubscriptionsOnTimelinesUpdateManyWithoutUserInput
  threads: ThreadUpdateManyWithoutAuthorInput
  timelines: TimelineUpdateManyWithoutAuthorInput
  updatedAt: NullableDateTimeFieldUpdateOperationsInput
  visionViewsHistory: VisionViewsHistoryUpdateManyWithoutUserInput
  visions: VisionUpdateManyWithoutAuthorInput
  votesOnPremise: VotesOnPremiseUpdateManyWithoutUserInput
  votesOnThread: VotesOnThreadUpdateManyWithoutUserInput
  votesOnTimeline: VotesOnTimelineUpdateManyWithoutUserInput
}

input UserUpsertWithoutAccountsInput {
  create: UserCreateWithoutAccountsInput!
  update: UserUpdateWithoutAccountsInput!
}

input UserUpsertWithoutMergedRequestsInput {
  create: UserCreateWithoutMergedRequestsInput!
  update: UserUpdateWithoutMergedRequestsInput!
}

input UserUpsertWithoutPremisesInput {
  create: UserCreateWithoutPremisesInput!
  update: UserUpdateWithoutPremisesInput!
}

input UserUpsertWithoutReactionOnThreadsInput {
  create: UserCreateWithoutReactionOnThreadsInput!
  update: UserUpdateWithoutReactionOnThreadsInput!
}

input UserUpsertWithoutReactionOnTimelinesInput {
  create: UserCreateWithoutReactionOnTimelinesInput!
  update: UserUpdateWithoutReactionOnTimelinesInput!
}

input UserUpsertWithoutReactionOnVisionsInput {
  create: UserCreateWithoutReactionOnVisionsInput!
  update: UserUpdateWithoutReactionOnVisionsInput!
}

input UserUpsertWithoutRelationsBetweenVisionsInput {
  create: UserCreateWithoutRelationsBetweenVisionsInput!
  update: UserUpdateWithoutRelationsBetweenVisionsInput!
}

input UserUpsertWithoutReputationRecordsInput {
  create: UserCreateWithoutReputationRecordsInput!
  update: UserUpdateWithoutReputationRecordsInput!
}

input UserUpsertWithoutSessionsInput {
  create: UserCreateWithoutSessionsInput!
  update: UserUpdateWithoutSessionsInput!
}

input UserUpsertWithoutSubscriptionsOnPremisesInput {
  create: UserCreateWithoutSubscriptionsOnPremisesInput!
  update: UserUpdateWithoutSubscriptionsOnPremisesInput!
}

input UserUpsertWithoutSubscriptionsOnTimelinesInput {
  create: UserCreateWithoutSubscriptionsOnTimelinesInput!
  update: UserUpdateWithoutSubscriptionsOnTimelinesInput!
}

input UserUpsertWithoutThreadsInput {
  create: UserCreateWithoutThreadsInput!
  update: UserUpdateWithoutThreadsInput!
}

input UserUpsertWithoutTimelinesInput {
  create: UserCreateWithoutTimelinesInput!
  update: UserUpdateWithoutTimelinesInput!
}

input UserUpsertWithoutVisionViewsHistoryInput {
  create: UserCreateWithoutVisionViewsHistoryInput!
  update: UserUpdateWithoutVisionViewsHistoryInput!
}

input UserUpsertWithoutVisionsInput {
  create: UserCreateWithoutVisionsInput!
  update: UserUpdateWithoutVisionsInput!
}

input UserUpsertWithoutVotesOnPremiseInput {
  create: UserCreateWithoutVotesOnPremiseInput!
  update: UserUpdateWithoutVotesOnPremiseInput!
}

input UserUpsertWithoutVotesOnThreadInput {
  create: UserCreateWithoutVotesOnThreadInput!
  update: UserUpdateWithoutVotesOnThreadInput!
}

input UserUpsertWithoutVotesOnTimelineInput {
  create: UserCreateWithoutVotesOnTimelineInput!
  update: UserUpdateWithoutVotesOnTimelineInput!
}

input UserUpsertWithoutVotesOnVisionInput {
  create: UserCreateWithoutVotesOnVisionInput!
  update: UserUpdateWithoutVotesOnVisionInput!
}

input UserWhereInput {
  AND: [UserWhereInput!]
  NOT: [UserWhereInput!]
  OR: [UserWhereInput!]
  accounts: AccountListRelationFilter
  email: StringNullableFilter
  emailVerified: DateTimeNullableFilter
  id: StringFilter
  image: StringNullableFilter
  mergedRequests: MergeRequestListRelationFilter
  name: StringNullableFilter
  premises: PremiseListRelationFilter
  reactionOnThreads: ReactionOnThreadsListRelationFilter
  reactionOnTimelines: ReactionOnTimelinesListRelationFilter
  reactionOnVisions: ReactionOnVisionsListRelationFilter
  relationsBetweenVisions: RelationBetweenVisionsListRelationFilter
  reputationRecords: ReputationRecordListRelationFilter
  sessions: SessionListRelationFilter
  subscriptionsOnPremises: SubscriptionsOnPremisesListRelationFilter
  subscriptionsOnTimelines: SubscriptionsOnTimelinesListRelationFilter
  threads: ThreadListRelationFilter
  timelines: TimelineListRelationFilter
  updatedAt: DateTimeNullableFilter
  visionViewsHistory: VisionViewsHistoryListRelationFilter
  visions: VisionListRelationFilter
  votesOnPremise: VotesOnPremiseListRelationFilter
  votesOnThread: VotesOnThreadListRelationFilter
  votesOnTimeline: VotesOnTimelineListRelationFilter
  votesOnVision: VotesOnVisionListRelationFilter
}

input UserWhereUniqueInput {
  email: String
  id: String
}

type VerificationToken {
  expires: DateTime!
  identifier: String!
  token: String!
}

type VerificationTokenCountAggregate {
  _all: Int!
  expires: Int!
  identifier: Int!
  token: Int!
}

input VerificationTokenCountOrderByAggregateInput {
  expires: SortOrder
  identifier: SortOrder
  token: SortOrder
}

input VerificationTokenCreateInput {
  expires: DateTime!
  identifier: String!
  token: String!
}

input VerificationTokenCreateManyInput {
  expires: DateTime!
  identifier: String!
  token: String!
}

type VerificationTokenGroupBy {
  _count: VerificationTokenCountAggregate
  _max: VerificationTokenMaxAggregate
  _min: VerificationTokenMinAggregate
  expires: DateTime!
  identifier: String!
  token: String!
}

input VerificationTokenIdentifierTokenCompoundUniqueInput {
  identifier: String!
  token: String!
}

type VerificationTokenMaxAggregate {
  expires: DateTime
  identifier: String
  token: String
}

input VerificationTokenMaxOrderByAggregateInput {
  expires: SortOrder
  identifier: SortOrder
  token: SortOrder
}

type VerificationTokenMinAggregate {
  expires: DateTime
  identifier: String
  token: String
}

input VerificationTokenMinOrderByAggregateInput {
  expires: SortOrder
  identifier: SortOrder
  token: SortOrder
}

input VerificationTokenOrderByWithAggregationInput {
  _count: VerificationTokenCountOrderByAggregateInput
  _max: VerificationTokenMaxOrderByAggregateInput
  _min: VerificationTokenMinOrderByAggregateInput
  expires: SortOrder
  identifier: SortOrder
  token: SortOrder
}

input VerificationTokenOrderByWithRelationInput {
  expires: SortOrder
  identifier: SortOrder
  token: SortOrder
}

enum VerificationTokenScalarFieldEnum {
  expires
  identifier
  token
}

input VerificationTokenScalarWhereWithAggregatesInput {
  AND: [VerificationTokenScalarWhereWithAggregatesInput!]
  NOT: [VerificationTokenScalarWhereWithAggregatesInput!]
  OR: [VerificationTokenScalarWhereWithAggregatesInput!]
  expires: DateTimeWithAggregatesFilter
  identifier: StringWithAggregatesFilter
  token: StringWithAggregatesFilter
}

input VerificationTokenUpdateInput {
  expires: DateTimeFieldUpdateOperationsInput
  identifier: StringFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
}

input VerificationTokenUpdateManyMutationInput {
  expires: DateTimeFieldUpdateOperationsInput
  identifier: StringFieldUpdateOperationsInput
  token: StringFieldUpdateOperationsInput
}

input VerificationTokenWhereInput {
  AND: [VerificationTokenWhereInput!]
  NOT: [VerificationTokenWhereInput!]
  OR: [VerificationTokenWhereInput!]
  expires: DateTimeFilter
  identifier: StringFilter
  token: StringFilter
}

input VerificationTokenWhereUniqueInput {
  identifier_token: VerificationTokenIdentifierTokenCompoundUniqueInput
  token: String
}

type Vision {
  _count: VisionCount
  activityDate: DateTime
  author: User
  authorId: String
  createdAt: DateTime!
  description: String
  draftMode: Boolean!
  id: String!
  labelsOnVision(cursor: LabelOnVisionWhereUniqueInput, distinct: [LabelOnVisionScalarFieldEnum!], orderBy: [LabelOnVisionOrderByWithRelationInput!], skip: Int, take: Int, where: LabelOnVisionWhereInput): [LabelOnVision!]!
  mergeRequest: MergeRequest
  nextVisions(cursor: VisionWhereUniqueInput, distinct: [VisionScalarFieldEnum!], orderBy: [VisionOrderByWithRelationInput!], skip: Int, take: Int, where: VisionWhereInput): [Vision!]!
  premise: Premise!
  premiseId: String!
  prevVision: Vision
  prevVisionId: String
  reactionOnVisions(cursor: ReactionOnVisionsWhereUniqueInput, distinct: [ReactionOnVisionsScalarFieldEnum!], orderBy: [ReactionOnVisionsOrderByWithRelationInput!], skip: Int, take: Int, where: ReactionOnVisionsWhereInput): [ReactionOnVisions!]!
  reference: Reference
  referenceId: String
  reputationRecords(cursor: ReputationRecordWhereUniqueInput, distinct: [ReputationRecordScalarFieldEnum!], orderBy: [ReputationRecordOrderByWithRelationInput!], skip: Int, take: Int, where: ReputationRecordWhereInput): [ReputationRecord!]!
  tagsOnVisions(cursor: TagsOnVisionsWhereUniqueInput, distinct: [TagsOnVisionsScalarFieldEnum!], orderBy: [TagsOnVisionsOrderByWithRelationInput!], skip: Int, take: Int, where: TagsOnVisionsWhereInput): [TagsOnVisions!]!

  """source visions"""
  targetedBy(cursor: RelationBetweenVisionsWhereUniqueInput, distinct: [RelationBetweenVisionsScalarFieldEnum!], orderBy: [RelationBetweenVisionsOrderByWithRelationInput!], skip: Int, take: Int, where: RelationBetweenVisionsWhereInput): [RelationBetweenVisions!]!

  """target visions"""
  targeting(cursor: RelationBetweenVisionsWhereUniqueInput, distinct: [RelationBetweenVisionsScalarFieldEnum!], orderBy: [RelationBetweenVisionsOrderByWithRelationInput!], skip: Int, take: Int, where: RelationBetweenVisionsWhereInput): [RelationBetweenVisions!]!
  threadsOnVision(cursor: ThreadsOnVisionWhereUniqueInput, distinct: [ThreadsOnVisionScalarFieldEnum!], orderBy: [ThreadsOnVisionOrderByWithRelationInput!], skip: Int, take: Int, where: ThreadsOnVisionWhereInput): [ThreadsOnVision!]!
  thumbnail: String
  title: String!
  updatedAt: DateTime!
  visionViewsHistory(cursor: VisionViewsHistoryWhereUniqueInput, distinct: [VisionViewsHistoryScalarFieldEnum!], orderBy: [VisionViewsHistoryOrderByWithRelationInput!], skip: Int, take: Int, where: VisionViewsHistoryWhereInput): [VisionViewsHistory!]!
  votesOnVision(cursor: VotesOnVisionWhereUniqueInput, distinct: [VotesOnVisionScalarFieldEnum!], orderBy: [VotesOnVisionOrderByWithRelationInput!], skip: Int, take: Int, where: VotesOnVisionWhereInput): [VotesOnVision!]!
}

type VisionCount {
  labelsOnVision: Int!
  nextVisions: Int!
  reactionOnVisions: Int!
  reputationRecords: Int!
  tagsOnVisions: Int!
  targetedBy: Int!
  targeting: Int!
  threadsOnVision: Int!
  visionViewsHistory: Int!
  votesOnVision: Int!
}

type VisionCountAggregate {
  _all: Int!
  activityDate: Int!
  authorId: Int!
  createdAt: Int!
  description: Int!
  draftMode: Int!
  id: Int!
  premiseId: Int!
  prevVisionId: Int!
  referenceId: Int!
  thumbnail: Int!
  title: Int!
  updatedAt: Int!
}

input VisionCountOrderByAggregateInput {
  activityDate: SortOrder
  authorId: SortOrder
  createdAt: SortOrder
  description: SortOrder
  draftMode: SortOrder
  id: SortOrder
  premiseId: SortOrder
  prevVisionId: SortOrder
  referenceId: SortOrder
  thumbnail: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input VisionCreateInput {
  activityDate: DateTime
  author: UserCreateNestedOneWithoutVisionsInput
  createdAt: DateTime
  description: String
  draftMode: Boolean
  id: String
  labelsOnVision: LabelOnVisionCreateNestedManyWithoutVisionInput
  mergeRequest: MergeRequestCreateNestedOneWithoutVisionInput
  nextVisions: VisionCreateNestedManyWithoutPrevVisionInput
  premise: PremiseCreateNestedOneWithoutVisionInput!
  prevVision: VisionCreateNestedOneWithoutNextVisionsInput
  reactionOnVisions: ReactionOnVisionsCreateNestedManyWithoutVisionInput
  reference: ReferenceCreateNestedOneWithoutVisionInput
  reputationRecords: ReputationRecordCreateNestedManyWithoutVisionInput
  tagsOnVisions: TagsOnVisionsCreateNestedManyWithoutVisionInput
  targetedBy: RelationBetweenVisionsCreateNestedManyWithoutSourceVisionInput
  targeting: RelationBetweenVisionsCreateNestedManyWithoutTargetVisionInput
  threadsOnVision: ThreadsOnVisionCreateNestedManyWithoutVisionInput
  thumbnail: String
  title: String!
  updatedAt: DateTime
  visionViewsHistory: VisionViewsHistoryCreateNestedManyWithoutVisionInput
  votesOnVision: VotesOnVisionCreateNestedManyWithoutVisionInput
}

input VisionCreateManyAuthorInput {
  activityDate: DateTime
  createdAt: DateTime
  description: String
  draftMode: Boolean
  id: String
  premiseId: String!
  prevVisionId: String
  referenceId: String
  thumbnail: String
  title: String!
  updatedAt: DateTime
}

input VisionCreateManyAuthorInputEnvelope {
  data: [VisionCreateManyAuthorInput!]!
  skipDuplicates: Boolean
}

input VisionCreateManyInput {
  activityDate: DateTime
  authorId: String
  createdAt: DateTime
  description: String
  draftMode: Boolean
  id: String
  premiseId: String!
  prevVisionId: String
  referenceId: String
  thumbnail: String
  title: String!
  updatedAt: DateTime
}

input VisionCreateManyPremiseInput {
  activityDate: DateTime
  authorId: String
  createdAt: DateTime
  description: String
  draftMode: Boolean
  id: String
  prevVisionId: String
  referenceId: String
  thumbnail: String
  title: String!
  updatedAt: DateTime
}

input VisionCreateManyPremiseInputEnvelope {
  data: [VisionCreateManyPremiseInput!]!
  skipDuplicates: Boolean
}

input VisionCreateManyPrevVisionInput {
  activityDate: DateTime
  authorId: String
  createdAt: DateTime
  description: String
  draftMode: Boolean
  id: String
  premiseId: String!
  referenceId: String
  thumbnail: String
  title: String!
  updatedAt: DateTime
}

input VisionCreateManyPrevVisionInputEnvelope {
  data: [VisionCreateManyPrevVisionInput!]!
  skipDuplicates: Boolean
}

input VisionCreateManyReferenceInput {
  activityDate: DateTime
  authorId: String
  createdAt: DateTime
  description: String
  draftMode: Boolean
  id: String
  premiseId: String!
  prevVisionId: String
  thumbnail: String
  title: String!
  updatedAt: DateTime
}

input VisionCreateManyReferenceInputEnvelope {
  data: [VisionCreateManyReferenceInput!]!
  skipDuplicates: Boolean
}

input VisionCreateNestedManyWithoutAuthorInput {
  connect: [VisionWhereUniqueInput!]
  connectOrCreate: [VisionCreateOrConnectWithoutAuthorInput!]
  create: [VisionCreateWithoutAuthorInput!]
  createMany: VisionCreateManyAuthorInputEnvelope
}

input VisionCreateNestedManyWithoutPremiseInput {
  connect: [VisionWhereUniqueInput!]
  connectOrCreate: [VisionCreateOrConnectWithoutPremiseInput!]
  create: [VisionCreateWithoutPremiseInput!]
  createMany: VisionCreateManyPremiseInputEnvelope
}

input VisionCreateNestedManyWithoutPrevVisionInput {
  connect: [VisionWhereUniqueInput!]
  connectOrCreate: [VisionCreateOrConnectWithoutPrevVisionInput!]
  create: [VisionCreateWithoutPrevVisionInput!]
  createMany: VisionCreateManyPrevVisionInputEnvelope
}

input VisionCreateNestedManyWithoutReferenceInput {
  connect: [VisionWhereUniqueInput!]
  connectOrCreate: [VisionCreateOrConnectWithoutReferenceInput!]
  create: [VisionCreateWithoutReferenceInput!]
  createMany: VisionCreateManyReferenceInputEnvelope
}

input VisionCreateNestedOneWithoutLabelsOnVisionInput {
  connect: VisionWhereUniqueInput
  connectOrCreate: VisionCreateOrConnectWithoutLabelsOnVisionInput
  create: VisionCreateWithoutLabelsOnVisionInput
}

input VisionCreateNestedOneWithoutMergeRequestInput {
  connect: VisionWhereUniqueInput
  connectOrCreate: VisionCreateOrConnectWithoutMergeRequestInput
  create: VisionCreateWithoutMergeRequestInput
}

input VisionCreateNestedOneWithoutNextVisionsInput {
  connect: VisionWhereUniqueInput
  connectOrCreate: VisionCreateOrConnectWithoutNextVisionsInput
  create: VisionCreateWithoutNextVisionsInput
}

input VisionCreateNestedOneWithoutReactionOnVisionsInput {
  connect: VisionWhereUniqueInput
  connectOrCreate: VisionCreateOrConnectWithoutReactionOnVisionsInput
  create: VisionCreateWithoutReactionOnVisionsInput
}

input VisionCreateNestedOneWithoutReputationRecordsInput {
  connect: VisionWhereUniqueInput
  connectOrCreate: VisionCreateOrConnectWithoutReputationRecordsInput
  create: VisionCreateWithoutReputationRecordsInput
}

input VisionCreateNestedOneWithoutTagsOnVisionsInput {
  connect: VisionWhereUniqueInput
  connectOrCreate: VisionCreateOrConnectWithoutTagsOnVisionsInput
  create: VisionCreateWithoutTagsOnVisionsInput
}

input VisionCreateNestedOneWithoutTargetedByInput {
  connect: VisionWhereUniqueInput
  connectOrCreate: VisionCreateOrConnectWithoutTargetedByInput
  create: VisionCreateWithoutTargetedByInput
}

input VisionCreateNestedOneWithoutTargetingInput {
  connect: VisionWhereUniqueInput
  connectOrCreate: VisionCreateOrConnectWithoutTargetingInput
  create: VisionCreateWithoutTargetingInput
}

input VisionCreateNestedOneWithoutThreadsOnVisionInput {
  connect: VisionWhereUniqueInput
  connectOrCreate: VisionCreateOrConnectWithoutThreadsOnVisionInput
  create: VisionCreateWithoutThreadsOnVisionInput
}

input VisionCreateNestedOneWithoutVisionViewsHistoryInput {
  connect: VisionWhereUniqueInput
  connectOrCreate: VisionCreateOrConnectWithoutVisionViewsHistoryInput
  create: VisionCreateWithoutVisionViewsHistoryInput
}

input VisionCreateNestedOneWithoutVotesOnVisionInput {
  connect: VisionWhereUniqueInput
  connectOrCreate: VisionCreateOrConnectWithoutVotesOnVisionInput
  create: VisionCreateWithoutVotesOnVisionInput
}

input VisionCreateOrConnectWithoutAuthorInput {
  create: VisionCreateWithoutAuthorInput!
  where: VisionWhereUniqueInput!
}

input VisionCreateOrConnectWithoutLabelsOnVisionInput {
  create: VisionCreateWithoutLabelsOnVisionInput!
  where: VisionWhereUniqueInput!
}

input VisionCreateOrConnectWithoutMergeRequestInput {
  create: VisionCreateWithoutMergeRequestInput!
  where: VisionWhereUniqueInput!
}

input VisionCreateOrConnectWithoutNextVisionsInput {
  create: VisionCreateWithoutNextVisionsInput!
  where: VisionWhereUniqueInput!
}

input VisionCreateOrConnectWithoutPremiseInput {
  create: VisionCreateWithoutPremiseInput!
  where: VisionWhereUniqueInput!
}

input VisionCreateOrConnectWithoutPrevVisionInput {
  create: VisionCreateWithoutPrevVisionInput!
  where: VisionWhereUniqueInput!
}

input VisionCreateOrConnectWithoutReactionOnVisionsInput {
  create: VisionCreateWithoutReactionOnVisionsInput!
  where: VisionWhereUniqueInput!
}

input VisionCreateOrConnectWithoutReferenceInput {
  create: VisionCreateWithoutReferenceInput!
  where: VisionWhereUniqueInput!
}

input VisionCreateOrConnectWithoutReputationRecordsInput {
  create: VisionCreateWithoutReputationRecordsInput!
  where: VisionWhereUniqueInput!
}

input VisionCreateOrConnectWithoutTagsOnVisionsInput {
  create: VisionCreateWithoutTagsOnVisionsInput!
  where: VisionWhereUniqueInput!
}

input VisionCreateOrConnectWithoutTargetedByInput {
  create: VisionCreateWithoutTargetedByInput!
  where: VisionWhereUniqueInput!
}

input VisionCreateOrConnectWithoutTargetingInput {
  create: VisionCreateWithoutTargetingInput!
  where: VisionWhereUniqueInput!
}

input VisionCreateOrConnectWithoutThreadsOnVisionInput {
  create: VisionCreateWithoutThreadsOnVisionInput!
  where: VisionWhereUniqueInput!
}

input VisionCreateOrConnectWithoutVisionViewsHistoryInput {
  create: VisionCreateWithoutVisionViewsHistoryInput!
  where: VisionWhereUniqueInput!
}

input VisionCreateOrConnectWithoutVotesOnVisionInput {
  create: VisionCreateWithoutVotesOnVisionInput!
  where: VisionWhereUniqueInput!
}

input VisionCreateWithoutAuthorInput {
  activityDate: DateTime
  createdAt: DateTime
  description: String
  draftMode: Boolean
  id: String
  labelsOnVision: LabelOnVisionCreateNestedManyWithoutVisionInput
  mergeRequest: MergeRequestCreateNestedOneWithoutVisionInput
  nextVisions: VisionCreateNestedManyWithoutPrevVisionInput
  premise: PremiseCreateNestedOneWithoutVisionInput!
  prevVision: VisionCreateNestedOneWithoutNextVisionsInput
  reactionOnVisions: ReactionOnVisionsCreateNestedManyWithoutVisionInput
  reference: ReferenceCreateNestedOneWithoutVisionInput
  reputationRecords: ReputationRecordCreateNestedManyWithoutVisionInput
  tagsOnVisions: TagsOnVisionsCreateNestedManyWithoutVisionInput
  targetedBy: RelationBetweenVisionsCreateNestedManyWithoutSourceVisionInput
  targeting: RelationBetweenVisionsCreateNestedManyWithoutTargetVisionInput
  threadsOnVision: ThreadsOnVisionCreateNestedManyWithoutVisionInput
  thumbnail: String
  title: String!
  updatedAt: DateTime
  visionViewsHistory: VisionViewsHistoryCreateNestedManyWithoutVisionInput
  votesOnVision: VotesOnVisionCreateNestedManyWithoutVisionInput
}

input VisionCreateWithoutLabelsOnVisionInput {
  activityDate: DateTime
  author: UserCreateNestedOneWithoutVisionsInput
  createdAt: DateTime
  description: String
  draftMode: Boolean
  id: String
  mergeRequest: MergeRequestCreateNestedOneWithoutVisionInput
  nextVisions: VisionCreateNestedManyWithoutPrevVisionInput
  premise: PremiseCreateNestedOneWithoutVisionInput!
  prevVision: VisionCreateNestedOneWithoutNextVisionsInput
  reactionOnVisions: ReactionOnVisionsCreateNestedManyWithoutVisionInput
  reference: ReferenceCreateNestedOneWithoutVisionInput
  reputationRecords: ReputationRecordCreateNestedManyWithoutVisionInput
  tagsOnVisions: TagsOnVisionsCreateNestedManyWithoutVisionInput
  targetedBy: RelationBetweenVisionsCreateNestedManyWithoutSourceVisionInput
  targeting: RelationBetweenVisionsCreateNestedManyWithoutTargetVisionInput
  threadsOnVision: ThreadsOnVisionCreateNestedManyWithoutVisionInput
  thumbnail: String
  title: String!
  updatedAt: DateTime
  visionViewsHistory: VisionViewsHistoryCreateNestedManyWithoutVisionInput
  votesOnVision: VotesOnVisionCreateNestedManyWithoutVisionInput
}

input VisionCreateWithoutMergeRequestInput {
  activityDate: DateTime
  author: UserCreateNestedOneWithoutVisionsInput
  createdAt: DateTime
  description: String
  draftMode: Boolean
  id: String
  labelsOnVision: LabelOnVisionCreateNestedManyWithoutVisionInput
  nextVisions: VisionCreateNestedManyWithoutPrevVisionInput
  premise: PremiseCreateNestedOneWithoutVisionInput!
  prevVision: VisionCreateNestedOneWithoutNextVisionsInput
  reactionOnVisions: ReactionOnVisionsCreateNestedManyWithoutVisionInput
  reference: ReferenceCreateNestedOneWithoutVisionInput
  reputationRecords: ReputationRecordCreateNestedManyWithoutVisionInput
  tagsOnVisions: TagsOnVisionsCreateNestedManyWithoutVisionInput
  targetedBy: RelationBetweenVisionsCreateNestedManyWithoutSourceVisionInput
  targeting: RelationBetweenVisionsCreateNestedManyWithoutTargetVisionInput
  threadsOnVision: ThreadsOnVisionCreateNestedManyWithoutVisionInput
  thumbnail: String
  title: String!
  updatedAt: DateTime
  visionViewsHistory: VisionViewsHistoryCreateNestedManyWithoutVisionInput
  votesOnVision: VotesOnVisionCreateNestedManyWithoutVisionInput
}

input VisionCreateWithoutNextVisionsInput {
  activityDate: DateTime
  author: UserCreateNestedOneWithoutVisionsInput
  createdAt: DateTime
  description: String
  draftMode: Boolean
  id: String
  labelsOnVision: LabelOnVisionCreateNestedManyWithoutVisionInput
  mergeRequest: MergeRequestCreateNestedOneWithoutVisionInput
  premise: PremiseCreateNestedOneWithoutVisionInput!
  prevVision: VisionCreateNestedOneWithoutNextVisionsInput
  reactionOnVisions: ReactionOnVisionsCreateNestedManyWithoutVisionInput
  reference: ReferenceCreateNestedOneWithoutVisionInput
  reputationRecords: ReputationRecordCreateNestedManyWithoutVisionInput
  tagsOnVisions: TagsOnVisionsCreateNestedManyWithoutVisionInput
  targetedBy: RelationBetweenVisionsCreateNestedManyWithoutSourceVisionInput
  targeting: RelationBetweenVisionsCreateNestedManyWithoutTargetVisionInput
  threadsOnVision: ThreadsOnVisionCreateNestedManyWithoutVisionInput
  thumbnail: String
  title: String!
  updatedAt: DateTime
  visionViewsHistory: VisionViewsHistoryCreateNestedManyWithoutVisionInput
  votesOnVision: VotesOnVisionCreateNestedManyWithoutVisionInput
}

input VisionCreateWithoutPremiseInput {
  activityDate: DateTime
  author: UserCreateNestedOneWithoutVisionsInput
  createdAt: DateTime
  description: String
  draftMode: Boolean
  id: String
  labelsOnVision: LabelOnVisionCreateNestedManyWithoutVisionInput
  mergeRequest: MergeRequestCreateNestedOneWithoutVisionInput
  nextVisions: VisionCreateNestedManyWithoutPrevVisionInput
  prevVision: VisionCreateNestedOneWithoutNextVisionsInput
  reactionOnVisions: ReactionOnVisionsCreateNestedManyWithoutVisionInput
  reference: ReferenceCreateNestedOneWithoutVisionInput
  reputationRecords: ReputationRecordCreateNestedManyWithoutVisionInput
  tagsOnVisions: TagsOnVisionsCreateNestedManyWithoutVisionInput
  targetedBy: RelationBetweenVisionsCreateNestedManyWithoutSourceVisionInput
  targeting: RelationBetweenVisionsCreateNestedManyWithoutTargetVisionInput
  threadsOnVision: ThreadsOnVisionCreateNestedManyWithoutVisionInput
  thumbnail: String
  title: String!
  updatedAt: DateTime
  visionViewsHistory: VisionViewsHistoryCreateNestedManyWithoutVisionInput
  votesOnVision: VotesOnVisionCreateNestedManyWithoutVisionInput
}

input VisionCreateWithoutPrevVisionInput {
  activityDate: DateTime
  author: UserCreateNestedOneWithoutVisionsInput
  createdAt: DateTime
  description: String
  draftMode: Boolean
  id: String
  labelsOnVision: LabelOnVisionCreateNestedManyWithoutVisionInput
  mergeRequest: MergeRequestCreateNestedOneWithoutVisionInput
  nextVisions: VisionCreateNestedManyWithoutPrevVisionInput
  premise: PremiseCreateNestedOneWithoutVisionInput!
  reactionOnVisions: ReactionOnVisionsCreateNestedManyWithoutVisionInput
  reference: ReferenceCreateNestedOneWithoutVisionInput
  reputationRecords: ReputationRecordCreateNestedManyWithoutVisionInput
  tagsOnVisions: TagsOnVisionsCreateNestedManyWithoutVisionInput
  targetedBy: RelationBetweenVisionsCreateNestedManyWithoutSourceVisionInput
  targeting: RelationBetweenVisionsCreateNestedManyWithoutTargetVisionInput
  threadsOnVision: ThreadsOnVisionCreateNestedManyWithoutVisionInput
  thumbnail: String
  title: String!
  updatedAt: DateTime
  visionViewsHistory: VisionViewsHistoryCreateNestedManyWithoutVisionInput
  votesOnVision: VotesOnVisionCreateNestedManyWithoutVisionInput
}

input VisionCreateWithoutReactionOnVisionsInput {
  activityDate: DateTime
  author: UserCreateNestedOneWithoutVisionsInput
  createdAt: DateTime
  description: String
  draftMode: Boolean
  id: String
  labelsOnVision: LabelOnVisionCreateNestedManyWithoutVisionInput
  mergeRequest: MergeRequestCreateNestedOneWithoutVisionInput
  nextVisions: VisionCreateNestedManyWithoutPrevVisionInput
  premise: PremiseCreateNestedOneWithoutVisionInput!
  prevVision: VisionCreateNestedOneWithoutNextVisionsInput
  reference: ReferenceCreateNestedOneWithoutVisionInput
  reputationRecords: ReputationRecordCreateNestedManyWithoutVisionInput
  tagsOnVisions: TagsOnVisionsCreateNestedManyWithoutVisionInput
  targetedBy: RelationBetweenVisionsCreateNestedManyWithoutSourceVisionInput
  targeting: RelationBetweenVisionsCreateNestedManyWithoutTargetVisionInput
  threadsOnVision: ThreadsOnVisionCreateNestedManyWithoutVisionInput
  thumbnail: String
  title: String!
  updatedAt: DateTime
  visionViewsHistory: VisionViewsHistoryCreateNestedManyWithoutVisionInput
  votesOnVision: VotesOnVisionCreateNestedManyWithoutVisionInput
}

input VisionCreateWithoutReferenceInput {
  activityDate: DateTime
  author: UserCreateNestedOneWithoutVisionsInput
  createdAt: DateTime
  description: String
  draftMode: Boolean
  id: String
  labelsOnVision: LabelOnVisionCreateNestedManyWithoutVisionInput
  mergeRequest: MergeRequestCreateNestedOneWithoutVisionInput
  nextVisions: VisionCreateNestedManyWithoutPrevVisionInput
  premise: PremiseCreateNestedOneWithoutVisionInput!
  prevVision: VisionCreateNestedOneWithoutNextVisionsInput
  reactionOnVisions: ReactionOnVisionsCreateNestedManyWithoutVisionInput
  reputationRecords: ReputationRecordCreateNestedManyWithoutVisionInput
  tagsOnVisions: TagsOnVisionsCreateNestedManyWithoutVisionInput
  targetedBy: RelationBetweenVisionsCreateNestedManyWithoutSourceVisionInput
  targeting: RelationBetweenVisionsCreateNestedManyWithoutTargetVisionInput
  threadsOnVision: ThreadsOnVisionCreateNestedManyWithoutVisionInput
  thumbnail: String
  title: String!
  updatedAt: DateTime
  visionViewsHistory: VisionViewsHistoryCreateNestedManyWithoutVisionInput
  votesOnVision: VotesOnVisionCreateNestedManyWithoutVisionInput
}

input VisionCreateWithoutReputationRecordsInput {
  activityDate: DateTime
  author: UserCreateNestedOneWithoutVisionsInput
  createdAt: DateTime
  description: String
  draftMode: Boolean
  id: String
  labelsOnVision: LabelOnVisionCreateNestedManyWithoutVisionInput
  mergeRequest: MergeRequestCreateNestedOneWithoutVisionInput
  nextVisions: VisionCreateNestedManyWithoutPrevVisionInput
  premise: PremiseCreateNestedOneWithoutVisionInput!
  prevVision: VisionCreateNestedOneWithoutNextVisionsInput
  reactionOnVisions: ReactionOnVisionsCreateNestedManyWithoutVisionInput
  reference: ReferenceCreateNestedOneWithoutVisionInput
  tagsOnVisions: TagsOnVisionsCreateNestedManyWithoutVisionInput
  targetedBy: RelationBetweenVisionsCreateNestedManyWithoutSourceVisionInput
  targeting: RelationBetweenVisionsCreateNestedManyWithoutTargetVisionInput
  threadsOnVision: ThreadsOnVisionCreateNestedManyWithoutVisionInput
  thumbnail: String
  title: String!
  updatedAt: DateTime
  visionViewsHistory: VisionViewsHistoryCreateNestedManyWithoutVisionInput
  votesOnVision: VotesOnVisionCreateNestedManyWithoutVisionInput
}

input VisionCreateWithoutTagsOnVisionsInput {
  activityDate: DateTime
  author: UserCreateNestedOneWithoutVisionsInput
  createdAt: DateTime
  description: String
  draftMode: Boolean
  id: String
  labelsOnVision: LabelOnVisionCreateNestedManyWithoutVisionInput
  mergeRequest: MergeRequestCreateNestedOneWithoutVisionInput
  nextVisions: VisionCreateNestedManyWithoutPrevVisionInput
  premise: PremiseCreateNestedOneWithoutVisionInput!
  prevVision: VisionCreateNestedOneWithoutNextVisionsInput
  reactionOnVisions: ReactionOnVisionsCreateNestedManyWithoutVisionInput
  reference: ReferenceCreateNestedOneWithoutVisionInput
  reputationRecords: ReputationRecordCreateNestedManyWithoutVisionInput
  targetedBy: RelationBetweenVisionsCreateNestedManyWithoutSourceVisionInput
  targeting: RelationBetweenVisionsCreateNestedManyWithoutTargetVisionInput
  threadsOnVision: ThreadsOnVisionCreateNestedManyWithoutVisionInput
  thumbnail: String
  title: String!
  updatedAt: DateTime
  visionViewsHistory: VisionViewsHistoryCreateNestedManyWithoutVisionInput
  votesOnVision: VotesOnVisionCreateNestedManyWithoutVisionInput
}

input VisionCreateWithoutTargetedByInput {
  activityDate: DateTime
  author: UserCreateNestedOneWithoutVisionsInput
  createdAt: DateTime
  description: String
  draftMode: Boolean
  id: String
  labelsOnVision: LabelOnVisionCreateNestedManyWithoutVisionInput
  mergeRequest: MergeRequestCreateNestedOneWithoutVisionInput
  nextVisions: VisionCreateNestedManyWithoutPrevVisionInput
  premise: PremiseCreateNestedOneWithoutVisionInput!
  prevVision: VisionCreateNestedOneWithoutNextVisionsInput
  reactionOnVisions: ReactionOnVisionsCreateNestedManyWithoutVisionInput
  reference: ReferenceCreateNestedOneWithoutVisionInput
  reputationRecords: ReputationRecordCreateNestedManyWithoutVisionInput
  tagsOnVisions: TagsOnVisionsCreateNestedManyWithoutVisionInput
  targeting: RelationBetweenVisionsCreateNestedManyWithoutTargetVisionInput
  threadsOnVision: ThreadsOnVisionCreateNestedManyWithoutVisionInput
  thumbnail: String
  title: String!
  updatedAt: DateTime
  visionViewsHistory: VisionViewsHistoryCreateNestedManyWithoutVisionInput
  votesOnVision: VotesOnVisionCreateNestedManyWithoutVisionInput
}

input VisionCreateWithoutTargetingInput {
  activityDate: DateTime
  author: UserCreateNestedOneWithoutVisionsInput
  createdAt: DateTime
  description: String
  draftMode: Boolean
  id: String
  labelsOnVision: LabelOnVisionCreateNestedManyWithoutVisionInput
  mergeRequest: MergeRequestCreateNestedOneWithoutVisionInput
  nextVisions: VisionCreateNestedManyWithoutPrevVisionInput
  premise: PremiseCreateNestedOneWithoutVisionInput!
  prevVision: VisionCreateNestedOneWithoutNextVisionsInput
  reactionOnVisions: ReactionOnVisionsCreateNestedManyWithoutVisionInput
  reference: ReferenceCreateNestedOneWithoutVisionInput
  reputationRecords: ReputationRecordCreateNestedManyWithoutVisionInput
  tagsOnVisions: TagsOnVisionsCreateNestedManyWithoutVisionInput
  targetedBy: RelationBetweenVisionsCreateNestedManyWithoutSourceVisionInput
  threadsOnVision: ThreadsOnVisionCreateNestedManyWithoutVisionInput
  thumbnail: String
  title: String!
  updatedAt: DateTime
  visionViewsHistory: VisionViewsHistoryCreateNestedManyWithoutVisionInput
  votesOnVision: VotesOnVisionCreateNestedManyWithoutVisionInput
}

input VisionCreateWithoutThreadsOnVisionInput {
  activityDate: DateTime
  author: UserCreateNestedOneWithoutVisionsInput
  createdAt: DateTime
  description: String
  draftMode: Boolean
  id: String
  labelsOnVision: LabelOnVisionCreateNestedManyWithoutVisionInput
  mergeRequest: MergeRequestCreateNestedOneWithoutVisionInput
  nextVisions: VisionCreateNestedManyWithoutPrevVisionInput
  premise: PremiseCreateNestedOneWithoutVisionInput!
  prevVision: VisionCreateNestedOneWithoutNextVisionsInput
  reactionOnVisions: ReactionOnVisionsCreateNestedManyWithoutVisionInput
  reference: ReferenceCreateNestedOneWithoutVisionInput
  reputationRecords: ReputationRecordCreateNestedManyWithoutVisionInput
  tagsOnVisions: TagsOnVisionsCreateNestedManyWithoutVisionInput
  targetedBy: RelationBetweenVisionsCreateNestedManyWithoutSourceVisionInput
  targeting: RelationBetweenVisionsCreateNestedManyWithoutTargetVisionInput
  thumbnail: String
  title: String!
  updatedAt: DateTime
  visionViewsHistory: VisionViewsHistoryCreateNestedManyWithoutVisionInput
  votesOnVision: VotesOnVisionCreateNestedManyWithoutVisionInput
}

input VisionCreateWithoutVisionViewsHistoryInput {
  activityDate: DateTime
  author: UserCreateNestedOneWithoutVisionsInput
  createdAt: DateTime
  description: String
  draftMode: Boolean
  id: String
  labelsOnVision: LabelOnVisionCreateNestedManyWithoutVisionInput
  mergeRequest: MergeRequestCreateNestedOneWithoutVisionInput
  nextVisions: VisionCreateNestedManyWithoutPrevVisionInput
  premise: PremiseCreateNestedOneWithoutVisionInput!
  prevVision: VisionCreateNestedOneWithoutNextVisionsInput
  reactionOnVisions: ReactionOnVisionsCreateNestedManyWithoutVisionInput
  reference: ReferenceCreateNestedOneWithoutVisionInput
  reputationRecords: ReputationRecordCreateNestedManyWithoutVisionInput
  tagsOnVisions: TagsOnVisionsCreateNestedManyWithoutVisionInput
  targetedBy: RelationBetweenVisionsCreateNestedManyWithoutSourceVisionInput
  targeting: RelationBetweenVisionsCreateNestedManyWithoutTargetVisionInput
  threadsOnVision: ThreadsOnVisionCreateNestedManyWithoutVisionInput
  thumbnail: String
  title: String!
  updatedAt: DateTime
  votesOnVision: VotesOnVisionCreateNestedManyWithoutVisionInput
}

input VisionCreateWithoutVotesOnVisionInput {
  activityDate: DateTime
  author: UserCreateNestedOneWithoutVisionsInput
  createdAt: DateTime
  description: String
  draftMode: Boolean
  id: String
  labelsOnVision: LabelOnVisionCreateNestedManyWithoutVisionInput
  mergeRequest: MergeRequestCreateNestedOneWithoutVisionInput
  nextVisions: VisionCreateNestedManyWithoutPrevVisionInput
  premise: PremiseCreateNestedOneWithoutVisionInput!
  prevVision: VisionCreateNestedOneWithoutNextVisionsInput
  reactionOnVisions: ReactionOnVisionsCreateNestedManyWithoutVisionInput
  reference: ReferenceCreateNestedOneWithoutVisionInput
  reputationRecords: ReputationRecordCreateNestedManyWithoutVisionInput
  tagsOnVisions: TagsOnVisionsCreateNestedManyWithoutVisionInput
  targetedBy: RelationBetweenVisionsCreateNestedManyWithoutSourceVisionInput
  targeting: RelationBetweenVisionsCreateNestedManyWithoutTargetVisionInput
  threadsOnVision: ThreadsOnVisionCreateNestedManyWithoutVisionInput
  thumbnail: String
  title: String!
  updatedAt: DateTime
  visionViewsHistory: VisionViewsHistoryCreateNestedManyWithoutVisionInput
}

type VisionGroupBy {
  _count: VisionCountAggregate
  _max: VisionMaxAggregate
  _min: VisionMinAggregate
  activityDate: DateTime
  authorId: String
  createdAt: DateTime!
  description: String
  draftMode: Boolean!
  id: String!
  premiseId: String!
  prevVisionId: String
  referenceId: String
  thumbnail: String
  title: String!
  updatedAt: DateTime!
}

input VisionListRelationFilter {
  every: VisionWhereInput
  none: VisionWhereInput
  some: VisionWhereInput
}

type VisionMaxAggregate {
  activityDate: DateTime
  authorId: String
  createdAt: DateTime
  description: String
  draftMode: Boolean
  id: String
  premiseId: String
  prevVisionId: String
  referenceId: String
  thumbnail: String
  title: String
  updatedAt: DateTime
}

input VisionMaxOrderByAggregateInput {
  activityDate: SortOrder
  authorId: SortOrder
  createdAt: SortOrder
  description: SortOrder
  draftMode: SortOrder
  id: SortOrder
  premiseId: SortOrder
  prevVisionId: SortOrder
  referenceId: SortOrder
  thumbnail: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

type VisionMinAggregate {
  activityDate: DateTime
  authorId: String
  createdAt: DateTime
  description: String
  draftMode: Boolean
  id: String
  premiseId: String
  prevVisionId: String
  referenceId: String
  thumbnail: String
  title: String
  updatedAt: DateTime
}

input VisionMinOrderByAggregateInput {
  activityDate: SortOrder
  authorId: SortOrder
  createdAt: SortOrder
  description: SortOrder
  draftMode: SortOrder
  id: SortOrder
  premiseId: SortOrder
  prevVisionId: SortOrder
  referenceId: SortOrder
  thumbnail: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input VisionOrderByRelationAggregateInput {
  _count: SortOrder
}

input VisionOrderByWithAggregationInput {
  _count: VisionCountOrderByAggregateInput
  _max: VisionMaxOrderByAggregateInput
  _min: VisionMinOrderByAggregateInput
  activityDate: SortOrder
  authorId: SortOrder
  createdAt: SortOrder
  description: SortOrder
  draftMode: SortOrder
  id: SortOrder
  premiseId: SortOrder
  prevVisionId: SortOrder
  referenceId: SortOrder
  thumbnail: SortOrder
  title: SortOrder
  updatedAt: SortOrder
}

input VisionOrderByWithRelationInput {
  activityDate: SortOrder
  author: UserOrderByWithRelationInput
  authorId: SortOrder
  createdAt: SortOrder
  description: SortOrder
  draftMode: SortOrder
  id: SortOrder
  labelsOnVision: LabelOnVisionOrderByRelationAggregateInput
  mergeRequest: MergeRequestOrderByWithRelationInput
  nextVisions: VisionOrderByRelationAggregateInput
  premise: PremiseOrderByWithRelationInput
  premiseId: SortOrder
  prevVision: VisionOrderByWithRelationInput
  prevVisionId: SortOrder
  reactionOnVisions: ReactionOnVisionsOrderByRelationAggregateInput
  reference: ReferenceOrderByWithRelationInput
  referenceId: SortOrder
  reputationRecords: ReputationRecordOrderByRelationAggregateInput
  tagsOnVisions: TagsOnVisionsOrderByRelationAggregateInput
  targetedBy: RelationBetweenVisionsOrderByRelationAggregateInput
  targeting: RelationBetweenVisionsOrderByRelationAggregateInput
  threadsOnVision: ThreadsOnVisionOrderByRelationAggregateInput
  thumbnail: SortOrder
  title: SortOrder
  updatedAt: SortOrder
  visionViewsHistory: VisionViewsHistoryOrderByRelationAggregateInput
  votesOnVision: VotesOnVisionOrderByRelationAggregateInput
}

input VisionRelationFilter {
  is: VisionWhereInput
  isNot: VisionWhereInput
}

enum VisionScalarFieldEnum {
  activityDate
  authorId
  createdAt
  description
  draftMode
  id
  premiseId
  prevVisionId
  referenceId
  thumbnail
  title
  updatedAt
}

input VisionScalarWhereInput {
  AND: [VisionScalarWhereInput!]
  NOT: [VisionScalarWhereInput!]
  OR: [VisionScalarWhereInput!]
  activityDate: DateTimeNullableFilter
  authorId: StringNullableFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  draftMode: BoolFilter
  id: StringFilter
  premiseId: StringFilter
  prevVisionId: StringNullableFilter
  referenceId: StringNullableFilter
  thumbnail: StringNullableFilter
  title: StringFilter
  updatedAt: DateTimeFilter
}

input VisionScalarWhereWithAggregatesInput {
  AND: [VisionScalarWhereWithAggregatesInput!]
  NOT: [VisionScalarWhereWithAggregatesInput!]
  OR: [VisionScalarWhereWithAggregatesInput!]
  activityDate: DateTimeNullableWithAggregatesFilter
  authorId: StringNullableWithAggregatesFilter
  createdAt: DateTimeWithAggregatesFilter
  description: StringNullableWithAggregatesFilter
  draftMode: BoolWithAggregatesFilter
  id: StringWithAggregatesFilter
  premiseId: StringWithAggregatesFilter
  prevVisionId: StringNullableWithAggregatesFilter
  referenceId: StringNullableWithAggregatesFilter
  thumbnail: StringNullableWithAggregatesFilter
  title: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
}

input VisionUpdateInput {
  activityDate: NullableDateTimeFieldUpdateOperationsInput
  author: UserUpdateOneWithoutVisionsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  draftMode: BoolFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  labelsOnVision: LabelOnVisionUpdateManyWithoutVisionInput
  mergeRequest: MergeRequestUpdateOneWithoutVisionInput
  nextVisions: VisionUpdateManyWithoutPrevVisionInput
  premise: PremiseUpdateOneRequiredWithoutVisionInput
  prevVision: VisionUpdateOneWithoutNextVisionsInput
  reactionOnVisions: ReactionOnVisionsUpdateManyWithoutVisionInput
  reference: ReferenceUpdateOneWithoutVisionInput
  reputationRecords: ReputationRecordUpdateManyWithoutVisionInput
  tagsOnVisions: TagsOnVisionsUpdateManyWithoutVisionInput
  targetedBy: RelationBetweenVisionsUpdateManyWithoutSourceVisionInput
  targeting: RelationBetweenVisionsUpdateManyWithoutTargetVisionInput
  threadsOnVision: ThreadsOnVisionUpdateManyWithoutVisionInput
  thumbnail: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  visionViewsHistory: VisionViewsHistoryUpdateManyWithoutVisionInput
  votesOnVision: VotesOnVisionUpdateManyWithoutVisionInput
}

input VisionUpdateManyMutationInput {
  activityDate: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  draftMode: BoolFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  thumbnail: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
}

input VisionUpdateManyWithWhereWithoutAuthorInput {
  data: VisionUpdateManyMutationInput!
  where: VisionScalarWhereInput!
}

input VisionUpdateManyWithWhereWithoutPremiseInput {
  data: VisionUpdateManyMutationInput!
  where: VisionScalarWhereInput!
}

input VisionUpdateManyWithWhereWithoutPrevVisionInput {
  data: VisionUpdateManyMutationInput!
  where: VisionScalarWhereInput!
}

input VisionUpdateManyWithWhereWithoutReferenceInput {
  data: VisionUpdateManyMutationInput!
  where: VisionScalarWhereInput!
}

input VisionUpdateManyWithoutAuthorInput {
  connect: [VisionWhereUniqueInput!]
  connectOrCreate: [VisionCreateOrConnectWithoutAuthorInput!]
  create: [VisionCreateWithoutAuthorInput!]
  createMany: VisionCreateManyAuthorInputEnvelope
  delete: [VisionWhereUniqueInput!]
  deleteMany: [VisionScalarWhereInput!]
  disconnect: [VisionWhereUniqueInput!]
  set: [VisionWhereUniqueInput!]
  update: [VisionUpdateWithWhereUniqueWithoutAuthorInput!]
  updateMany: [VisionUpdateManyWithWhereWithoutAuthorInput!]
  upsert: [VisionUpsertWithWhereUniqueWithoutAuthorInput!]
}

input VisionUpdateManyWithoutPremiseInput {
  connect: [VisionWhereUniqueInput!]
  connectOrCreate: [VisionCreateOrConnectWithoutPremiseInput!]
  create: [VisionCreateWithoutPremiseInput!]
  createMany: VisionCreateManyPremiseInputEnvelope
  delete: [VisionWhereUniqueInput!]
  deleteMany: [VisionScalarWhereInput!]
  disconnect: [VisionWhereUniqueInput!]
  set: [VisionWhereUniqueInput!]
  update: [VisionUpdateWithWhereUniqueWithoutPremiseInput!]
  updateMany: [VisionUpdateManyWithWhereWithoutPremiseInput!]
  upsert: [VisionUpsertWithWhereUniqueWithoutPremiseInput!]
}

input VisionUpdateManyWithoutPrevVisionInput {
  connect: [VisionWhereUniqueInput!]
  connectOrCreate: [VisionCreateOrConnectWithoutPrevVisionInput!]
  create: [VisionCreateWithoutPrevVisionInput!]
  createMany: VisionCreateManyPrevVisionInputEnvelope
  delete: [VisionWhereUniqueInput!]
  deleteMany: [VisionScalarWhereInput!]
  disconnect: [VisionWhereUniqueInput!]
  set: [VisionWhereUniqueInput!]
  update: [VisionUpdateWithWhereUniqueWithoutPrevVisionInput!]
  updateMany: [VisionUpdateManyWithWhereWithoutPrevVisionInput!]
  upsert: [VisionUpsertWithWhereUniqueWithoutPrevVisionInput!]
}

input VisionUpdateManyWithoutReferenceInput {
  connect: [VisionWhereUniqueInput!]
  connectOrCreate: [VisionCreateOrConnectWithoutReferenceInput!]
  create: [VisionCreateWithoutReferenceInput!]
  createMany: VisionCreateManyReferenceInputEnvelope
  delete: [VisionWhereUniqueInput!]
  deleteMany: [VisionScalarWhereInput!]
  disconnect: [VisionWhereUniqueInput!]
  set: [VisionWhereUniqueInput!]
  update: [VisionUpdateWithWhereUniqueWithoutReferenceInput!]
  updateMany: [VisionUpdateManyWithWhereWithoutReferenceInput!]
  upsert: [VisionUpsertWithWhereUniqueWithoutReferenceInput!]
}

input VisionUpdateOneRequiredWithoutLabelsOnVisionInput {
  connect: VisionWhereUniqueInput
  connectOrCreate: VisionCreateOrConnectWithoutLabelsOnVisionInput
  create: VisionCreateWithoutLabelsOnVisionInput
  update: VisionUpdateWithoutLabelsOnVisionInput
  upsert: VisionUpsertWithoutLabelsOnVisionInput
}

input VisionUpdateOneRequiredWithoutReactionOnVisionsInput {
  connect: VisionWhereUniqueInput
  connectOrCreate: VisionCreateOrConnectWithoutReactionOnVisionsInput
  create: VisionCreateWithoutReactionOnVisionsInput
  update: VisionUpdateWithoutReactionOnVisionsInput
  upsert: VisionUpsertWithoutReactionOnVisionsInput
}

input VisionUpdateOneRequiredWithoutReputationRecordsInput {
  connect: VisionWhereUniqueInput
  connectOrCreate: VisionCreateOrConnectWithoutReputationRecordsInput
  create: VisionCreateWithoutReputationRecordsInput
  update: VisionUpdateWithoutReputationRecordsInput
  upsert: VisionUpsertWithoutReputationRecordsInput
}

input VisionUpdateOneRequiredWithoutTagsOnVisionsInput {
  connect: VisionWhereUniqueInput
  connectOrCreate: VisionCreateOrConnectWithoutTagsOnVisionsInput
  create: VisionCreateWithoutTagsOnVisionsInput
  update: VisionUpdateWithoutTagsOnVisionsInput
  upsert: VisionUpsertWithoutTagsOnVisionsInput
}

input VisionUpdateOneRequiredWithoutTargetedByInput {
  connect: VisionWhereUniqueInput
  connectOrCreate: VisionCreateOrConnectWithoutTargetedByInput
  create: VisionCreateWithoutTargetedByInput
  update: VisionUpdateWithoutTargetedByInput
  upsert: VisionUpsertWithoutTargetedByInput
}

input VisionUpdateOneRequiredWithoutTargetingInput {
  connect: VisionWhereUniqueInput
  connectOrCreate: VisionCreateOrConnectWithoutTargetingInput
  create: VisionCreateWithoutTargetingInput
  update: VisionUpdateWithoutTargetingInput
  upsert: VisionUpsertWithoutTargetingInput
}

input VisionUpdateOneRequiredWithoutThreadsOnVisionInput {
  connect: VisionWhereUniqueInput
  connectOrCreate: VisionCreateOrConnectWithoutThreadsOnVisionInput
  create: VisionCreateWithoutThreadsOnVisionInput
  update: VisionUpdateWithoutThreadsOnVisionInput
  upsert: VisionUpsertWithoutThreadsOnVisionInput
}

input VisionUpdateOneRequiredWithoutVisionViewsHistoryInput {
  connect: VisionWhereUniqueInput
  connectOrCreate: VisionCreateOrConnectWithoutVisionViewsHistoryInput
  create: VisionCreateWithoutVisionViewsHistoryInput
  update: VisionUpdateWithoutVisionViewsHistoryInput
  upsert: VisionUpsertWithoutVisionViewsHistoryInput
}

input VisionUpdateOneRequiredWithoutVotesOnVisionInput {
  connect: VisionWhereUniqueInput
  connectOrCreate: VisionCreateOrConnectWithoutVotesOnVisionInput
  create: VisionCreateWithoutVotesOnVisionInput
  update: VisionUpdateWithoutVotesOnVisionInput
  upsert: VisionUpsertWithoutVotesOnVisionInput
}

input VisionUpdateOneWithoutMergeRequestInput {
  connect: VisionWhereUniqueInput
  connectOrCreate: VisionCreateOrConnectWithoutMergeRequestInput
  create: VisionCreateWithoutMergeRequestInput
  delete: Boolean
  disconnect: Boolean
  update: VisionUpdateWithoutMergeRequestInput
  upsert: VisionUpsertWithoutMergeRequestInput
}

input VisionUpdateOneWithoutNextVisionsInput {
  connect: VisionWhereUniqueInput
  connectOrCreate: VisionCreateOrConnectWithoutNextVisionsInput
  create: VisionCreateWithoutNextVisionsInput
  delete: Boolean
  disconnect: Boolean
  update: VisionUpdateWithoutNextVisionsInput
  upsert: VisionUpsertWithoutNextVisionsInput
}

input VisionUpdateWithWhereUniqueWithoutAuthorInput {
  data: VisionUpdateWithoutAuthorInput!
  where: VisionWhereUniqueInput!
}

input VisionUpdateWithWhereUniqueWithoutPremiseInput {
  data: VisionUpdateWithoutPremiseInput!
  where: VisionWhereUniqueInput!
}

input VisionUpdateWithWhereUniqueWithoutPrevVisionInput {
  data: VisionUpdateWithoutPrevVisionInput!
  where: VisionWhereUniqueInput!
}

input VisionUpdateWithWhereUniqueWithoutReferenceInput {
  data: VisionUpdateWithoutReferenceInput!
  where: VisionWhereUniqueInput!
}

input VisionUpdateWithoutAuthorInput {
  activityDate: NullableDateTimeFieldUpdateOperationsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  draftMode: BoolFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  labelsOnVision: LabelOnVisionUpdateManyWithoutVisionInput
  mergeRequest: MergeRequestUpdateOneWithoutVisionInput
  nextVisions: VisionUpdateManyWithoutPrevVisionInput
  premise: PremiseUpdateOneRequiredWithoutVisionInput
  prevVision: VisionUpdateOneWithoutNextVisionsInput
  reactionOnVisions: ReactionOnVisionsUpdateManyWithoutVisionInput
  reference: ReferenceUpdateOneWithoutVisionInput
  reputationRecords: ReputationRecordUpdateManyWithoutVisionInput
  tagsOnVisions: TagsOnVisionsUpdateManyWithoutVisionInput
  targetedBy: RelationBetweenVisionsUpdateManyWithoutSourceVisionInput
  targeting: RelationBetweenVisionsUpdateManyWithoutTargetVisionInput
  threadsOnVision: ThreadsOnVisionUpdateManyWithoutVisionInput
  thumbnail: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  visionViewsHistory: VisionViewsHistoryUpdateManyWithoutVisionInput
  votesOnVision: VotesOnVisionUpdateManyWithoutVisionInput
}

input VisionUpdateWithoutLabelsOnVisionInput {
  activityDate: NullableDateTimeFieldUpdateOperationsInput
  author: UserUpdateOneWithoutVisionsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  draftMode: BoolFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  mergeRequest: MergeRequestUpdateOneWithoutVisionInput
  nextVisions: VisionUpdateManyWithoutPrevVisionInput
  premise: PremiseUpdateOneRequiredWithoutVisionInput
  prevVision: VisionUpdateOneWithoutNextVisionsInput
  reactionOnVisions: ReactionOnVisionsUpdateManyWithoutVisionInput
  reference: ReferenceUpdateOneWithoutVisionInput
  reputationRecords: ReputationRecordUpdateManyWithoutVisionInput
  tagsOnVisions: TagsOnVisionsUpdateManyWithoutVisionInput
  targetedBy: RelationBetweenVisionsUpdateManyWithoutSourceVisionInput
  targeting: RelationBetweenVisionsUpdateManyWithoutTargetVisionInput
  threadsOnVision: ThreadsOnVisionUpdateManyWithoutVisionInput
  thumbnail: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  visionViewsHistory: VisionViewsHistoryUpdateManyWithoutVisionInput
  votesOnVision: VotesOnVisionUpdateManyWithoutVisionInput
}

input VisionUpdateWithoutMergeRequestInput {
  activityDate: NullableDateTimeFieldUpdateOperationsInput
  author: UserUpdateOneWithoutVisionsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  draftMode: BoolFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  labelsOnVision: LabelOnVisionUpdateManyWithoutVisionInput
  nextVisions: VisionUpdateManyWithoutPrevVisionInput
  premise: PremiseUpdateOneRequiredWithoutVisionInput
  prevVision: VisionUpdateOneWithoutNextVisionsInput
  reactionOnVisions: ReactionOnVisionsUpdateManyWithoutVisionInput
  reference: ReferenceUpdateOneWithoutVisionInput
  reputationRecords: ReputationRecordUpdateManyWithoutVisionInput
  tagsOnVisions: TagsOnVisionsUpdateManyWithoutVisionInput
  targetedBy: RelationBetweenVisionsUpdateManyWithoutSourceVisionInput
  targeting: RelationBetweenVisionsUpdateManyWithoutTargetVisionInput
  threadsOnVision: ThreadsOnVisionUpdateManyWithoutVisionInput
  thumbnail: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  visionViewsHistory: VisionViewsHistoryUpdateManyWithoutVisionInput
  votesOnVision: VotesOnVisionUpdateManyWithoutVisionInput
}

input VisionUpdateWithoutNextVisionsInput {
  activityDate: NullableDateTimeFieldUpdateOperationsInput
  author: UserUpdateOneWithoutVisionsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  draftMode: BoolFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  labelsOnVision: LabelOnVisionUpdateManyWithoutVisionInput
  mergeRequest: MergeRequestUpdateOneWithoutVisionInput
  premise: PremiseUpdateOneRequiredWithoutVisionInput
  prevVision: VisionUpdateOneWithoutNextVisionsInput
  reactionOnVisions: ReactionOnVisionsUpdateManyWithoutVisionInput
  reference: ReferenceUpdateOneWithoutVisionInput
  reputationRecords: ReputationRecordUpdateManyWithoutVisionInput
  tagsOnVisions: TagsOnVisionsUpdateManyWithoutVisionInput
  targetedBy: RelationBetweenVisionsUpdateManyWithoutSourceVisionInput
  targeting: RelationBetweenVisionsUpdateManyWithoutTargetVisionInput
  threadsOnVision: ThreadsOnVisionUpdateManyWithoutVisionInput
  thumbnail: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  visionViewsHistory: VisionViewsHistoryUpdateManyWithoutVisionInput
  votesOnVision: VotesOnVisionUpdateManyWithoutVisionInput
}

input VisionUpdateWithoutPremiseInput {
  activityDate: NullableDateTimeFieldUpdateOperationsInput
  author: UserUpdateOneWithoutVisionsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  draftMode: BoolFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  labelsOnVision: LabelOnVisionUpdateManyWithoutVisionInput
  mergeRequest: MergeRequestUpdateOneWithoutVisionInput
  nextVisions: VisionUpdateManyWithoutPrevVisionInput
  prevVision: VisionUpdateOneWithoutNextVisionsInput
  reactionOnVisions: ReactionOnVisionsUpdateManyWithoutVisionInput
  reference: ReferenceUpdateOneWithoutVisionInput
  reputationRecords: ReputationRecordUpdateManyWithoutVisionInput
  tagsOnVisions: TagsOnVisionsUpdateManyWithoutVisionInput
  targetedBy: RelationBetweenVisionsUpdateManyWithoutSourceVisionInput
  targeting: RelationBetweenVisionsUpdateManyWithoutTargetVisionInput
  threadsOnVision: ThreadsOnVisionUpdateManyWithoutVisionInput
  thumbnail: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  visionViewsHistory: VisionViewsHistoryUpdateManyWithoutVisionInput
  votesOnVision: VotesOnVisionUpdateManyWithoutVisionInput
}

input VisionUpdateWithoutPrevVisionInput {
  activityDate: NullableDateTimeFieldUpdateOperationsInput
  author: UserUpdateOneWithoutVisionsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  draftMode: BoolFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  labelsOnVision: LabelOnVisionUpdateManyWithoutVisionInput
  mergeRequest: MergeRequestUpdateOneWithoutVisionInput
  nextVisions: VisionUpdateManyWithoutPrevVisionInput
  premise: PremiseUpdateOneRequiredWithoutVisionInput
  reactionOnVisions: ReactionOnVisionsUpdateManyWithoutVisionInput
  reference: ReferenceUpdateOneWithoutVisionInput
  reputationRecords: ReputationRecordUpdateManyWithoutVisionInput
  tagsOnVisions: TagsOnVisionsUpdateManyWithoutVisionInput
  targetedBy: RelationBetweenVisionsUpdateManyWithoutSourceVisionInput
  targeting: RelationBetweenVisionsUpdateManyWithoutTargetVisionInput
  threadsOnVision: ThreadsOnVisionUpdateManyWithoutVisionInput
  thumbnail: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  visionViewsHistory: VisionViewsHistoryUpdateManyWithoutVisionInput
  votesOnVision: VotesOnVisionUpdateManyWithoutVisionInput
}

input VisionUpdateWithoutReactionOnVisionsInput {
  activityDate: NullableDateTimeFieldUpdateOperationsInput
  author: UserUpdateOneWithoutVisionsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  draftMode: BoolFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  labelsOnVision: LabelOnVisionUpdateManyWithoutVisionInput
  mergeRequest: MergeRequestUpdateOneWithoutVisionInput
  nextVisions: VisionUpdateManyWithoutPrevVisionInput
  premise: PremiseUpdateOneRequiredWithoutVisionInput
  prevVision: VisionUpdateOneWithoutNextVisionsInput
  reference: ReferenceUpdateOneWithoutVisionInput
  reputationRecords: ReputationRecordUpdateManyWithoutVisionInput
  tagsOnVisions: TagsOnVisionsUpdateManyWithoutVisionInput
  targetedBy: RelationBetweenVisionsUpdateManyWithoutSourceVisionInput
  targeting: RelationBetweenVisionsUpdateManyWithoutTargetVisionInput
  threadsOnVision: ThreadsOnVisionUpdateManyWithoutVisionInput
  thumbnail: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  visionViewsHistory: VisionViewsHistoryUpdateManyWithoutVisionInput
  votesOnVision: VotesOnVisionUpdateManyWithoutVisionInput
}

input VisionUpdateWithoutReferenceInput {
  activityDate: NullableDateTimeFieldUpdateOperationsInput
  author: UserUpdateOneWithoutVisionsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  draftMode: BoolFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  labelsOnVision: LabelOnVisionUpdateManyWithoutVisionInput
  mergeRequest: MergeRequestUpdateOneWithoutVisionInput
  nextVisions: VisionUpdateManyWithoutPrevVisionInput
  premise: PremiseUpdateOneRequiredWithoutVisionInput
  prevVision: VisionUpdateOneWithoutNextVisionsInput
  reactionOnVisions: ReactionOnVisionsUpdateManyWithoutVisionInput
  reputationRecords: ReputationRecordUpdateManyWithoutVisionInput
  tagsOnVisions: TagsOnVisionsUpdateManyWithoutVisionInput
  targetedBy: RelationBetweenVisionsUpdateManyWithoutSourceVisionInput
  targeting: RelationBetweenVisionsUpdateManyWithoutTargetVisionInput
  threadsOnVision: ThreadsOnVisionUpdateManyWithoutVisionInput
  thumbnail: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  visionViewsHistory: VisionViewsHistoryUpdateManyWithoutVisionInput
  votesOnVision: VotesOnVisionUpdateManyWithoutVisionInput
}

input VisionUpdateWithoutReputationRecordsInput {
  activityDate: NullableDateTimeFieldUpdateOperationsInput
  author: UserUpdateOneWithoutVisionsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  draftMode: BoolFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  labelsOnVision: LabelOnVisionUpdateManyWithoutVisionInput
  mergeRequest: MergeRequestUpdateOneWithoutVisionInput
  nextVisions: VisionUpdateManyWithoutPrevVisionInput
  premise: PremiseUpdateOneRequiredWithoutVisionInput
  prevVision: VisionUpdateOneWithoutNextVisionsInput
  reactionOnVisions: ReactionOnVisionsUpdateManyWithoutVisionInput
  reference: ReferenceUpdateOneWithoutVisionInput
  tagsOnVisions: TagsOnVisionsUpdateManyWithoutVisionInput
  targetedBy: RelationBetweenVisionsUpdateManyWithoutSourceVisionInput
  targeting: RelationBetweenVisionsUpdateManyWithoutTargetVisionInput
  threadsOnVision: ThreadsOnVisionUpdateManyWithoutVisionInput
  thumbnail: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  visionViewsHistory: VisionViewsHistoryUpdateManyWithoutVisionInput
  votesOnVision: VotesOnVisionUpdateManyWithoutVisionInput
}

input VisionUpdateWithoutTagsOnVisionsInput {
  activityDate: NullableDateTimeFieldUpdateOperationsInput
  author: UserUpdateOneWithoutVisionsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  draftMode: BoolFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  labelsOnVision: LabelOnVisionUpdateManyWithoutVisionInput
  mergeRequest: MergeRequestUpdateOneWithoutVisionInput
  nextVisions: VisionUpdateManyWithoutPrevVisionInput
  premise: PremiseUpdateOneRequiredWithoutVisionInput
  prevVision: VisionUpdateOneWithoutNextVisionsInput
  reactionOnVisions: ReactionOnVisionsUpdateManyWithoutVisionInput
  reference: ReferenceUpdateOneWithoutVisionInput
  reputationRecords: ReputationRecordUpdateManyWithoutVisionInput
  targetedBy: RelationBetweenVisionsUpdateManyWithoutSourceVisionInput
  targeting: RelationBetweenVisionsUpdateManyWithoutTargetVisionInput
  threadsOnVision: ThreadsOnVisionUpdateManyWithoutVisionInput
  thumbnail: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  visionViewsHistory: VisionViewsHistoryUpdateManyWithoutVisionInput
  votesOnVision: VotesOnVisionUpdateManyWithoutVisionInput
}

input VisionUpdateWithoutTargetedByInput {
  activityDate: NullableDateTimeFieldUpdateOperationsInput
  author: UserUpdateOneWithoutVisionsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  draftMode: BoolFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  labelsOnVision: LabelOnVisionUpdateManyWithoutVisionInput
  mergeRequest: MergeRequestUpdateOneWithoutVisionInput
  nextVisions: VisionUpdateManyWithoutPrevVisionInput
  premise: PremiseUpdateOneRequiredWithoutVisionInput
  prevVision: VisionUpdateOneWithoutNextVisionsInput
  reactionOnVisions: ReactionOnVisionsUpdateManyWithoutVisionInput
  reference: ReferenceUpdateOneWithoutVisionInput
  reputationRecords: ReputationRecordUpdateManyWithoutVisionInput
  tagsOnVisions: TagsOnVisionsUpdateManyWithoutVisionInput
  targeting: RelationBetweenVisionsUpdateManyWithoutTargetVisionInput
  threadsOnVision: ThreadsOnVisionUpdateManyWithoutVisionInput
  thumbnail: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  visionViewsHistory: VisionViewsHistoryUpdateManyWithoutVisionInput
  votesOnVision: VotesOnVisionUpdateManyWithoutVisionInput
}

input VisionUpdateWithoutTargetingInput {
  activityDate: NullableDateTimeFieldUpdateOperationsInput
  author: UserUpdateOneWithoutVisionsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  draftMode: BoolFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  labelsOnVision: LabelOnVisionUpdateManyWithoutVisionInput
  mergeRequest: MergeRequestUpdateOneWithoutVisionInput
  nextVisions: VisionUpdateManyWithoutPrevVisionInput
  premise: PremiseUpdateOneRequiredWithoutVisionInput
  prevVision: VisionUpdateOneWithoutNextVisionsInput
  reactionOnVisions: ReactionOnVisionsUpdateManyWithoutVisionInput
  reference: ReferenceUpdateOneWithoutVisionInput
  reputationRecords: ReputationRecordUpdateManyWithoutVisionInput
  tagsOnVisions: TagsOnVisionsUpdateManyWithoutVisionInput
  targetedBy: RelationBetweenVisionsUpdateManyWithoutSourceVisionInput
  threadsOnVision: ThreadsOnVisionUpdateManyWithoutVisionInput
  thumbnail: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  visionViewsHistory: VisionViewsHistoryUpdateManyWithoutVisionInput
  votesOnVision: VotesOnVisionUpdateManyWithoutVisionInput
}

input VisionUpdateWithoutThreadsOnVisionInput {
  activityDate: NullableDateTimeFieldUpdateOperationsInput
  author: UserUpdateOneWithoutVisionsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  draftMode: BoolFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  labelsOnVision: LabelOnVisionUpdateManyWithoutVisionInput
  mergeRequest: MergeRequestUpdateOneWithoutVisionInput
  nextVisions: VisionUpdateManyWithoutPrevVisionInput
  premise: PremiseUpdateOneRequiredWithoutVisionInput
  prevVision: VisionUpdateOneWithoutNextVisionsInput
  reactionOnVisions: ReactionOnVisionsUpdateManyWithoutVisionInput
  reference: ReferenceUpdateOneWithoutVisionInput
  reputationRecords: ReputationRecordUpdateManyWithoutVisionInput
  tagsOnVisions: TagsOnVisionsUpdateManyWithoutVisionInput
  targetedBy: RelationBetweenVisionsUpdateManyWithoutSourceVisionInput
  targeting: RelationBetweenVisionsUpdateManyWithoutTargetVisionInput
  thumbnail: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  visionViewsHistory: VisionViewsHistoryUpdateManyWithoutVisionInput
  votesOnVision: VotesOnVisionUpdateManyWithoutVisionInput
}

input VisionUpdateWithoutVisionViewsHistoryInput {
  activityDate: NullableDateTimeFieldUpdateOperationsInput
  author: UserUpdateOneWithoutVisionsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  draftMode: BoolFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  labelsOnVision: LabelOnVisionUpdateManyWithoutVisionInput
  mergeRequest: MergeRequestUpdateOneWithoutVisionInput
  nextVisions: VisionUpdateManyWithoutPrevVisionInput
  premise: PremiseUpdateOneRequiredWithoutVisionInput
  prevVision: VisionUpdateOneWithoutNextVisionsInput
  reactionOnVisions: ReactionOnVisionsUpdateManyWithoutVisionInput
  reference: ReferenceUpdateOneWithoutVisionInput
  reputationRecords: ReputationRecordUpdateManyWithoutVisionInput
  tagsOnVisions: TagsOnVisionsUpdateManyWithoutVisionInput
  targetedBy: RelationBetweenVisionsUpdateManyWithoutSourceVisionInput
  targeting: RelationBetweenVisionsUpdateManyWithoutTargetVisionInput
  threadsOnVision: ThreadsOnVisionUpdateManyWithoutVisionInput
  thumbnail: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  votesOnVision: VotesOnVisionUpdateManyWithoutVisionInput
}

input VisionUpdateWithoutVotesOnVisionInput {
  activityDate: NullableDateTimeFieldUpdateOperationsInput
  author: UserUpdateOneWithoutVisionsInput
  createdAt: DateTimeFieldUpdateOperationsInput
  description: NullableStringFieldUpdateOperationsInput
  draftMode: BoolFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  labelsOnVision: LabelOnVisionUpdateManyWithoutVisionInput
  mergeRequest: MergeRequestUpdateOneWithoutVisionInput
  nextVisions: VisionUpdateManyWithoutPrevVisionInput
  premise: PremiseUpdateOneRequiredWithoutVisionInput
  prevVision: VisionUpdateOneWithoutNextVisionsInput
  reactionOnVisions: ReactionOnVisionsUpdateManyWithoutVisionInput
  reference: ReferenceUpdateOneWithoutVisionInput
  reputationRecords: ReputationRecordUpdateManyWithoutVisionInput
  tagsOnVisions: TagsOnVisionsUpdateManyWithoutVisionInput
  targetedBy: RelationBetweenVisionsUpdateManyWithoutSourceVisionInput
  targeting: RelationBetweenVisionsUpdateManyWithoutTargetVisionInput
  threadsOnVision: ThreadsOnVisionUpdateManyWithoutVisionInput
  thumbnail: NullableStringFieldUpdateOperationsInput
  title: StringFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  visionViewsHistory: VisionViewsHistoryUpdateManyWithoutVisionInput
}

input VisionUpsertWithWhereUniqueWithoutAuthorInput {
  create: VisionCreateWithoutAuthorInput!
  update: VisionUpdateWithoutAuthorInput!
  where: VisionWhereUniqueInput!
}

input VisionUpsertWithWhereUniqueWithoutPremiseInput {
  create: VisionCreateWithoutPremiseInput!
  update: VisionUpdateWithoutPremiseInput!
  where: VisionWhereUniqueInput!
}

input VisionUpsertWithWhereUniqueWithoutPrevVisionInput {
  create: VisionCreateWithoutPrevVisionInput!
  update: VisionUpdateWithoutPrevVisionInput!
  where: VisionWhereUniqueInput!
}

input VisionUpsertWithWhereUniqueWithoutReferenceInput {
  create: VisionCreateWithoutReferenceInput!
  update: VisionUpdateWithoutReferenceInput!
  where: VisionWhereUniqueInput!
}

input VisionUpsertWithoutLabelsOnVisionInput {
  create: VisionCreateWithoutLabelsOnVisionInput!
  update: VisionUpdateWithoutLabelsOnVisionInput!
}

input VisionUpsertWithoutMergeRequestInput {
  create: VisionCreateWithoutMergeRequestInput!
  update: VisionUpdateWithoutMergeRequestInput!
}

input VisionUpsertWithoutNextVisionsInput {
  create: VisionCreateWithoutNextVisionsInput!
  update: VisionUpdateWithoutNextVisionsInput!
}

input VisionUpsertWithoutReactionOnVisionsInput {
  create: VisionCreateWithoutReactionOnVisionsInput!
  update: VisionUpdateWithoutReactionOnVisionsInput!
}

input VisionUpsertWithoutReputationRecordsInput {
  create: VisionCreateWithoutReputationRecordsInput!
  update: VisionUpdateWithoutReputationRecordsInput!
}

input VisionUpsertWithoutTagsOnVisionsInput {
  create: VisionCreateWithoutTagsOnVisionsInput!
  update: VisionUpdateWithoutTagsOnVisionsInput!
}

input VisionUpsertWithoutTargetedByInput {
  create: VisionCreateWithoutTargetedByInput!
  update: VisionUpdateWithoutTargetedByInput!
}

input VisionUpsertWithoutTargetingInput {
  create: VisionCreateWithoutTargetingInput!
  update: VisionUpdateWithoutTargetingInput!
}

input VisionUpsertWithoutThreadsOnVisionInput {
  create: VisionCreateWithoutThreadsOnVisionInput!
  update: VisionUpdateWithoutThreadsOnVisionInput!
}

input VisionUpsertWithoutVisionViewsHistoryInput {
  create: VisionCreateWithoutVisionViewsHistoryInput!
  update: VisionUpdateWithoutVisionViewsHistoryInput!
}

input VisionUpsertWithoutVotesOnVisionInput {
  create: VisionCreateWithoutVotesOnVisionInput!
  update: VisionUpdateWithoutVotesOnVisionInput!
}

type VisionViewsHistory {
  createdAt: DateTime!
  id: String!
  user: User!
  userId: String!
  vision: Vision!
  visionId: String!
}

type VisionViewsHistoryCountAggregate {
  _all: Int!
  createdAt: Int!
  id: Int!
  userId: Int!
  visionId: Int!
}

input VisionViewsHistoryCountOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  userId: SortOrder
  visionId: SortOrder
}

input VisionViewsHistoryCreateInput {
  createdAt: DateTime
  id: String
  user: UserCreateNestedOneWithoutVisionViewsHistoryInput!
  vision: VisionCreateNestedOneWithoutVisionViewsHistoryInput!
}

input VisionViewsHistoryCreateManyInput {
  createdAt: DateTime
  id: String
  userId: String!
  visionId: String!
}

input VisionViewsHistoryCreateManyUserInput {
  createdAt: DateTime
  id: String
  visionId: String!
}

input VisionViewsHistoryCreateManyUserInputEnvelope {
  data: [VisionViewsHistoryCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input VisionViewsHistoryCreateManyVisionInput {
  createdAt: DateTime
  id: String
  userId: String!
}

input VisionViewsHistoryCreateManyVisionInputEnvelope {
  data: [VisionViewsHistoryCreateManyVisionInput!]!
  skipDuplicates: Boolean
}

input VisionViewsHistoryCreateNestedManyWithoutUserInput {
  connect: [VisionViewsHistoryWhereUniqueInput!]
  connectOrCreate: [VisionViewsHistoryCreateOrConnectWithoutUserInput!]
  create: [VisionViewsHistoryCreateWithoutUserInput!]
  createMany: VisionViewsHistoryCreateManyUserInputEnvelope
}

input VisionViewsHistoryCreateNestedManyWithoutVisionInput {
  connect: [VisionViewsHistoryWhereUniqueInput!]
  connectOrCreate: [VisionViewsHistoryCreateOrConnectWithoutVisionInput!]
  create: [VisionViewsHistoryCreateWithoutVisionInput!]
  createMany: VisionViewsHistoryCreateManyVisionInputEnvelope
}

input VisionViewsHistoryCreateOrConnectWithoutUserInput {
  create: VisionViewsHistoryCreateWithoutUserInput!
  where: VisionViewsHistoryWhereUniqueInput!
}

input VisionViewsHistoryCreateOrConnectWithoutVisionInput {
  create: VisionViewsHistoryCreateWithoutVisionInput!
  where: VisionViewsHistoryWhereUniqueInput!
}

input VisionViewsHistoryCreateWithoutUserInput {
  createdAt: DateTime
  id: String
  vision: VisionCreateNestedOneWithoutVisionViewsHistoryInput!
}

input VisionViewsHistoryCreateWithoutVisionInput {
  createdAt: DateTime
  id: String
  user: UserCreateNestedOneWithoutVisionViewsHistoryInput!
}

type VisionViewsHistoryGroupBy {
  _count: VisionViewsHistoryCountAggregate
  _max: VisionViewsHistoryMaxAggregate
  _min: VisionViewsHistoryMinAggregate
  createdAt: DateTime!
  id: String!
  userId: String!
  visionId: String!
}

input VisionViewsHistoryListRelationFilter {
  every: VisionViewsHistoryWhereInput
  none: VisionViewsHistoryWhereInput
  some: VisionViewsHistoryWhereInput
}

type VisionViewsHistoryMaxAggregate {
  createdAt: DateTime
  id: String
  userId: String
  visionId: String
}

input VisionViewsHistoryMaxOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  userId: SortOrder
  visionId: SortOrder
}

type VisionViewsHistoryMinAggregate {
  createdAt: DateTime
  id: String
  userId: String
  visionId: String
}

input VisionViewsHistoryMinOrderByAggregateInput {
  createdAt: SortOrder
  id: SortOrder
  userId: SortOrder
  visionId: SortOrder
}

input VisionViewsHistoryOrderByRelationAggregateInput {
  _count: SortOrder
}

input VisionViewsHistoryOrderByWithAggregationInput {
  _count: VisionViewsHistoryCountOrderByAggregateInput
  _max: VisionViewsHistoryMaxOrderByAggregateInput
  _min: VisionViewsHistoryMinOrderByAggregateInput
  createdAt: SortOrder
  id: SortOrder
  userId: SortOrder
  visionId: SortOrder
}

input VisionViewsHistoryOrderByWithRelationInput {
  createdAt: SortOrder
  id: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
  vision: VisionOrderByWithRelationInput
  visionId: SortOrder
}

enum VisionViewsHistoryScalarFieldEnum {
  createdAt
  id
  userId
  visionId
}

input VisionViewsHistoryScalarWhereInput {
  AND: [VisionViewsHistoryScalarWhereInput!]
  NOT: [VisionViewsHistoryScalarWhereInput!]
  OR: [VisionViewsHistoryScalarWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  userId: StringFilter
  visionId: StringFilter
}

input VisionViewsHistoryScalarWhereWithAggregatesInput {
  AND: [VisionViewsHistoryScalarWhereWithAggregatesInput!]
  NOT: [VisionViewsHistoryScalarWhereWithAggregatesInput!]
  OR: [VisionViewsHistoryScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  id: StringWithAggregatesFilter
  userId: StringWithAggregatesFilter
  visionId: StringWithAggregatesFilter
}

input VisionViewsHistoryUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutVisionViewsHistoryInput
  vision: VisionUpdateOneRequiredWithoutVisionViewsHistoryInput
}

input VisionViewsHistoryUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
}

input VisionViewsHistoryUpdateManyWithWhereWithoutUserInput {
  data: VisionViewsHistoryUpdateManyMutationInput!
  where: VisionViewsHistoryScalarWhereInput!
}

input VisionViewsHistoryUpdateManyWithWhereWithoutVisionInput {
  data: VisionViewsHistoryUpdateManyMutationInput!
  where: VisionViewsHistoryScalarWhereInput!
}

input VisionViewsHistoryUpdateManyWithoutUserInput {
  connect: [VisionViewsHistoryWhereUniqueInput!]
  connectOrCreate: [VisionViewsHistoryCreateOrConnectWithoutUserInput!]
  create: [VisionViewsHistoryCreateWithoutUserInput!]
  createMany: VisionViewsHistoryCreateManyUserInputEnvelope
  delete: [VisionViewsHistoryWhereUniqueInput!]
  deleteMany: [VisionViewsHistoryScalarWhereInput!]
  disconnect: [VisionViewsHistoryWhereUniqueInput!]
  set: [VisionViewsHistoryWhereUniqueInput!]
  update: [VisionViewsHistoryUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [VisionViewsHistoryUpdateManyWithWhereWithoutUserInput!]
  upsert: [VisionViewsHistoryUpsertWithWhereUniqueWithoutUserInput!]
}

input VisionViewsHistoryUpdateManyWithoutVisionInput {
  connect: [VisionViewsHistoryWhereUniqueInput!]
  connectOrCreate: [VisionViewsHistoryCreateOrConnectWithoutVisionInput!]
  create: [VisionViewsHistoryCreateWithoutVisionInput!]
  createMany: VisionViewsHistoryCreateManyVisionInputEnvelope
  delete: [VisionViewsHistoryWhereUniqueInput!]
  deleteMany: [VisionViewsHistoryScalarWhereInput!]
  disconnect: [VisionViewsHistoryWhereUniqueInput!]
  set: [VisionViewsHistoryWhereUniqueInput!]
  update: [VisionViewsHistoryUpdateWithWhereUniqueWithoutVisionInput!]
  updateMany: [VisionViewsHistoryUpdateManyWithWhereWithoutVisionInput!]
  upsert: [VisionViewsHistoryUpsertWithWhereUniqueWithoutVisionInput!]
}

input VisionViewsHistoryUpdateWithWhereUniqueWithoutUserInput {
  data: VisionViewsHistoryUpdateWithoutUserInput!
  where: VisionViewsHistoryWhereUniqueInput!
}

input VisionViewsHistoryUpdateWithWhereUniqueWithoutVisionInput {
  data: VisionViewsHistoryUpdateWithoutVisionInput!
  where: VisionViewsHistoryWhereUniqueInput!
}

input VisionViewsHistoryUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  vision: VisionUpdateOneRequiredWithoutVisionViewsHistoryInput
}

input VisionViewsHistoryUpdateWithoutVisionInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  id: StringFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutVisionViewsHistoryInput
}

input VisionViewsHistoryUpsertWithWhereUniqueWithoutUserInput {
  create: VisionViewsHistoryCreateWithoutUserInput!
  update: VisionViewsHistoryUpdateWithoutUserInput!
  where: VisionViewsHistoryWhereUniqueInput!
}

input VisionViewsHistoryUpsertWithWhereUniqueWithoutVisionInput {
  create: VisionViewsHistoryCreateWithoutVisionInput!
  update: VisionViewsHistoryUpdateWithoutVisionInput!
  where: VisionViewsHistoryWhereUniqueInput!
}

input VisionViewsHistoryWhereInput {
  AND: [VisionViewsHistoryWhereInput!]
  NOT: [VisionViewsHistoryWhereInput!]
  OR: [VisionViewsHistoryWhereInput!]
  createdAt: DateTimeFilter
  id: StringFilter
  user: UserRelationFilter
  userId: StringFilter
  vision: VisionRelationFilter
  visionId: StringFilter
}

input VisionViewsHistoryWhereUniqueInput {
  id: String
}

input VisionWhereInput {
  AND: [VisionWhereInput!]
  NOT: [VisionWhereInput!]
  OR: [VisionWhereInput!]
  activityDate: DateTimeNullableFilter
  author: UserRelationFilter
  authorId: StringNullableFilter
  createdAt: DateTimeFilter
  description: StringNullableFilter
  draftMode: BoolFilter
  id: StringFilter
  labelsOnVision: LabelOnVisionListRelationFilter
  mergeRequest: MergeRequestRelationFilter
  nextVisions: VisionListRelationFilter
  premise: PremiseRelationFilter
  premiseId: StringFilter
  prevVision: VisionRelationFilter
  prevVisionId: StringNullableFilter
  reactionOnVisions: ReactionOnVisionsListRelationFilter
  reference: ReferenceRelationFilter
  referenceId: StringNullableFilter
  reputationRecords: ReputationRecordListRelationFilter
  tagsOnVisions: TagsOnVisionsListRelationFilter
  targetedBy: RelationBetweenVisionsListRelationFilter
  targeting: RelationBetweenVisionsListRelationFilter
  threadsOnVision: ThreadsOnVisionListRelationFilter
  thumbnail: StringNullableFilter
  title: StringFilter
  updatedAt: DateTimeFilter
  visionViewsHistory: VisionViewsHistoryListRelationFilter
  votesOnVision: VotesOnVisionListRelationFilter
}

input VisionWhereUniqueInput {
  id: String
}

type VotesOnPremise {
  createdAt: DateTime!
  premise: Premise!
  premiseId: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
  vote: Int!
}

type VotesOnPremiseAvgAggregate {
  vote: Float
}

input VotesOnPremiseAvgOrderByAggregateInput {
  vote: SortOrder
}

type VotesOnPremiseCountAggregate {
  _all: Int!
  createdAt: Int!
  premiseId: Int!
  updatedAt: Int!
  userId: Int!
  vote: Int!
}

input VotesOnPremiseCountOrderByAggregateInput {
  createdAt: SortOrder
  premiseId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  vote: SortOrder
}

input VotesOnPremiseCreateInput {
  createdAt: DateTime
  premise: PremiseCreateNestedOneWithoutVotesOnPremiseInput!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutVotesOnPremiseInput!
  vote: Int
}

input VotesOnPremiseCreateManyInput {
  createdAt: DateTime
  premiseId: String!
  updatedAt: DateTime
  userId: String!
  vote: Int
}

input VotesOnPremiseCreateManyPremiseInput {
  createdAt: DateTime
  updatedAt: DateTime
  userId: String!
  vote: Int
}

input VotesOnPremiseCreateManyPremiseInputEnvelope {
  data: [VotesOnPremiseCreateManyPremiseInput!]!
  skipDuplicates: Boolean
}

input VotesOnPremiseCreateManyUserInput {
  createdAt: DateTime
  premiseId: String!
  updatedAt: DateTime
  vote: Int
}

input VotesOnPremiseCreateManyUserInputEnvelope {
  data: [VotesOnPremiseCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input VotesOnPremiseCreateNestedManyWithoutPremiseInput {
  connect: [VotesOnPremiseWhereUniqueInput!]
  connectOrCreate: [VotesOnPremiseCreateOrConnectWithoutPremiseInput!]
  create: [VotesOnPremiseCreateWithoutPremiseInput!]
  createMany: VotesOnPremiseCreateManyPremiseInputEnvelope
}

input VotesOnPremiseCreateNestedManyWithoutUserInput {
  connect: [VotesOnPremiseWhereUniqueInput!]
  connectOrCreate: [VotesOnPremiseCreateOrConnectWithoutUserInput!]
  create: [VotesOnPremiseCreateWithoutUserInput!]
  createMany: VotesOnPremiseCreateManyUserInputEnvelope
}

input VotesOnPremiseCreateOrConnectWithoutPremiseInput {
  create: VotesOnPremiseCreateWithoutPremiseInput!
  where: VotesOnPremiseWhereUniqueInput!
}

input VotesOnPremiseCreateOrConnectWithoutUserInput {
  create: VotesOnPremiseCreateWithoutUserInput!
  where: VotesOnPremiseWhereUniqueInput!
}

input VotesOnPremiseCreateWithoutPremiseInput {
  createdAt: DateTime
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutVotesOnPremiseInput!
  vote: Int
}

input VotesOnPremiseCreateWithoutUserInput {
  createdAt: DateTime
  premise: PremiseCreateNestedOneWithoutVotesOnPremiseInput!
  updatedAt: DateTime
  vote: Int
}

type VotesOnPremiseGroupBy {
  _avg: VotesOnPremiseAvgAggregate
  _count: VotesOnPremiseCountAggregate
  _max: VotesOnPremiseMaxAggregate
  _min: VotesOnPremiseMinAggregate
  _sum: VotesOnPremiseSumAggregate
  createdAt: DateTime!
  premiseId: String!
  updatedAt: DateTime!
  userId: String!
  vote: Int!
}

input VotesOnPremiseListRelationFilter {
  every: VotesOnPremiseWhereInput
  none: VotesOnPremiseWhereInput
  some: VotesOnPremiseWhereInput
}

type VotesOnPremiseMaxAggregate {
  createdAt: DateTime
  premiseId: String
  updatedAt: DateTime
  userId: String
  vote: Int
}

input VotesOnPremiseMaxOrderByAggregateInput {
  createdAt: SortOrder
  premiseId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  vote: SortOrder
}

type VotesOnPremiseMinAggregate {
  createdAt: DateTime
  premiseId: String
  updatedAt: DateTime
  userId: String
  vote: Int
}

input VotesOnPremiseMinOrderByAggregateInput {
  createdAt: SortOrder
  premiseId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  vote: SortOrder
}

input VotesOnPremiseOrderByRelationAggregateInput {
  _count: SortOrder
}

input VotesOnPremiseOrderByWithAggregationInput {
  _avg: VotesOnPremiseAvgOrderByAggregateInput
  _count: VotesOnPremiseCountOrderByAggregateInput
  _max: VotesOnPremiseMaxOrderByAggregateInput
  _min: VotesOnPremiseMinOrderByAggregateInput
  _sum: VotesOnPremiseSumOrderByAggregateInput
  createdAt: SortOrder
  premiseId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  vote: SortOrder
}

input VotesOnPremiseOrderByWithRelationInput {
  createdAt: SortOrder
  premise: PremiseOrderByWithRelationInput
  premiseId: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
  vote: SortOrder
}

enum VotesOnPremiseScalarFieldEnum {
  createdAt
  premiseId
  updatedAt
  userId
  vote
}

input VotesOnPremiseScalarWhereInput {
  AND: [VotesOnPremiseScalarWhereInput!]
  NOT: [VotesOnPremiseScalarWhereInput!]
  OR: [VotesOnPremiseScalarWhereInput!]
  createdAt: DateTimeFilter
  premiseId: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
  vote: IntFilter
}

input VotesOnPremiseScalarWhereWithAggregatesInput {
  AND: [VotesOnPremiseScalarWhereWithAggregatesInput!]
  NOT: [VotesOnPremiseScalarWhereWithAggregatesInput!]
  OR: [VotesOnPremiseScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  premiseId: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: StringWithAggregatesFilter
  vote: IntWithAggregatesFilter
}

type VotesOnPremiseSumAggregate {
  vote: Int
}

input VotesOnPremiseSumOrderByAggregateInput {
  vote: SortOrder
}

input VotesOnPremiseUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  premise: PremiseUpdateOneRequiredWithoutVotesOnPremiseInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutVotesOnPremiseInput
  vote: IntFieldUpdateOperationsInput
}

input VotesOnPremiseUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  vote: IntFieldUpdateOperationsInput
}

input VotesOnPremiseUpdateManyWithWhereWithoutPremiseInput {
  data: VotesOnPremiseUpdateManyMutationInput!
  where: VotesOnPremiseScalarWhereInput!
}

input VotesOnPremiseUpdateManyWithWhereWithoutUserInput {
  data: VotesOnPremiseUpdateManyMutationInput!
  where: VotesOnPremiseScalarWhereInput!
}

input VotesOnPremiseUpdateManyWithoutPremiseInput {
  connect: [VotesOnPremiseWhereUniqueInput!]
  connectOrCreate: [VotesOnPremiseCreateOrConnectWithoutPremiseInput!]
  create: [VotesOnPremiseCreateWithoutPremiseInput!]
  createMany: VotesOnPremiseCreateManyPremiseInputEnvelope
  delete: [VotesOnPremiseWhereUniqueInput!]
  deleteMany: [VotesOnPremiseScalarWhereInput!]
  disconnect: [VotesOnPremiseWhereUniqueInput!]
  set: [VotesOnPremiseWhereUniqueInput!]
  update: [VotesOnPremiseUpdateWithWhereUniqueWithoutPremiseInput!]
  updateMany: [VotesOnPremiseUpdateManyWithWhereWithoutPremiseInput!]
  upsert: [VotesOnPremiseUpsertWithWhereUniqueWithoutPremiseInput!]
}

input VotesOnPremiseUpdateManyWithoutUserInput {
  connect: [VotesOnPremiseWhereUniqueInput!]
  connectOrCreate: [VotesOnPremiseCreateOrConnectWithoutUserInput!]
  create: [VotesOnPremiseCreateWithoutUserInput!]
  createMany: VotesOnPremiseCreateManyUserInputEnvelope
  delete: [VotesOnPremiseWhereUniqueInput!]
  deleteMany: [VotesOnPremiseScalarWhereInput!]
  disconnect: [VotesOnPremiseWhereUniqueInput!]
  set: [VotesOnPremiseWhereUniqueInput!]
  update: [VotesOnPremiseUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [VotesOnPremiseUpdateManyWithWhereWithoutUserInput!]
  upsert: [VotesOnPremiseUpsertWithWhereUniqueWithoutUserInput!]
}

input VotesOnPremiseUpdateWithWhereUniqueWithoutPremiseInput {
  data: VotesOnPremiseUpdateWithoutPremiseInput!
  where: VotesOnPremiseWhereUniqueInput!
}

input VotesOnPremiseUpdateWithWhereUniqueWithoutUserInput {
  data: VotesOnPremiseUpdateWithoutUserInput!
  where: VotesOnPremiseWhereUniqueInput!
}

input VotesOnPremiseUpdateWithoutPremiseInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutVotesOnPremiseInput
  vote: IntFieldUpdateOperationsInput
}

input VotesOnPremiseUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  premise: PremiseUpdateOneRequiredWithoutVotesOnPremiseInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  vote: IntFieldUpdateOperationsInput
}

input VotesOnPremiseUpsertWithWhereUniqueWithoutPremiseInput {
  create: VotesOnPremiseCreateWithoutPremiseInput!
  update: VotesOnPremiseUpdateWithoutPremiseInput!
  where: VotesOnPremiseWhereUniqueInput!
}

input VotesOnPremiseUpsertWithWhereUniqueWithoutUserInput {
  create: VotesOnPremiseCreateWithoutUserInput!
  update: VotesOnPremiseUpdateWithoutUserInput!
  where: VotesOnPremiseWhereUniqueInput!
}

input VotesOnPremiseUserIdPremiseIdCompoundUniqueInput {
  premiseId: String!
  userId: String!
}

input VotesOnPremiseWhereInput {
  AND: [VotesOnPremiseWhereInput!]
  NOT: [VotesOnPremiseWhereInput!]
  OR: [VotesOnPremiseWhereInput!]
  createdAt: DateTimeFilter
  premise: PremiseRelationFilter
  premiseId: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
  vote: IntFilter
}

input VotesOnPremiseWhereUniqueInput {
  userId_premiseId: VotesOnPremiseUserIdPremiseIdCompoundUniqueInput
}

type VotesOnThread {
  createdAt: DateTime!
  thread: Thread!
  threadId: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
  vote: Int!
}

type VotesOnThreadAvgAggregate {
  vote: Float
}

input VotesOnThreadAvgOrderByAggregateInput {
  vote: SortOrder
}

type VotesOnThreadCountAggregate {
  _all: Int!
  createdAt: Int!
  threadId: Int!
  updatedAt: Int!
  userId: Int!
  vote: Int!
}

input VotesOnThreadCountOrderByAggregateInput {
  createdAt: SortOrder
  threadId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  vote: SortOrder
}

input VotesOnThreadCreateInput {
  createdAt: DateTime
  thread: ThreadCreateNestedOneWithoutVotesOnThreadInput!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutVotesOnThreadInput!
  vote: Int
}

input VotesOnThreadCreateManyInput {
  createdAt: DateTime
  threadId: String!
  updatedAt: DateTime
  userId: String!
  vote: Int
}

input VotesOnThreadCreateManyThreadInput {
  createdAt: DateTime
  updatedAt: DateTime
  userId: String!
  vote: Int
}

input VotesOnThreadCreateManyThreadInputEnvelope {
  data: [VotesOnThreadCreateManyThreadInput!]!
  skipDuplicates: Boolean
}

input VotesOnThreadCreateManyUserInput {
  createdAt: DateTime
  threadId: String!
  updatedAt: DateTime
  vote: Int
}

input VotesOnThreadCreateManyUserInputEnvelope {
  data: [VotesOnThreadCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input VotesOnThreadCreateNestedManyWithoutThreadInput {
  connect: [VotesOnThreadWhereUniqueInput!]
  connectOrCreate: [VotesOnThreadCreateOrConnectWithoutThreadInput!]
  create: [VotesOnThreadCreateWithoutThreadInput!]
  createMany: VotesOnThreadCreateManyThreadInputEnvelope
}

input VotesOnThreadCreateNestedManyWithoutUserInput {
  connect: [VotesOnThreadWhereUniqueInput!]
  connectOrCreate: [VotesOnThreadCreateOrConnectWithoutUserInput!]
  create: [VotesOnThreadCreateWithoutUserInput!]
  createMany: VotesOnThreadCreateManyUserInputEnvelope
}

input VotesOnThreadCreateOrConnectWithoutThreadInput {
  create: VotesOnThreadCreateWithoutThreadInput!
  where: VotesOnThreadWhereUniqueInput!
}

input VotesOnThreadCreateOrConnectWithoutUserInput {
  create: VotesOnThreadCreateWithoutUserInput!
  where: VotesOnThreadWhereUniqueInput!
}

input VotesOnThreadCreateWithoutThreadInput {
  createdAt: DateTime
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutVotesOnThreadInput!
  vote: Int
}

input VotesOnThreadCreateWithoutUserInput {
  createdAt: DateTime
  thread: ThreadCreateNestedOneWithoutVotesOnThreadInput!
  updatedAt: DateTime
  vote: Int
}

type VotesOnThreadGroupBy {
  _avg: VotesOnThreadAvgAggregate
  _count: VotesOnThreadCountAggregate
  _max: VotesOnThreadMaxAggregate
  _min: VotesOnThreadMinAggregate
  _sum: VotesOnThreadSumAggregate
  createdAt: DateTime!
  threadId: String!
  updatedAt: DateTime!
  userId: String!
  vote: Int!
}

input VotesOnThreadListRelationFilter {
  every: VotesOnThreadWhereInput
  none: VotesOnThreadWhereInput
  some: VotesOnThreadWhereInput
}

type VotesOnThreadMaxAggregate {
  createdAt: DateTime
  threadId: String
  updatedAt: DateTime
  userId: String
  vote: Int
}

input VotesOnThreadMaxOrderByAggregateInput {
  createdAt: SortOrder
  threadId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  vote: SortOrder
}

type VotesOnThreadMinAggregate {
  createdAt: DateTime
  threadId: String
  updatedAt: DateTime
  userId: String
  vote: Int
}

input VotesOnThreadMinOrderByAggregateInput {
  createdAt: SortOrder
  threadId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  vote: SortOrder
}

input VotesOnThreadOrderByRelationAggregateInput {
  _count: SortOrder
}

input VotesOnThreadOrderByWithAggregationInput {
  _avg: VotesOnThreadAvgOrderByAggregateInput
  _count: VotesOnThreadCountOrderByAggregateInput
  _max: VotesOnThreadMaxOrderByAggregateInput
  _min: VotesOnThreadMinOrderByAggregateInput
  _sum: VotesOnThreadSumOrderByAggregateInput
  createdAt: SortOrder
  threadId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  vote: SortOrder
}

input VotesOnThreadOrderByWithRelationInput {
  createdAt: SortOrder
  thread: ThreadOrderByWithRelationInput
  threadId: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
  vote: SortOrder
}

enum VotesOnThreadScalarFieldEnum {
  createdAt
  threadId
  updatedAt
  userId
  vote
}

input VotesOnThreadScalarWhereInput {
  AND: [VotesOnThreadScalarWhereInput!]
  NOT: [VotesOnThreadScalarWhereInput!]
  OR: [VotesOnThreadScalarWhereInput!]
  createdAt: DateTimeFilter
  threadId: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
  vote: IntFilter
}

input VotesOnThreadScalarWhereWithAggregatesInput {
  AND: [VotesOnThreadScalarWhereWithAggregatesInput!]
  NOT: [VotesOnThreadScalarWhereWithAggregatesInput!]
  OR: [VotesOnThreadScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  threadId: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: StringWithAggregatesFilter
  vote: IntWithAggregatesFilter
}

type VotesOnThreadSumAggregate {
  vote: Int
}

input VotesOnThreadSumOrderByAggregateInput {
  vote: SortOrder
}

input VotesOnThreadUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  thread: ThreadUpdateOneRequiredWithoutVotesOnThreadInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutVotesOnThreadInput
  vote: IntFieldUpdateOperationsInput
}

input VotesOnThreadUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  vote: IntFieldUpdateOperationsInput
}

input VotesOnThreadUpdateManyWithWhereWithoutThreadInput {
  data: VotesOnThreadUpdateManyMutationInput!
  where: VotesOnThreadScalarWhereInput!
}

input VotesOnThreadUpdateManyWithWhereWithoutUserInput {
  data: VotesOnThreadUpdateManyMutationInput!
  where: VotesOnThreadScalarWhereInput!
}

input VotesOnThreadUpdateManyWithoutThreadInput {
  connect: [VotesOnThreadWhereUniqueInput!]
  connectOrCreate: [VotesOnThreadCreateOrConnectWithoutThreadInput!]
  create: [VotesOnThreadCreateWithoutThreadInput!]
  createMany: VotesOnThreadCreateManyThreadInputEnvelope
  delete: [VotesOnThreadWhereUniqueInput!]
  deleteMany: [VotesOnThreadScalarWhereInput!]
  disconnect: [VotesOnThreadWhereUniqueInput!]
  set: [VotesOnThreadWhereUniqueInput!]
  update: [VotesOnThreadUpdateWithWhereUniqueWithoutThreadInput!]
  updateMany: [VotesOnThreadUpdateManyWithWhereWithoutThreadInput!]
  upsert: [VotesOnThreadUpsertWithWhereUniqueWithoutThreadInput!]
}

input VotesOnThreadUpdateManyWithoutUserInput {
  connect: [VotesOnThreadWhereUniqueInput!]
  connectOrCreate: [VotesOnThreadCreateOrConnectWithoutUserInput!]
  create: [VotesOnThreadCreateWithoutUserInput!]
  createMany: VotesOnThreadCreateManyUserInputEnvelope
  delete: [VotesOnThreadWhereUniqueInput!]
  deleteMany: [VotesOnThreadScalarWhereInput!]
  disconnect: [VotesOnThreadWhereUniqueInput!]
  set: [VotesOnThreadWhereUniqueInput!]
  update: [VotesOnThreadUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [VotesOnThreadUpdateManyWithWhereWithoutUserInput!]
  upsert: [VotesOnThreadUpsertWithWhereUniqueWithoutUserInput!]
}

input VotesOnThreadUpdateWithWhereUniqueWithoutThreadInput {
  data: VotesOnThreadUpdateWithoutThreadInput!
  where: VotesOnThreadWhereUniqueInput!
}

input VotesOnThreadUpdateWithWhereUniqueWithoutUserInput {
  data: VotesOnThreadUpdateWithoutUserInput!
  where: VotesOnThreadWhereUniqueInput!
}

input VotesOnThreadUpdateWithoutThreadInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutVotesOnThreadInput
  vote: IntFieldUpdateOperationsInput
}

input VotesOnThreadUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  thread: ThreadUpdateOneRequiredWithoutVotesOnThreadInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  vote: IntFieldUpdateOperationsInput
}

input VotesOnThreadUpsertWithWhereUniqueWithoutThreadInput {
  create: VotesOnThreadCreateWithoutThreadInput!
  update: VotesOnThreadUpdateWithoutThreadInput!
  where: VotesOnThreadWhereUniqueInput!
}

input VotesOnThreadUpsertWithWhereUniqueWithoutUserInput {
  create: VotesOnThreadCreateWithoutUserInput!
  update: VotesOnThreadUpdateWithoutUserInput!
  where: VotesOnThreadWhereUniqueInput!
}

input VotesOnThreadUserIdThreadIdCompoundUniqueInput {
  threadId: String!
  userId: String!
}

input VotesOnThreadWhereInput {
  AND: [VotesOnThreadWhereInput!]
  NOT: [VotesOnThreadWhereInput!]
  OR: [VotesOnThreadWhereInput!]
  createdAt: DateTimeFilter
  thread: ThreadRelationFilter
  threadId: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
  vote: IntFilter
}

input VotesOnThreadWhereUniqueInput {
  userId_threadId: VotesOnThreadUserIdThreadIdCompoundUniqueInput
}

type VotesOnTimeline {
  createdAt: DateTime!
  timeline: Timeline!
  timelineId: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
  vote: Int!
}

type VotesOnTimelineAvgAggregate {
  vote: Float
}

input VotesOnTimelineAvgOrderByAggregateInput {
  vote: SortOrder
}

type VotesOnTimelineCountAggregate {
  _all: Int!
  createdAt: Int!
  timelineId: Int!
  updatedAt: Int!
  userId: Int!
  vote: Int!
}

input VotesOnTimelineCountOrderByAggregateInput {
  createdAt: SortOrder
  timelineId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  vote: SortOrder
}

input VotesOnTimelineCreateInput {
  createdAt: DateTime
  timeline: TimelineCreateNestedOneWithoutVotesOnTimelineInput!
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutVotesOnTimelineInput!
  vote: Int
}

input VotesOnTimelineCreateManyInput {
  createdAt: DateTime
  timelineId: String!
  updatedAt: DateTime
  userId: String!
  vote: Int
}

input VotesOnTimelineCreateManyTimelineInput {
  createdAt: DateTime
  updatedAt: DateTime
  userId: String!
  vote: Int
}

input VotesOnTimelineCreateManyTimelineInputEnvelope {
  data: [VotesOnTimelineCreateManyTimelineInput!]!
  skipDuplicates: Boolean
}

input VotesOnTimelineCreateManyUserInput {
  createdAt: DateTime
  timelineId: String!
  updatedAt: DateTime
  vote: Int
}

input VotesOnTimelineCreateManyUserInputEnvelope {
  data: [VotesOnTimelineCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input VotesOnTimelineCreateNestedManyWithoutTimelineInput {
  connect: [VotesOnTimelineWhereUniqueInput!]
  connectOrCreate: [VotesOnTimelineCreateOrConnectWithoutTimelineInput!]
  create: [VotesOnTimelineCreateWithoutTimelineInput!]
  createMany: VotesOnTimelineCreateManyTimelineInputEnvelope
}

input VotesOnTimelineCreateNestedManyWithoutUserInput {
  connect: [VotesOnTimelineWhereUniqueInput!]
  connectOrCreate: [VotesOnTimelineCreateOrConnectWithoutUserInput!]
  create: [VotesOnTimelineCreateWithoutUserInput!]
  createMany: VotesOnTimelineCreateManyUserInputEnvelope
}

input VotesOnTimelineCreateOrConnectWithoutTimelineInput {
  create: VotesOnTimelineCreateWithoutTimelineInput!
  where: VotesOnTimelineWhereUniqueInput!
}

input VotesOnTimelineCreateOrConnectWithoutUserInput {
  create: VotesOnTimelineCreateWithoutUserInput!
  where: VotesOnTimelineWhereUniqueInput!
}

input VotesOnTimelineCreateWithoutTimelineInput {
  createdAt: DateTime
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutVotesOnTimelineInput!
  vote: Int
}

input VotesOnTimelineCreateWithoutUserInput {
  createdAt: DateTime
  timeline: TimelineCreateNestedOneWithoutVotesOnTimelineInput!
  updatedAt: DateTime
  vote: Int
}

type VotesOnTimelineGroupBy {
  _avg: VotesOnTimelineAvgAggregate
  _count: VotesOnTimelineCountAggregate
  _max: VotesOnTimelineMaxAggregate
  _min: VotesOnTimelineMinAggregate
  _sum: VotesOnTimelineSumAggregate
  createdAt: DateTime!
  timelineId: String!
  updatedAt: DateTime!
  userId: String!
  vote: Int!
}

input VotesOnTimelineListRelationFilter {
  every: VotesOnTimelineWhereInput
  none: VotesOnTimelineWhereInput
  some: VotesOnTimelineWhereInput
}

type VotesOnTimelineMaxAggregate {
  createdAt: DateTime
  timelineId: String
  updatedAt: DateTime
  userId: String
  vote: Int
}

input VotesOnTimelineMaxOrderByAggregateInput {
  createdAt: SortOrder
  timelineId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  vote: SortOrder
}

type VotesOnTimelineMinAggregate {
  createdAt: DateTime
  timelineId: String
  updatedAt: DateTime
  userId: String
  vote: Int
}

input VotesOnTimelineMinOrderByAggregateInput {
  createdAt: SortOrder
  timelineId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  vote: SortOrder
}

input VotesOnTimelineOrderByRelationAggregateInput {
  _count: SortOrder
}

input VotesOnTimelineOrderByWithAggregationInput {
  _avg: VotesOnTimelineAvgOrderByAggregateInput
  _count: VotesOnTimelineCountOrderByAggregateInput
  _max: VotesOnTimelineMaxOrderByAggregateInput
  _min: VotesOnTimelineMinOrderByAggregateInput
  _sum: VotesOnTimelineSumOrderByAggregateInput
  createdAt: SortOrder
  timelineId: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  vote: SortOrder
}

input VotesOnTimelineOrderByWithRelationInput {
  createdAt: SortOrder
  timeline: TimelineOrderByWithRelationInput
  timelineId: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
  vote: SortOrder
}

enum VotesOnTimelineScalarFieldEnum {
  createdAt
  timelineId
  updatedAt
  userId
  vote
}

input VotesOnTimelineScalarWhereInput {
  AND: [VotesOnTimelineScalarWhereInput!]
  NOT: [VotesOnTimelineScalarWhereInput!]
  OR: [VotesOnTimelineScalarWhereInput!]
  createdAt: DateTimeFilter
  timelineId: StringFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
  vote: IntFilter
}

input VotesOnTimelineScalarWhereWithAggregatesInput {
  AND: [VotesOnTimelineScalarWhereWithAggregatesInput!]
  NOT: [VotesOnTimelineScalarWhereWithAggregatesInput!]
  OR: [VotesOnTimelineScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  timelineId: StringWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: StringWithAggregatesFilter
  vote: IntWithAggregatesFilter
}

type VotesOnTimelineSumAggregate {
  vote: Int
}

input VotesOnTimelineSumOrderByAggregateInput {
  vote: SortOrder
}

input VotesOnTimelineUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  timeline: TimelineUpdateOneRequiredWithoutVotesOnTimelineInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutVotesOnTimelineInput
  vote: IntFieldUpdateOperationsInput
}

input VotesOnTimelineUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  vote: IntFieldUpdateOperationsInput
}

input VotesOnTimelineUpdateManyWithWhereWithoutTimelineInput {
  data: VotesOnTimelineUpdateManyMutationInput!
  where: VotesOnTimelineScalarWhereInput!
}

input VotesOnTimelineUpdateManyWithWhereWithoutUserInput {
  data: VotesOnTimelineUpdateManyMutationInput!
  where: VotesOnTimelineScalarWhereInput!
}

input VotesOnTimelineUpdateManyWithoutTimelineInput {
  connect: [VotesOnTimelineWhereUniqueInput!]
  connectOrCreate: [VotesOnTimelineCreateOrConnectWithoutTimelineInput!]
  create: [VotesOnTimelineCreateWithoutTimelineInput!]
  createMany: VotesOnTimelineCreateManyTimelineInputEnvelope
  delete: [VotesOnTimelineWhereUniqueInput!]
  deleteMany: [VotesOnTimelineScalarWhereInput!]
  disconnect: [VotesOnTimelineWhereUniqueInput!]
  set: [VotesOnTimelineWhereUniqueInput!]
  update: [VotesOnTimelineUpdateWithWhereUniqueWithoutTimelineInput!]
  updateMany: [VotesOnTimelineUpdateManyWithWhereWithoutTimelineInput!]
  upsert: [VotesOnTimelineUpsertWithWhereUniqueWithoutTimelineInput!]
}

input VotesOnTimelineUpdateManyWithoutUserInput {
  connect: [VotesOnTimelineWhereUniqueInput!]
  connectOrCreate: [VotesOnTimelineCreateOrConnectWithoutUserInput!]
  create: [VotesOnTimelineCreateWithoutUserInput!]
  createMany: VotesOnTimelineCreateManyUserInputEnvelope
  delete: [VotesOnTimelineWhereUniqueInput!]
  deleteMany: [VotesOnTimelineScalarWhereInput!]
  disconnect: [VotesOnTimelineWhereUniqueInput!]
  set: [VotesOnTimelineWhereUniqueInput!]
  update: [VotesOnTimelineUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [VotesOnTimelineUpdateManyWithWhereWithoutUserInput!]
  upsert: [VotesOnTimelineUpsertWithWhereUniqueWithoutUserInput!]
}

input VotesOnTimelineUpdateWithWhereUniqueWithoutTimelineInput {
  data: VotesOnTimelineUpdateWithoutTimelineInput!
  where: VotesOnTimelineWhereUniqueInput!
}

input VotesOnTimelineUpdateWithWhereUniqueWithoutUserInput {
  data: VotesOnTimelineUpdateWithoutUserInput!
  where: VotesOnTimelineWhereUniqueInput!
}

input VotesOnTimelineUpdateWithoutTimelineInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutVotesOnTimelineInput
  vote: IntFieldUpdateOperationsInput
}

input VotesOnTimelineUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  timeline: TimelineUpdateOneRequiredWithoutVotesOnTimelineInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  vote: IntFieldUpdateOperationsInput
}

input VotesOnTimelineUpsertWithWhereUniqueWithoutTimelineInput {
  create: VotesOnTimelineCreateWithoutTimelineInput!
  update: VotesOnTimelineUpdateWithoutTimelineInput!
  where: VotesOnTimelineWhereUniqueInput!
}

input VotesOnTimelineUpsertWithWhereUniqueWithoutUserInput {
  create: VotesOnTimelineCreateWithoutUserInput!
  update: VotesOnTimelineUpdateWithoutUserInput!
  where: VotesOnTimelineWhereUniqueInput!
}

input VotesOnTimelineUserIdTimelineIdCompoundUniqueInput {
  timelineId: String!
  userId: String!
}

input VotesOnTimelineWhereInput {
  AND: [VotesOnTimelineWhereInput!]
  NOT: [VotesOnTimelineWhereInput!]
  OR: [VotesOnTimelineWhereInput!]
  createdAt: DateTimeFilter
  timeline: TimelineRelationFilter
  timelineId: StringFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
  vote: IntFilter
}

input VotesOnTimelineWhereUniqueInput {
  userId_timelineId: VotesOnTimelineUserIdTimelineIdCompoundUniqueInput
}

type VotesOnVision {
  createdAt: DateTime!
  updatedAt: DateTime!
  user: User!
  userId: String!
  vision: Vision!
  visionId: String!
  vote: Int!
}

type VotesOnVisionAvgAggregate {
  vote: Float
}

input VotesOnVisionAvgOrderByAggregateInput {
  vote: SortOrder
}

type VotesOnVisionCountAggregate {
  _all: Int!
  createdAt: Int!
  updatedAt: Int!
  userId: Int!
  visionId: Int!
  vote: Int!
}

input VotesOnVisionCountOrderByAggregateInput {
  createdAt: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  visionId: SortOrder
  vote: SortOrder
}

input VotesOnVisionCreateInput {
  createdAt: DateTime
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutVotesOnVisionInput!
  vision: VisionCreateNestedOneWithoutVotesOnVisionInput!
  vote: Int
}

input VotesOnVisionCreateManyInput {
  createdAt: DateTime
  updatedAt: DateTime
  userId: String!
  visionId: String!
  vote: Int
}

input VotesOnVisionCreateManyUserInput {
  createdAt: DateTime
  updatedAt: DateTime
  visionId: String!
  vote: Int
}

input VotesOnVisionCreateManyUserInputEnvelope {
  data: [VotesOnVisionCreateManyUserInput!]!
  skipDuplicates: Boolean
}

input VotesOnVisionCreateManyVisionInput {
  createdAt: DateTime
  updatedAt: DateTime
  userId: String!
  vote: Int
}

input VotesOnVisionCreateManyVisionInputEnvelope {
  data: [VotesOnVisionCreateManyVisionInput!]!
  skipDuplicates: Boolean
}

input VotesOnVisionCreateNestedManyWithoutUserInput {
  connect: [VotesOnVisionWhereUniqueInput!]
  connectOrCreate: [VotesOnVisionCreateOrConnectWithoutUserInput!]
  create: [VotesOnVisionCreateWithoutUserInput!]
  createMany: VotesOnVisionCreateManyUserInputEnvelope
}

input VotesOnVisionCreateNestedManyWithoutVisionInput {
  connect: [VotesOnVisionWhereUniqueInput!]
  connectOrCreate: [VotesOnVisionCreateOrConnectWithoutVisionInput!]
  create: [VotesOnVisionCreateWithoutVisionInput!]
  createMany: VotesOnVisionCreateManyVisionInputEnvelope
}

input VotesOnVisionCreateOrConnectWithoutUserInput {
  create: VotesOnVisionCreateWithoutUserInput!
  where: VotesOnVisionWhereUniqueInput!
}

input VotesOnVisionCreateOrConnectWithoutVisionInput {
  create: VotesOnVisionCreateWithoutVisionInput!
  where: VotesOnVisionWhereUniqueInput!
}

input VotesOnVisionCreateWithoutUserInput {
  createdAt: DateTime
  updatedAt: DateTime
  vision: VisionCreateNestedOneWithoutVotesOnVisionInput!
  vote: Int
}

input VotesOnVisionCreateWithoutVisionInput {
  createdAt: DateTime
  updatedAt: DateTime
  user: UserCreateNestedOneWithoutVotesOnVisionInput!
  vote: Int
}

type VotesOnVisionGroupBy {
  _avg: VotesOnVisionAvgAggregate
  _count: VotesOnVisionCountAggregate
  _max: VotesOnVisionMaxAggregate
  _min: VotesOnVisionMinAggregate
  _sum: VotesOnVisionSumAggregate
  createdAt: DateTime!
  updatedAt: DateTime!
  userId: String!
  visionId: String!
  vote: Int!
}

input VotesOnVisionListRelationFilter {
  every: VotesOnVisionWhereInput
  none: VotesOnVisionWhereInput
  some: VotesOnVisionWhereInput
}

type VotesOnVisionMaxAggregate {
  createdAt: DateTime
  updatedAt: DateTime
  userId: String
  visionId: String
  vote: Int
}

input VotesOnVisionMaxOrderByAggregateInput {
  createdAt: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  visionId: SortOrder
  vote: SortOrder
}

type VotesOnVisionMinAggregate {
  createdAt: DateTime
  updatedAt: DateTime
  userId: String
  visionId: String
  vote: Int
}

input VotesOnVisionMinOrderByAggregateInput {
  createdAt: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  visionId: SortOrder
  vote: SortOrder
}

input VotesOnVisionOrderByRelationAggregateInput {
  _count: SortOrder
}

input VotesOnVisionOrderByWithAggregationInput {
  _avg: VotesOnVisionAvgOrderByAggregateInput
  _count: VotesOnVisionCountOrderByAggregateInput
  _max: VotesOnVisionMaxOrderByAggregateInput
  _min: VotesOnVisionMinOrderByAggregateInput
  _sum: VotesOnVisionSumOrderByAggregateInput
  createdAt: SortOrder
  updatedAt: SortOrder
  userId: SortOrder
  visionId: SortOrder
  vote: SortOrder
}

input VotesOnVisionOrderByWithRelationInput {
  createdAt: SortOrder
  updatedAt: SortOrder
  user: UserOrderByWithRelationInput
  userId: SortOrder
  vision: VisionOrderByWithRelationInput
  visionId: SortOrder
  vote: SortOrder
}

enum VotesOnVisionScalarFieldEnum {
  createdAt
  updatedAt
  userId
  visionId
  vote
}

input VotesOnVisionScalarWhereInput {
  AND: [VotesOnVisionScalarWhereInput!]
  NOT: [VotesOnVisionScalarWhereInput!]
  OR: [VotesOnVisionScalarWhereInput!]
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  userId: StringFilter
  visionId: StringFilter
  vote: IntFilter
}

input VotesOnVisionScalarWhereWithAggregatesInput {
  AND: [VotesOnVisionScalarWhereWithAggregatesInput!]
  NOT: [VotesOnVisionScalarWhereWithAggregatesInput!]
  OR: [VotesOnVisionScalarWhereWithAggregatesInput!]
  createdAt: DateTimeWithAggregatesFilter
  updatedAt: DateTimeWithAggregatesFilter
  userId: StringWithAggregatesFilter
  visionId: StringWithAggregatesFilter
  vote: IntWithAggregatesFilter
}

type VotesOnVisionSumAggregate {
  vote: Int
}

input VotesOnVisionSumOrderByAggregateInput {
  vote: SortOrder
}

input VotesOnVisionUpdateInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutVotesOnVisionInput
  vision: VisionUpdateOneRequiredWithoutVotesOnVisionInput
  vote: IntFieldUpdateOperationsInput
}

input VotesOnVisionUpdateManyMutationInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  vote: IntFieldUpdateOperationsInput
}

input VotesOnVisionUpdateManyWithWhereWithoutUserInput {
  data: VotesOnVisionUpdateManyMutationInput!
  where: VotesOnVisionScalarWhereInput!
}

input VotesOnVisionUpdateManyWithWhereWithoutVisionInput {
  data: VotesOnVisionUpdateManyMutationInput!
  where: VotesOnVisionScalarWhereInput!
}

input VotesOnVisionUpdateManyWithoutUserInput {
  connect: [VotesOnVisionWhereUniqueInput!]
  connectOrCreate: [VotesOnVisionCreateOrConnectWithoutUserInput!]
  create: [VotesOnVisionCreateWithoutUserInput!]
  createMany: VotesOnVisionCreateManyUserInputEnvelope
  delete: [VotesOnVisionWhereUniqueInput!]
  deleteMany: [VotesOnVisionScalarWhereInput!]
  disconnect: [VotesOnVisionWhereUniqueInput!]
  set: [VotesOnVisionWhereUniqueInput!]
  update: [VotesOnVisionUpdateWithWhereUniqueWithoutUserInput!]
  updateMany: [VotesOnVisionUpdateManyWithWhereWithoutUserInput!]
  upsert: [VotesOnVisionUpsertWithWhereUniqueWithoutUserInput!]
}

input VotesOnVisionUpdateManyWithoutVisionInput {
  connect: [VotesOnVisionWhereUniqueInput!]
  connectOrCreate: [VotesOnVisionCreateOrConnectWithoutVisionInput!]
  create: [VotesOnVisionCreateWithoutVisionInput!]
  createMany: VotesOnVisionCreateManyVisionInputEnvelope
  delete: [VotesOnVisionWhereUniqueInput!]
  deleteMany: [VotesOnVisionScalarWhereInput!]
  disconnect: [VotesOnVisionWhereUniqueInput!]
  set: [VotesOnVisionWhereUniqueInput!]
  update: [VotesOnVisionUpdateWithWhereUniqueWithoutVisionInput!]
  updateMany: [VotesOnVisionUpdateManyWithWhereWithoutVisionInput!]
  upsert: [VotesOnVisionUpsertWithWhereUniqueWithoutVisionInput!]
}

input VotesOnVisionUpdateWithWhereUniqueWithoutUserInput {
  data: VotesOnVisionUpdateWithoutUserInput!
  where: VotesOnVisionWhereUniqueInput!
}

input VotesOnVisionUpdateWithWhereUniqueWithoutVisionInput {
  data: VotesOnVisionUpdateWithoutVisionInput!
  where: VotesOnVisionWhereUniqueInput!
}

input VotesOnVisionUpdateWithoutUserInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  vision: VisionUpdateOneRequiredWithoutVotesOnVisionInput
  vote: IntFieldUpdateOperationsInput
}

input VotesOnVisionUpdateWithoutVisionInput {
  createdAt: DateTimeFieldUpdateOperationsInput
  updatedAt: DateTimeFieldUpdateOperationsInput
  user: UserUpdateOneRequiredWithoutVotesOnVisionInput
  vote: IntFieldUpdateOperationsInput
}

input VotesOnVisionUpsertWithWhereUniqueWithoutUserInput {
  create: VotesOnVisionCreateWithoutUserInput!
  update: VotesOnVisionUpdateWithoutUserInput!
  where: VotesOnVisionWhereUniqueInput!
}

input VotesOnVisionUpsertWithWhereUniqueWithoutVisionInput {
  create: VotesOnVisionCreateWithoutVisionInput!
  update: VotesOnVisionUpdateWithoutVisionInput!
  where: VotesOnVisionWhereUniqueInput!
}

input VotesOnVisionUserIdVisionIdCompoundUniqueInput {
  userId: String!
  visionId: String!
}

input VotesOnVisionWhereInput {
  AND: [VotesOnVisionWhereInput!]
  NOT: [VotesOnVisionWhereInput!]
  OR: [VotesOnVisionWhereInput!]
  createdAt: DateTimeFilter
  updatedAt: DateTimeFilter
  user: UserRelationFilter
  userId: StringFilter
  vision: VisionRelationFilter
  visionId: StringFilter
  vote: IntFilter
}

input VotesOnVisionWhereUniqueInput {
  userId_visionId: VotesOnVisionUserIdVisionIdCompoundUniqueInput
}
