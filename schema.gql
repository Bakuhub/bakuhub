# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type Account {
    access_token: String
    expires_at: Int
    id: String!
    id_token: String
    provider: String!
    providerAccountId: String!
    refresh_token: String
    scope: String
    session_state: String
    token_type: String
    type: String!
    user: User!
    userId: String!
}

type AccountAvgAggregate {
    expires_at: Float
}

input AccountAvgOrderByAggregateInput {
    expires_at: SortOrder
}

type AccountCountAggregate {
    _all: Int!
    access_token: Int!
    expires_at: Int!
    id: Int!
    id_token: Int!
    provider: Int!
    providerAccountId: Int!
    refresh_token: Int!
    scope: Int!
    session_state: Int!
    token_type: Int!
    type: Int!
    userId: Int!
}

input AccountCountOrderByAggregateInput {
    access_token: SortOrder
    expires_at: SortOrder
    id: SortOrder
    id_token: SortOrder
    provider: SortOrder
    providerAccountId: SortOrder
    refresh_token: SortOrder
    scope: SortOrder
    session_state: SortOrder
    token_type: SortOrder
    type: SortOrder
    userId: SortOrder
}

input AccountCreateInput {
    access_token: String
    expires_at: Int
    id: String
    id_token: String
    provider: String!
    providerAccountId: String!
    refresh_token: String
    scope: String
    session_state: String
    token_type: String
    type: String!
    user: UserCreateNestedOneWithoutAccountsInput!
}

input AccountCreateManyInput {
    access_token: String
    expires_at: Int
    id: String
    id_token: String
    provider: String!
    providerAccountId: String!
    refresh_token: String
    scope: String
    session_state: String
    token_type: String
    type: String!
    userId: String!
}

input AccountCreateManyUserInput {
    access_token: String
    expires_at: Int
    id: String
    id_token: String
    provider: String!
    providerAccountId: String!
    refresh_token: String
    scope: String
    session_state: String
    token_type: String
    type: String!
}

input AccountCreateManyUserInputEnvelope {
    data: [AccountCreateManyUserInput!]!
    skipDuplicates: Boolean
}

input AccountCreateNestedManyWithoutUserInput {
    connect: [AccountWhereUniqueInput!]
    connectOrCreate: [AccountCreateOrConnectWithoutUserInput!]
    create: [AccountCreateWithoutUserInput!]
    createMany: AccountCreateManyUserInputEnvelope
}

input AccountCreateOrConnectWithoutUserInput {
    create: AccountCreateWithoutUserInput!
    where: AccountWhereUniqueInput!
}

input AccountCreateWithoutUserInput {
    access_token: String
    expires_at: Int
    id: String
    id_token: String
    provider: String!
    providerAccountId: String!
    refresh_token: String
    scope: String
    session_state: String
    token_type: String
    type: String!
}

type AccountGroupBy {
    _avg: AccountAvgAggregate
    _count: AccountCountAggregate
    _max: AccountMaxAggregate
    _min: AccountMinAggregate
    _sum: AccountSumAggregate
    access_token: String
    expires_at: Int
    id: String!
    id_token: String
    provider: String!
    providerAccountId: String!
    refresh_token: String
    scope: String
    session_state: String
    token_type: String
    type: String!
    userId: String!
}

input AccountListRelationFilter {
    every: AccountWhereInput
    none: AccountWhereInput
    some: AccountWhereInput
}

type AccountMaxAggregate {
    access_token: String
    expires_at: Int
    id: String
    id_token: String
    provider: String
    providerAccountId: String
    refresh_token: String
    scope: String
    session_state: String
    token_type: String
    type: String
    userId: String
}

input AccountMaxOrderByAggregateInput {
    access_token: SortOrder
    expires_at: SortOrder
    id: SortOrder
    id_token: SortOrder
    provider: SortOrder
    providerAccountId: SortOrder
    refresh_token: SortOrder
    scope: SortOrder
    session_state: SortOrder
    token_type: SortOrder
    type: SortOrder
    userId: SortOrder
}

type AccountMinAggregate {
    access_token: String
    expires_at: Int
    id: String
    id_token: String
    provider: String
    providerAccountId: String
    refresh_token: String
    scope: String
    session_state: String
    token_type: String
    type: String
    userId: String
}

input AccountMinOrderByAggregateInput {
    access_token: SortOrder
    expires_at: SortOrder
    id: SortOrder
    id_token: SortOrder
    provider: SortOrder
    providerAccountId: SortOrder
    refresh_token: SortOrder
    scope: SortOrder
    session_state: SortOrder
    token_type: SortOrder
    type: SortOrder
    userId: SortOrder
}

input AccountOrderByRelationAggregateInput {
    _count: SortOrder
}

input AccountOrderByWithAggregationInput {
    _avg: AccountAvgOrderByAggregateInput
    _count: AccountCountOrderByAggregateInput
    _max: AccountMaxOrderByAggregateInput
    _min: AccountMinOrderByAggregateInput
    _sum: AccountSumOrderByAggregateInput
    access_token: SortOrder
    expires_at: SortOrder
    id: SortOrder
    id_token: SortOrder
    provider: SortOrder
    providerAccountId: SortOrder
    refresh_token: SortOrder
    scope: SortOrder
    session_state: SortOrder
    token_type: SortOrder
    type: SortOrder
    userId: SortOrder
}

input AccountOrderByWithRelationInput {
    access_token: SortOrder
    expires_at: SortOrder
    id: SortOrder
    id_token: SortOrder
    provider: SortOrder
    providerAccountId: SortOrder
    refresh_token: SortOrder
    scope: SortOrder
    session_state: SortOrder
    token_type: SortOrder
    type: SortOrder
    user: UserOrderByWithRelationInput
    userId: SortOrder
}

input AccountProviderProviderAccountIdCompoundUniqueInput {
    provider: String!
    providerAccountId: String!
}

enum AccountScalarFieldEnum {
    access_token
    expires_at
    id
    id_token
    provider
    providerAccountId
    refresh_token
    scope
    session_state
    token_type
    type
    userId
}

input AccountScalarWhereInput {
    AND: [AccountScalarWhereInput!]
    NOT: [AccountScalarWhereInput!]
    OR: [AccountScalarWhereInput!]
    access_token: StringNullableFilter
    expires_at: IntNullableFilter
    id: StringFilter
    id_token: StringNullableFilter
    provider: StringFilter
    providerAccountId: StringFilter
    refresh_token: StringNullableFilter
    scope: StringNullableFilter
    session_state: StringNullableFilter
    token_type: StringNullableFilter
    type: StringFilter
    userId: StringFilter
}

input AccountScalarWhereWithAggregatesInput {
    AND: [AccountScalarWhereWithAggregatesInput!]
    NOT: [AccountScalarWhereWithAggregatesInput!]
    OR: [AccountScalarWhereWithAggregatesInput!]
    access_token: StringNullableWithAggregatesFilter
    expires_at: IntNullableWithAggregatesFilter
    id: StringWithAggregatesFilter
    id_token: StringNullableWithAggregatesFilter
    provider: StringWithAggregatesFilter
    providerAccountId: StringWithAggregatesFilter
    refresh_token: StringNullableWithAggregatesFilter
    scope: StringNullableWithAggregatesFilter
    session_state: StringNullableWithAggregatesFilter
    token_type: StringNullableWithAggregatesFilter
    type: StringWithAggregatesFilter
    userId: StringWithAggregatesFilter
}

type AccountSumAggregate {
    expires_at: Int
}

input AccountSumOrderByAggregateInput {
    expires_at: SortOrder
}

input AccountUpdateInput {
    access_token: NullableStringFieldUpdateOperationsInput
    expires_at: NullableIntFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    id_token: NullableStringFieldUpdateOperationsInput
    provider: StringFieldUpdateOperationsInput
    providerAccountId: StringFieldUpdateOperationsInput
    refresh_token: NullableStringFieldUpdateOperationsInput
    scope: NullableStringFieldUpdateOperationsInput
    session_state: NullableStringFieldUpdateOperationsInput
    token_type: NullableStringFieldUpdateOperationsInput
    type: StringFieldUpdateOperationsInput
    user: UserUpdateOneRequiredWithoutAccountsInput
}

input AccountUpdateManyMutationInput {
    access_token: NullableStringFieldUpdateOperationsInput
    expires_at: NullableIntFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    id_token: NullableStringFieldUpdateOperationsInput
    provider: StringFieldUpdateOperationsInput
    providerAccountId: StringFieldUpdateOperationsInput
    refresh_token: NullableStringFieldUpdateOperationsInput
    scope: NullableStringFieldUpdateOperationsInput
    session_state: NullableStringFieldUpdateOperationsInput
    token_type: NullableStringFieldUpdateOperationsInput
    type: StringFieldUpdateOperationsInput
}

input AccountUpdateManyWithWhereWithoutUserInput {
    data: AccountUpdateManyMutationInput!
    where: AccountScalarWhereInput!
}

input AccountUpdateManyWithoutUserInput {
    connect: [AccountWhereUniqueInput!]
    connectOrCreate: [AccountCreateOrConnectWithoutUserInput!]
    create: [AccountCreateWithoutUserInput!]
    createMany: AccountCreateManyUserInputEnvelope
    delete: [AccountWhereUniqueInput!]
    deleteMany: [AccountScalarWhereInput!]
    disconnect: [AccountWhereUniqueInput!]
    set: [AccountWhereUniqueInput!]
    update: [AccountUpdateWithWhereUniqueWithoutUserInput!]
    updateMany: [AccountUpdateManyWithWhereWithoutUserInput!]
    upsert: [AccountUpsertWithWhereUniqueWithoutUserInput!]
}

input AccountUpdateWithWhereUniqueWithoutUserInput {
    data: AccountUpdateWithoutUserInput!
    where: AccountWhereUniqueInput!
}

input AccountUpdateWithoutUserInput {
    access_token: NullableStringFieldUpdateOperationsInput
    expires_at: NullableIntFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    id_token: NullableStringFieldUpdateOperationsInput
    provider: StringFieldUpdateOperationsInput
    providerAccountId: StringFieldUpdateOperationsInput
    refresh_token: NullableStringFieldUpdateOperationsInput
    scope: NullableStringFieldUpdateOperationsInput
    session_state: NullableStringFieldUpdateOperationsInput
    token_type: NullableStringFieldUpdateOperationsInput
    type: StringFieldUpdateOperationsInput
}

input AccountUpsertWithWhereUniqueWithoutUserInput {
    create: AccountCreateWithoutUserInput!
    update: AccountUpdateWithoutUserInput!
    where: AccountWhereUniqueInput!
}

input AccountWhereInput {
    AND: [AccountWhereInput!]
    NOT: [AccountWhereInput!]
    OR: [AccountWhereInput!]
    access_token: StringNullableFilter
    expires_at: IntNullableFilter
    id: StringFilter
    id_token: StringNullableFilter
    provider: StringFilter
    providerAccountId: StringFilter
    refresh_token: StringNullableFilter
    scope: StringNullableFilter
    session_state: StringNullableFilter
    token_type: StringNullableFilter
    type: StringFilter
    user: UserRelationFilter
    userId: StringFilter
}

input AccountWhereUniqueInput {
    id: String
    provider_providerAccountId: AccountProviderProviderAccountIdCompoundUniqueInput
}

type AffectedRowsOutput {
    count: Int!
}

type AggregateAccount {
    _avg: AccountAvgAggregate
    _count: AccountCountAggregate
    _max: AccountMaxAggregate
    _min: AccountMinAggregate
    _sum: AccountSumAggregate
}

type AggregateMergeRequest {
    _count: MergeRequestCountAggregate
    _max: MergeRequestMaxAggregate
    _min: MergeRequestMinAggregate
}

type AggregatePremise {
    _count: PremiseCountAggregate
    _max: PremiseMaxAggregate
    _min: PremiseMinAggregate
}

type AggregatePremisesOnTimelines {
    _count: PremisesOnTimelinesCountAggregate
    _max: PremisesOnTimelinesMaxAggregate
    _min: PremisesOnTimelinesMinAggregate
}

type AggregateReactionOnThread {
    _count: ReactionOnThreadCountAggregate
    _max: ReactionOnThreadMaxAggregate
    _min: ReactionOnThreadMinAggregate
}

type AggregateReactionOnTimeline {
    _count: ReactionOnTimelineCountAggregate
    _max: ReactionOnTimelineMaxAggregate
    _min: ReactionOnTimelineMinAggregate
}

type AggregateReactionOnVision {
    _count: ReactionOnVisionCountAggregate
    _max: ReactionOnVisionMaxAggregate
    _min: ReactionOnVisionMinAggregate
}

type AggregateReference {
    _count: ReferenceCountAggregate
    _max: ReferenceMaxAggregate
    _min: ReferenceMinAggregate
}

type AggregateSession {
    _count: SessionCountAggregate
    _max: SessionMaxAggregate
    _min: SessionMinAggregate
}

type AggregateSnapshot {
    _count: SnapshotCountAggregate
    _max: SnapshotMaxAggregate
    _min: SnapshotMinAggregate
}

type AggregateTag {
    _avg: TagAvgAggregate
    _count: TagCountAggregate
    _max: TagMaxAggregate
    _min: TagMinAggregate
    _sum: TagSumAggregate
}

type AggregateTagsOnPremises {
    _avg: TagsOnPremisesAvgAggregate
    _count: TagsOnPremisesCountAggregate
    _max: TagsOnPremisesMaxAggregate
    _min: TagsOnPremisesMinAggregate
    _sum: TagsOnPremisesSumAggregate
}

type AggregateTagsOnTimelines {
    _avg: TagsOnTimelinesAvgAggregate
    _count: TagsOnTimelinesCountAggregate
    _max: TagsOnTimelinesMaxAggregate
    _min: TagsOnTimelinesMinAggregate
    _sum: TagsOnTimelinesSumAggregate
}

type AggregateThread {
    _count: ThreadCountAggregate
    _max: ThreadMaxAggregate
    _min: ThreadMinAggregate
}

type AggregateThreadsOnPremise {
    _count: ThreadsOnPremiseCountAggregate
    _max: ThreadsOnPremiseMaxAggregate
    _min: ThreadsOnPremiseMinAggregate
}

type AggregateThreadsOnTimeline {
    _count: ThreadsOnTimelineCountAggregate
    _max: ThreadsOnTimelineMaxAggregate
    _min: ThreadsOnTimelineMinAggregate
}

type AggregateThreadsOnVision {
    _count: ThreadsOnVisionCountAggregate
    _max: ThreadsOnVisionMaxAggregate
    _min: ThreadsOnVisionMinAggregate
}

type AggregateTimeline {
    _count: TimelineCountAggregate
    _max: TimelineMaxAggregate
    _min: TimelineMinAggregate
}

type AggregateUser {
    _count: UserCountAggregate
    _max: UserMaxAggregate
    _min: UserMinAggregate
}

type AggregateVerificationToken {
    _count: VerificationTokenCountAggregate
    _max: VerificationTokenMaxAggregate
    _min: VerificationTokenMinAggregate
}

type AggregateVision {
    _count: VisionCountAggregate
    _max: VisionMaxAggregate
    _min: VisionMinAggregate
}

input BoolFieldUpdateOperationsInput {
    set: Boolean
}

input BoolFilter {
    equals: Boolean
    not: NestedBoolFilter
}

input BoolWithAggregatesFilter {
    _count: NestedIntFilter
    _max: NestedBoolFilter
    _min: NestedBoolFilter
    equals: Boolean
    not: NestedBoolWithAggregatesFilter
}

"""
The javascript `Date` as string. Type represents date and time as the ISO Date string.
"""
scalar DateTime

input DateTimeFieldUpdateOperationsInput {
    set: DateTime
}

input DateTimeFilter {
    equals: DateTime
    gt: DateTime
    gte: DateTime
    in: [DateTime!]
    lt: DateTime
    lte: DateTime
    not: NestedDateTimeFilter
    notIn: [DateTime!]
}

input DateTimeNullableFilter {
    equals: DateTime
    gt: DateTime
    gte: DateTime
    in: [DateTime!]
    lt: DateTime
    lte: DateTime
    not: NestedDateTimeNullableFilter
    notIn: [DateTime!]
}

input DateTimeNullableWithAggregatesFilter {
    _count: NestedIntNullableFilter
    _max: NestedDateTimeNullableFilter
    _min: NestedDateTimeNullableFilter
    equals: DateTime
    gt: DateTime
    gte: DateTime
    in: [DateTime!]
    lt: DateTime
    lte: DateTime
    not: NestedDateTimeNullableWithAggregatesFilter
    notIn: [DateTime!]
}

input DateTimeWithAggregatesFilter {
    _count: NestedIntFilter
    _max: NestedDateTimeFilter
    _min: NestedDateTimeFilter
    equals: DateTime
    gt: DateTime
    gte: DateTime
    in: [DateTime!]
    lt: DateTime
    lte: DateTime
    not: NestedDateTimeWithAggregatesFilter
    notIn: [DateTime!]
}

input EnumMergeRequestStatusFieldUpdateOperationsInput {
    set: MergeRequestStatus
}

input EnumMergeRequestStatusFilter {
    equals: MergeRequestStatus
    in: [MergeRequestStatus!]
    not: NestedEnumMergeRequestStatusFilter
    notIn: [MergeRequestStatus!]
}

input EnumMergeRequestStatusWithAggregatesFilter {
    _count: NestedIntFilter
    _max: NestedEnumMergeRequestStatusFilter
    _min: NestedEnumMergeRequestStatusFilter
    equals: MergeRequestStatus
    in: [MergeRequestStatus!]
    not: NestedEnumMergeRequestStatusWithAggregatesFilter
    notIn: [MergeRequestStatus!]
}

input EnumPremiseStatusFieldUpdateOperationsInput {
    set: PremiseStatus
}

input EnumPremiseStatusFilter {
    equals: PremiseStatus
    in: [PremiseStatus!]
    not: NestedEnumPremiseStatusFilter
    notIn: [PremiseStatus!]
}

input EnumPremiseStatusWithAggregatesFilter {
    _count: NestedIntFilter
    _max: NestedEnumPremiseStatusFilter
    _min: NestedEnumPremiseStatusFilter
    equals: PremiseStatus
    in: [PremiseStatus!]
    not: NestedEnumPremiseStatusWithAggregatesFilter
    notIn: [PremiseStatus!]
}

input EnumReactionFieldUpdateOperationsInput {
    set: Reaction
}

input EnumReactionFilter {
    equals: Reaction
    in: [Reaction!]
    not: NestedEnumReactionFilter
    notIn: [Reaction!]
}

input EnumReactionWithAggregatesFilter {
    _count: NestedIntFilter
    _max: NestedEnumReactionFilter
    _min: NestedEnumReactionFilter
    equals: Reaction
    in: [Reaction!]
    not: NestedEnumReactionWithAggregatesFilter
    notIn: [Reaction!]
}

input IntFilter {
    equals: Int
    gt: Int
    gte: Int
    in: [Int!]
    lt: Int
    lte: Int
    not: NestedIntFilter
    notIn: [Int!]
}

input IntNullableFilter {
    equals: Int
    gt: Int
    gte: Int
    in: [Int!]
    lt: Int
    lte: Int
    not: NestedIntNullableFilter
    notIn: [Int!]
}

input IntNullableWithAggregatesFilter {
    _avg: NestedFloatNullableFilter
    _count: NestedIntNullableFilter
    _max: NestedIntNullableFilter
    _min: NestedIntNullableFilter
    _sum: NestedIntNullableFilter
    equals: Int
    gt: Int
    gte: Int
    in: [Int!]
    lt: Int
    lte: Int
    not: NestedIntNullableWithAggregatesFilter
    notIn: [Int!]
}

input IntWithAggregatesFilter {
    _avg: NestedFloatFilter
    _count: NestedIntFilter
    _max: NestedIntFilter
    _min: NestedIntFilter
    _sum: NestedIntFilter
    equals: Int
    gt: Int
    gte: Int
    in: [Int!]
    lt: Int
    lte: Int
    not: NestedIntWithAggregatesFilter
    notIn: [Int!]
}

type MergeRequest {
    description: String
    id: String!
    status: MergeRequestStatus!
    title: String!
    vision: Vision!
    visionId: String!
}

type MergeRequestCountAggregate {
    _all: Int!
    description: Int!
    id: Int!
    status: Int!
    title: Int!
    visionId: Int!
}

input MergeRequestCountOrderByAggregateInput {
    description: SortOrder
    id: SortOrder
    status: SortOrder
    title: SortOrder
    visionId: SortOrder
}

input MergeRequestCreateInput {
    description: String
    id: String
    status: MergeRequestStatus
    title: String!
    vision: VisionCreateNestedOneWithoutMergeRequestInput!
}

input MergeRequestCreateManyInput {
    description: String
    id: String
    status: MergeRequestStatus
    title: String!
    visionId: String!
}

input MergeRequestCreateNestedOneWithoutVisionInput {
    connect: MergeRequestWhereUniqueInput
    connectOrCreate: MergeRequestCreateOrConnectWithoutVisionInput
    create: MergeRequestCreateWithoutVisionInput
}

input MergeRequestCreateOrConnectWithoutVisionInput {
    create: MergeRequestCreateWithoutVisionInput!
    where: MergeRequestWhereUniqueInput!
}

input MergeRequestCreateWithoutVisionInput {
    description: String
    id: String
    status: MergeRequestStatus
    title: String!
}

type MergeRequestGroupBy {
    _count: MergeRequestCountAggregate
    _max: MergeRequestMaxAggregate
    _min: MergeRequestMinAggregate
    description: String
    id: String!
    status: MergeRequestStatus!
    title: String!
    visionId: String!
}

type MergeRequestMaxAggregate {
    description: String
    id: String
    status: MergeRequestStatus
    title: String
    visionId: String
}

input MergeRequestMaxOrderByAggregateInput {
    description: SortOrder
    id: SortOrder
    status: SortOrder
    title: SortOrder
    visionId: SortOrder
}

type MergeRequestMinAggregate {
    description: String
    id: String
    status: MergeRequestStatus
    title: String
    visionId: String
}

input MergeRequestMinOrderByAggregateInput {
    description: SortOrder
    id: SortOrder
    status: SortOrder
    title: SortOrder
    visionId: SortOrder
}

input MergeRequestOrderByWithAggregationInput {
    _count: MergeRequestCountOrderByAggregateInput
    _max: MergeRequestMaxOrderByAggregateInput
    _min: MergeRequestMinOrderByAggregateInput
    description: SortOrder
    id: SortOrder
    status: SortOrder
    title: SortOrder
    visionId: SortOrder
}

input MergeRequestOrderByWithRelationInput {
    description: SortOrder
    id: SortOrder
    status: SortOrder
    title: SortOrder
    vision: VisionOrderByWithRelationInput
    visionId: SortOrder
}

input MergeRequestRelationFilter {
    is: MergeRequestWhereInput
    isNot: MergeRequestWhereInput
}

enum MergeRequestScalarFieldEnum {
    description
    id
    status
    title
    visionId
}

input MergeRequestScalarWhereWithAggregatesInput {
    AND: [MergeRequestScalarWhereWithAggregatesInput!]
    NOT: [MergeRequestScalarWhereWithAggregatesInput!]
    OR: [MergeRequestScalarWhereWithAggregatesInput!]
    description: StringNullableWithAggregatesFilter
    id: StringWithAggregatesFilter
    status: EnumMergeRequestStatusWithAggregatesFilter
    title: StringWithAggregatesFilter
    visionId: StringWithAggregatesFilter
}

enum MergeRequestStatus {
    CLOSE
    MERGED
    OPEN
}

input MergeRequestUpdateInput {
    description: NullableStringFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    status: EnumMergeRequestStatusFieldUpdateOperationsInput
    title: StringFieldUpdateOperationsInput
    vision: VisionUpdateOneRequiredWithoutMergeRequestInput
}

input MergeRequestUpdateManyMutationInput {
    description: NullableStringFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    status: EnumMergeRequestStatusFieldUpdateOperationsInput
    title: StringFieldUpdateOperationsInput
}

input MergeRequestUpdateOneWithoutVisionInput {
    connect: MergeRequestWhereUniqueInput
    connectOrCreate: MergeRequestCreateOrConnectWithoutVisionInput
    create: MergeRequestCreateWithoutVisionInput
    delete: Boolean
    disconnect: Boolean
    update: MergeRequestUpdateWithoutVisionInput
    upsert: MergeRequestUpsertWithoutVisionInput
}

input MergeRequestUpdateWithoutVisionInput {
    description: NullableStringFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    status: EnumMergeRequestStatusFieldUpdateOperationsInput
    title: StringFieldUpdateOperationsInput
}

input MergeRequestUpsertWithoutVisionInput {
    create: MergeRequestCreateWithoutVisionInput!
    update: MergeRequestUpdateWithoutVisionInput!
}

input MergeRequestWhereInput {
    AND: [MergeRequestWhereInput!]
    NOT: [MergeRequestWhereInput!]
    OR: [MergeRequestWhereInput!]
    description: StringNullableFilter
    id: StringFilter
    status: EnumMergeRequestStatusFilter
    title: StringFilter
    vision: VisionRelationFilter
    visionId: StringFilter
}

input MergeRequestWhereUniqueInput {
    id: String
    visionId: String
}

type Mutation {
    createAccount(data: AccountCreateInput!): Account!
    createManyAccount(data: [AccountCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
    createManyMergeRequest(data: [MergeRequestCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
    createManyPremise(data: [PremiseCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
    createManyPremisesOnTimelines(data: [PremisesOnTimelinesCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
    createManyReactionOnThread(data: [ReactionOnThreadCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
    createManyReactionOnTimeline(data: [ReactionOnTimelineCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
    createManyReactionOnVision(data: [ReactionOnVisionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
    createManyReference(data: [ReferenceCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
    createManySession(data: [SessionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
    createManySnapshot(data: [SnapshotCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
    createManyTag(data: [TagCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
    createManyTagsOnPremises(data: [TagsOnPremisesCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
    createManyTagsOnTimelines(data: [TagsOnTimelinesCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
    createManyThread(data: [ThreadCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
    createManyThreadsOnPremise(data: [ThreadsOnPremiseCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
    createManyThreadsOnTimeline(data: [ThreadsOnTimelineCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
    createManyThreadsOnVision(data: [ThreadsOnVisionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
    createManyTimeline(data: [TimelineCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
    createManyUser(data: [UserCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
    createManyVerificationToken(data: [VerificationTokenCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
    createManyVision(data: [VisionCreateManyInput!]!, skipDuplicates: Boolean): AffectedRowsOutput!
    createMergeRequest(data: MergeRequestCreateInput!): MergeRequest!
    createPremise(data: PremiseCreateInput!): Premise!
    createPremisesOnTimelines(data: PremisesOnTimelinesCreateInput!): PremisesOnTimelines!
    createReactionOnThread(data: ReactionOnThreadCreateInput!): ReactionOnThread!
    createReactionOnTimeline(data: ReactionOnTimelineCreateInput!): ReactionOnTimeline!
    createReactionOnVision(data: ReactionOnVisionCreateInput!): ReactionOnVision!
    createReference(data: ReferenceCreateInput!): Reference!
    createSession(data: SessionCreateInput!): Session!
    createSnapshot(data: SnapshotCreateInput!): Snapshot!
    createTag(data: TagCreateInput!): Tag!
    createTagsOnPremises(data: TagsOnPremisesCreateInput!): TagsOnPremises!
    createTagsOnTimelines(data: TagsOnTimelinesCreateInput!): TagsOnTimelines!
    createThread(data: ThreadCreateInput!): Thread!
    createThreadsOnPremise(data: ThreadsOnPremiseCreateInput!): ThreadsOnPremise!
    createThreadsOnTimeline(data: ThreadsOnTimelineCreateInput!): ThreadsOnTimeline!
    createThreadsOnVision(data: ThreadsOnVisionCreateInput!): ThreadsOnVision!
    createTimeline(data: TimelineCreateInput!): Timeline!
    createUser(data: UserCreateInput!): User!
    createVerificationToken(data: VerificationTokenCreateInput!): VerificationToken!
    createVision(data: VisionCreateInput!): Vision!
    deleteAccount(where: AccountWhereUniqueInput!): Account
    deleteManyAccount(where: AccountWhereInput): AffectedRowsOutput!
    deleteManyMergeRequest(where: MergeRequestWhereInput): AffectedRowsOutput!
    deleteManyPremise(where: PremiseWhereInput): AffectedRowsOutput!
    deleteManyPremisesOnTimelines(where: PremisesOnTimelinesWhereInput): AffectedRowsOutput!
    deleteManyReactionOnThread(where: ReactionOnThreadWhereInput): AffectedRowsOutput!
    deleteManyReactionOnTimeline(where: ReactionOnTimelineWhereInput): AffectedRowsOutput!
    deleteManyReactionOnVision(where: ReactionOnVisionWhereInput): AffectedRowsOutput!
    deleteManyReference(where: ReferenceWhereInput): AffectedRowsOutput!
    deleteManySession(where: SessionWhereInput): AffectedRowsOutput!
    deleteManySnapshot(where: SnapshotWhereInput): AffectedRowsOutput!
    deleteManyTag(where: TagWhereInput): AffectedRowsOutput!
    deleteManyTagsOnPremises(where: TagsOnPremisesWhereInput): AffectedRowsOutput!
    deleteManyTagsOnTimelines(where: TagsOnTimelinesWhereInput): AffectedRowsOutput!
    deleteManyThread(where: ThreadWhereInput): AffectedRowsOutput!
    deleteManyThreadsOnPremise(where: ThreadsOnPremiseWhereInput): AffectedRowsOutput!
    deleteManyThreadsOnTimeline(where: ThreadsOnTimelineWhereInput): AffectedRowsOutput!
    deleteManyThreadsOnVision(where: ThreadsOnVisionWhereInput): AffectedRowsOutput!
    deleteManyTimeline(where: TimelineWhereInput): AffectedRowsOutput!
    deleteManyUser(where: UserWhereInput): AffectedRowsOutput!
    deleteManyVerificationToken(where: VerificationTokenWhereInput): AffectedRowsOutput!
    deleteManyVision(where: VisionWhereInput): AffectedRowsOutput!
    deleteMergeRequest(where: MergeRequestWhereUniqueInput!): MergeRequest
    deletePremise(where: PremiseWhereUniqueInput!): Premise
    deletePremisesOnTimelines(where: PremisesOnTimelinesWhereUniqueInput!): PremisesOnTimelines
    deleteReactionOnThread(where: ReactionOnThreadWhereUniqueInput!): ReactionOnThread
    deleteReactionOnTimeline(where: ReactionOnTimelineWhereUniqueInput!): ReactionOnTimeline
    deleteReactionOnVision(where: ReactionOnVisionWhereUniqueInput!): ReactionOnVision
    deleteReference(where: ReferenceWhereUniqueInput!): Reference
    deleteSession(where: SessionWhereUniqueInput!): Session
    deleteSnapshot(where: SnapshotWhereUniqueInput!): Snapshot
    deleteTag(where: TagWhereUniqueInput!): Tag
    deleteTagsOnPremises(where: TagsOnPremisesWhereUniqueInput!): TagsOnPremises
    deleteTagsOnTimelines(where: TagsOnTimelinesWhereUniqueInput!): TagsOnTimelines
    deleteThread(where: ThreadWhereUniqueInput!): Thread
    deleteThreadsOnPremise(where: ThreadsOnPremiseWhereUniqueInput!): ThreadsOnPremise
    deleteThreadsOnTimeline(where: ThreadsOnTimelineWhereUniqueInput!): ThreadsOnTimeline
    deleteThreadsOnVision(where: ThreadsOnVisionWhereUniqueInput!): ThreadsOnVision
    deleteTimeline(where: TimelineWhereUniqueInput!): Timeline
    deleteUser(where: UserWhereUniqueInput!): User
    deleteVerificationToken(where: VerificationTokenWhereUniqueInput!): VerificationToken
    deleteVision(where: VisionWhereUniqueInput!): Vision
    updateAccount(data: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account
    updateManyAccount(data: AccountUpdateManyMutationInput!, where: AccountWhereInput): AffectedRowsOutput!
    updateManyMergeRequest(data: MergeRequestUpdateManyMutationInput!, where: MergeRequestWhereInput): AffectedRowsOutput!
    updateManyPremise(data: PremiseUpdateManyMutationInput!, where: PremiseWhereInput): AffectedRowsOutput!
    updateManyPremisesOnTimelines(data: PremisesOnTimelinesUpdateManyMutationInput!, where: PremisesOnTimelinesWhereInput): AffectedRowsOutput!
    updateManyReactionOnThread(data: ReactionOnThreadUpdateManyMutationInput!, where: ReactionOnThreadWhereInput): AffectedRowsOutput!
    updateManyReactionOnTimeline(data: ReactionOnTimelineUpdateManyMutationInput!, where: ReactionOnTimelineWhereInput): AffectedRowsOutput!
    updateManyReactionOnVision(data: ReactionOnVisionUpdateManyMutationInput!, where: ReactionOnVisionWhereInput): AffectedRowsOutput!
    updateManyReference(data: ReferenceUpdateManyMutationInput!, where: ReferenceWhereInput): AffectedRowsOutput!
    updateManySession(data: SessionUpdateManyMutationInput!, where: SessionWhereInput): AffectedRowsOutput!
    updateManySnapshot(data: SnapshotUpdateManyMutationInput!, where: SnapshotWhereInput): AffectedRowsOutput!
    updateManyTag(data: TagUpdateManyMutationInput!, where: TagWhereInput): AffectedRowsOutput!
    updateManyTagsOnPremises(data: TagsOnPremisesUpdateManyMutationInput!, where: TagsOnPremisesWhereInput): AffectedRowsOutput!
    updateManyTagsOnTimelines(data: TagsOnTimelinesUpdateManyMutationInput!, where: TagsOnTimelinesWhereInput): AffectedRowsOutput!
    updateManyThread(data: ThreadUpdateManyMutationInput!, where: ThreadWhereInput): AffectedRowsOutput!
    updateManyThreadsOnPremise(data: ThreadsOnPremiseUpdateManyMutationInput!, where: ThreadsOnPremiseWhereInput): AffectedRowsOutput!
    updateManyThreadsOnTimeline(data: ThreadsOnTimelineUpdateManyMutationInput!, where: ThreadsOnTimelineWhereInput): AffectedRowsOutput!
    updateManyThreadsOnVision(data: ThreadsOnVisionUpdateManyMutationInput!, where: ThreadsOnVisionWhereInput): AffectedRowsOutput!
    updateManyTimeline(data: TimelineUpdateManyMutationInput!, where: TimelineWhereInput): AffectedRowsOutput!
    updateManyUser(data: UserUpdateManyMutationInput!, where: UserWhereInput): AffectedRowsOutput!
    updateManyVerificationToken(data: VerificationTokenUpdateManyMutationInput!, where: VerificationTokenWhereInput): AffectedRowsOutput!
    updateManyVision(data: VisionUpdateManyMutationInput!, where: VisionWhereInput): AffectedRowsOutput!
    updateMergeRequest(data: MergeRequestUpdateInput!, where: MergeRequestWhereUniqueInput!): MergeRequest
    updatePremise(data: PremiseUpdateInput!, where: PremiseWhereUniqueInput!): Premise
    updatePremisesOnTimelines(data: PremisesOnTimelinesUpdateInput!, where: PremisesOnTimelinesWhereUniqueInput!): PremisesOnTimelines
    updateReactionOnThread(data: ReactionOnThreadUpdateInput!, where: ReactionOnThreadWhereUniqueInput!): ReactionOnThread
    updateReactionOnTimeline(data: ReactionOnTimelineUpdateInput!, where: ReactionOnTimelineWhereUniqueInput!): ReactionOnTimeline
    updateReactionOnVision(data: ReactionOnVisionUpdateInput!, where: ReactionOnVisionWhereUniqueInput!): ReactionOnVision
    updateReference(data: ReferenceUpdateInput!, where: ReferenceWhereUniqueInput!): Reference
    updateSession(data: SessionUpdateInput!, where: SessionWhereUniqueInput!): Session
    updateSnapshot(data: SnapshotUpdateInput!, where: SnapshotWhereUniqueInput!): Snapshot
    updateTag(data: TagUpdateInput!, where: TagWhereUniqueInput!): Tag
    updateTagsOnPremises(data: TagsOnPremisesUpdateInput!, where: TagsOnPremisesWhereUniqueInput!): TagsOnPremises
    updateTagsOnTimelines(data: TagsOnTimelinesUpdateInput!, where: TagsOnTimelinesWhereUniqueInput!): TagsOnTimelines
    updateThread(data: ThreadUpdateInput!, where: ThreadWhereUniqueInput!): Thread
    updateThreadsOnPremise(data: ThreadsOnPremiseUpdateInput!, where: ThreadsOnPremiseWhereUniqueInput!): ThreadsOnPremise
    updateThreadsOnTimeline(data: ThreadsOnTimelineUpdateInput!, where: ThreadsOnTimelineWhereUniqueInput!): ThreadsOnTimeline
    updateThreadsOnVision(data: ThreadsOnVisionUpdateInput!, where: ThreadsOnVisionWhereUniqueInput!): ThreadsOnVision
    updateTimeline(data: TimelineUpdateInput!, where: TimelineWhereUniqueInput!): Timeline
    updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
    updateVerificationToken(data: VerificationTokenUpdateInput!, where: VerificationTokenWhereUniqueInput!): VerificationToken
    updateVision(data: VisionUpdateInput!, where: VisionWhereUniqueInput!): Vision
    upsertAccount(create: AccountCreateInput!, update: AccountUpdateInput!, where: AccountWhereUniqueInput!): Account!
    upsertMergeRequest(create: MergeRequestCreateInput!, update: MergeRequestUpdateInput!, where: MergeRequestWhereUniqueInput!): MergeRequest!
    upsertPremise(create: PremiseCreateInput!, update: PremiseUpdateInput!, where: PremiseWhereUniqueInput!): Premise!
    upsertPremisesOnTimelines(create: PremisesOnTimelinesCreateInput!, update: PremisesOnTimelinesUpdateInput!, where: PremisesOnTimelinesWhereUniqueInput!): PremisesOnTimelines!
    upsertReactionOnThread(create: ReactionOnThreadCreateInput!, update: ReactionOnThreadUpdateInput!, where: ReactionOnThreadWhereUniqueInput!): ReactionOnThread!
    upsertReactionOnTimeline(create: ReactionOnTimelineCreateInput!, update: ReactionOnTimelineUpdateInput!, where: ReactionOnTimelineWhereUniqueInput!): ReactionOnTimeline!
    upsertReactionOnVision(create: ReactionOnVisionCreateInput!, update: ReactionOnVisionUpdateInput!, where: ReactionOnVisionWhereUniqueInput!): ReactionOnVision!
    upsertReference(create: ReferenceCreateInput!, update: ReferenceUpdateInput!, where: ReferenceWhereUniqueInput!): Reference!
    upsertSession(create: SessionCreateInput!, update: SessionUpdateInput!, where: SessionWhereUniqueInput!): Session!
    upsertSnapshot(create: SnapshotCreateInput!, update: SnapshotUpdateInput!, where: SnapshotWhereUniqueInput!): Snapshot!
    upsertTag(create: TagCreateInput!, update: TagUpdateInput!, where: TagWhereUniqueInput!): Tag!
    upsertTagsOnPremises(create: TagsOnPremisesCreateInput!, update: TagsOnPremisesUpdateInput!, where: TagsOnPremisesWhereUniqueInput!): TagsOnPremises!
    upsertTagsOnTimelines(create: TagsOnTimelinesCreateInput!, update: TagsOnTimelinesUpdateInput!, where: TagsOnTimelinesWhereUniqueInput!): TagsOnTimelines!
    upsertThread(create: ThreadCreateInput!, update: ThreadUpdateInput!, where: ThreadWhereUniqueInput!): Thread!
    upsertThreadsOnPremise(create: ThreadsOnPremiseCreateInput!, update: ThreadsOnPremiseUpdateInput!, where: ThreadsOnPremiseWhereUniqueInput!): ThreadsOnPremise!
    upsertThreadsOnTimeline(create: ThreadsOnTimelineCreateInput!, update: ThreadsOnTimelineUpdateInput!, where: ThreadsOnTimelineWhereUniqueInput!): ThreadsOnTimeline!
    upsertThreadsOnVision(create: ThreadsOnVisionCreateInput!, update: ThreadsOnVisionUpdateInput!, where: ThreadsOnVisionWhereUniqueInput!): ThreadsOnVision!
    upsertTimeline(create: TimelineCreateInput!, update: TimelineUpdateInput!, where: TimelineWhereUniqueInput!): Timeline!
    upsertUser(create: UserCreateInput!, update: UserUpdateInput!, where: UserWhereUniqueInput!): User!
    upsertVerificationToken(create: VerificationTokenCreateInput!, update: VerificationTokenUpdateInput!, where: VerificationTokenWhereUniqueInput!): VerificationToken!
    upsertVision(create: VisionCreateInput!, update: VisionUpdateInput!, where: VisionWhereUniqueInput!): Vision!
}

input NestedBoolFilter {
    equals: Boolean
    not: NestedBoolFilter
}

input NestedBoolWithAggregatesFilter {
    _count: NestedIntFilter
    _max: NestedBoolFilter
    _min: NestedBoolFilter
    equals: Boolean
    not: NestedBoolWithAggregatesFilter
}

input NestedDateTimeFilter {
    equals: DateTime
    gt: DateTime
    gte: DateTime
    in: [DateTime!]
    lt: DateTime
    lte: DateTime
    not: NestedDateTimeFilter
    notIn: [DateTime!]
}

input NestedDateTimeNullableFilter {
    equals: DateTime
    gt: DateTime
    gte: DateTime
    in: [DateTime!]
    lt: DateTime
    lte: DateTime
    not: NestedDateTimeNullableFilter
    notIn: [DateTime!]
}

input NestedDateTimeNullableWithAggregatesFilter {
    _count: NestedIntNullableFilter
    _max: NestedDateTimeNullableFilter
    _min: NestedDateTimeNullableFilter
    equals: DateTime
    gt: DateTime
    gte: DateTime
    in: [DateTime!]
    lt: DateTime
    lte: DateTime
    not: NestedDateTimeNullableWithAggregatesFilter
    notIn: [DateTime!]
}

input NestedDateTimeWithAggregatesFilter {
    _count: NestedIntFilter
    _max: NestedDateTimeFilter
    _min: NestedDateTimeFilter
    equals: DateTime
    gt: DateTime
    gte: DateTime
    in: [DateTime!]
    lt: DateTime
    lte: DateTime
    not: NestedDateTimeWithAggregatesFilter
    notIn: [DateTime!]
}

input NestedEnumMergeRequestStatusFilter {
    equals: MergeRequestStatus
    in: [MergeRequestStatus!]
    not: NestedEnumMergeRequestStatusFilter
    notIn: [MergeRequestStatus!]
}

input NestedEnumMergeRequestStatusWithAggregatesFilter {
    _count: NestedIntFilter
    _max: NestedEnumMergeRequestStatusFilter
    _min: NestedEnumMergeRequestStatusFilter
    equals: MergeRequestStatus
    in: [MergeRequestStatus!]
    not: NestedEnumMergeRequestStatusWithAggregatesFilter
    notIn: [MergeRequestStatus!]
}

input NestedEnumPremiseStatusFilter {
    equals: PremiseStatus
    in: [PremiseStatus!]
    not: NestedEnumPremiseStatusFilter
    notIn: [PremiseStatus!]
}

input NestedEnumPremiseStatusWithAggregatesFilter {
    _count: NestedIntFilter
    _max: NestedEnumPremiseStatusFilter
    _min: NestedEnumPremiseStatusFilter
    equals: PremiseStatus
    in: [PremiseStatus!]
    not: NestedEnumPremiseStatusWithAggregatesFilter
    notIn: [PremiseStatus!]
}

input NestedEnumReactionFilter {
    equals: Reaction
    in: [Reaction!]
    not: NestedEnumReactionFilter
    notIn: [Reaction!]
}

input NestedEnumReactionWithAggregatesFilter {
    _count: NestedIntFilter
    _max: NestedEnumReactionFilter
    _min: NestedEnumReactionFilter
    equals: Reaction
    in: [Reaction!]
    not: NestedEnumReactionWithAggregatesFilter
    notIn: [Reaction!]
}

input NestedFloatFilter {
    equals: Float
    gt: Float
    gte: Float
    in: [Float!]
    lt: Float
    lte: Float
    not: NestedFloatFilter
    notIn: [Float!]
}

input NestedFloatNullableFilter {
    equals: Float
    gt: Float
    gte: Float
    in: [Float!]
    lt: Float
    lte: Float
    not: NestedFloatNullableFilter
    notIn: [Float!]
}

input NestedIntFilter {
    equals: Int
    gt: Int
    gte: Int
    in: [Int!]
    lt: Int
    lte: Int
    not: NestedIntFilter
    notIn: [Int!]
}

input NestedIntNullableFilter {
    equals: Int
    gt: Int
    gte: Int
    in: [Int!]
    lt: Int
    lte: Int
    not: NestedIntNullableFilter
    notIn: [Int!]
}

input NestedIntNullableWithAggregatesFilter {
    _avg: NestedFloatNullableFilter
    _count: NestedIntNullableFilter
    _max: NestedIntNullableFilter
    _min: NestedIntNullableFilter
    _sum: NestedIntNullableFilter
    equals: Int
    gt: Int
    gte: Int
    in: [Int!]
    lt: Int
    lte: Int
    not: NestedIntNullableWithAggregatesFilter
    notIn: [Int!]
}

input NestedIntWithAggregatesFilter {
    _avg: NestedFloatFilter
    _count: NestedIntFilter
    _max: NestedIntFilter
    _min: NestedIntFilter
    _sum: NestedIntFilter
    equals: Int
    gt: Int
    gte: Int
    in: [Int!]
    lt: Int
    lte: Int
    not: NestedIntWithAggregatesFilter
    notIn: [Int!]
}

input NestedStringFilter {
    contains: String
    endsWith: String
    equals: String
    gt: String
    gte: String
    in: [String!]
    lt: String
    lte: String
    not: NestedStringFilter
    notIn: [String!]
    startsWith: String
}

input NestedStringNullableFilter {
    contains: String
    endsWith: String
    equals: String
    gt: String
    gte: String
    in: [String!]
    lt: String
    lte: String
    not: NestedStringNullableFilter
    notIn: [String!]
    startsWith: String
}

input NestedStringNullableWithAggregatesFilter {
    _count: NestedIntNullableFilter
    _max: NestedStringNullableFilter
    _min: NestedStringNullableFilter
    contains: String
    endsWith: String
    equals: String
    gt: String
    gte: String
    in: [String!]
    lt: String
    lte: String
    not: NestedStringNullableWithAggregatesFilter
    notIn: [String!]
    startsWith: String
}

input NestedStringWithAggregatesFilter {
    _count: NestedIntFilter
    _max: NestedStringFilter
    _min: NestedStringFilter
    contains: String
    endsWith: String
    equals: String
    gt: String
    gte: String
    in: [String!]
    lt: String
    lte: String
    not: NestedStringWithAggregatesFilter
    notIn: [String!]
    startsWith: String
}

input NullableDateTimeFieldUpdateOperationsInput {
    set: DateTime
}

input NullableIntFieldUpdateOperationsInput {
    decrement: Int
    divide: Int
    increment: Int
    multiply: Int
    set: Int
}

input NullableStringFieldUpdateOperationsInput {
    set: String
}

type Premise {
    _count: PremiseCount
    author: User
    authorId: String
    createdAt: DateTime!
    id: String!
    premisesOnTimelines(cursor: PremisesOnTimelinesWhereUniqueInput, distinct: [PremisesOnTimelinesScalarFieldEnum!], orderBy: [PremisesOnTimelinesOrderByWithRelationInput!], skip: Int, take: Int, where: PremisesOnTimelinesWhereInput): [PremisesOnTimelines!]!
    status: PremiseStatus!
    tagsOnPremises(cursor: TagsOnPremisesWhereUniqueInput, distinct: [TagsOnPremisesScalarFieldEnum!], orderBy: [TagsOnPremisesOrderByWithRelationInput!], skip: Int, take: Int, where: TagsOnPremisesWhereInput): [TagsOnPremises!]!
    threadsOnPremise(cursor: ThreadsOnPremiseWhereUniqueInput, distinct: [ThreadsOnPremiseScalarFieldEnum!], orderBy: [ThreadsOnPremiseOrderByWithRelationInput!], skip: Int, take: Int, where: ThreadsOnPremiseWhereInput): [ThreadsOnPremise!]!
    title: String!
    updatedAt: DateTime
    vision(cursor: VisionWhereUniqueInput, distinct: [VisionScalarFieldEnum!], orderBy: [VisionOrderByWithRelationInput!], skip: Int, take: Int, where: VisionWhereInput): [Vision!]!
}

type PremiseCount {
    premisesOnTimelines: Int!
    tagsOnPremises: Int!
    threadsOnPremise: Int!
    vision: Int!
}

type PremiseCountAggregate {
    _all: Int!
    authorId: Int!
    createdAt: Int!
    id: Int!
    status: Int!
    title: Int!
    updatedAt: Int!
}

input PremiseCountOrderByAggregateInput {
    authorId: SortOrder
    createdAt: SortOrder
    id: SortOrder
    status: SortOrder
    title: SortOrder
    updatedAt: SortOrder
}

input PremiseCreateInput {
    author: UserCreateNestedOneWithoutPremisesInput
    createdAt: DateTime
    id: String
    premisesOnTimelines: PremisesOnTimelinesCreateNestedManyWithoutPremiseInput
    status: PremiseStatus!
    tagsOnPremises: TagsOnPremisesCreateNestedManyWithoutPremiseInput
    threadsOnPremise: ThreadsOnPremiseCreateNestedManyWithoutPremiseInput
    title: String!
    updatedAt: DateTime
    vision: VisionCreateNestedManyWithoutPremiseInput
}

input PremiseCreateManyAuthorInput {
    createdAt: DateTime
    id: String
    status: PremiseStatus!
    title: String!
    updatedAt: DateTime
}

input PremiseCreateManyAuthorInputEnvelope {
    data: [PremiseCreateManyAuthorInput!]!
    skipDuplicates: Boolean
}

input PremiseCreateManyInput {
    authorId: String
    createdAt: DateTime
    id: String
    status: PremiseStatus!
    title: String!
    updatedAt: DateTime
}

input PremiseCreateNestedManyWithoutAuthorInput {
    connect: [PremiseWhereUniqueInput!]
    connectOrCreate: [PremiseCreateOrConnectWithoutAuthorInput!]
    create: [PremiseCreateWithoutAuthorInput!]
    createMany: PremiseCreateManyAuthorInputEnvelope
}

input PremiseCreateNestedOneWithoutPremisesOnTimelinesInput {
    connect: PremiseWhereUniqueInput
    connectOrCreate: PremiseCreateOrConnectWithoutPremisesOnTimelinesInput
    create: PremiseCreateWithoutPremisesOnTimelinesInput
}

input PremiseCreateNestedOneWithoutTagsOnPremisesInput {
    connect: PremiseWhereUniqueInput
    connectOrCreate: PremiseCreateOrConnectWithoutTagsOnPremisesInput
    create: PremiseCreateWithoutTagsOnPremisesInput
}

input PremiseCreateNestedOneWithoutThreadsOnPremiseInput {
    connect: PremiseWhereUniqueInput
    connectOrCreate: PremiseCreateOrConnectWithoutThreadsOnPremiseInput
    create: PremiseCreateWithoutThreadsOnPremiseInput
}

input PremiseCreateNestedOneWithoutVisionInput {
    connect: PremiseWhereUniqueInput
    connectOrCreate: PremiseCreateOrConnectWithoutVisionInput
    create: PremiseCreateWithoutVisionInput
}

input PremiseCreateOrConnectWithoutAuthorInput {
    create: PremiseCreateWithoutAuthorInput!
    where: PremiseWhereUniqueInput!
}

input PremiseCreateOrConnectWithoutPremisesOnTimelinesInput {
    create: PremiseCreateWithoutPremisesOnTimelinesInput!
    where: PremiseWhereUniqueInput!
}

input PremiseCreateOrConnectWithoutTagsOnPremisesInput {
    create: PremiseCreateWithoutTagsOnPremisesInput!
    where: PremiseWhereUniqueInput!
}

input PremiseCreateOrConnectWithoutThreadsOnPremiseInput {
    create: PremiseCreateWithoutThreadsOnPremiseInput!
    where: PremiseWhereUniqueInput!
}

input PremiseCreateOrConnectWithoutVisionInput {
    create: PremiseCreateWithoutVisionInput!
    where: PremiseWhereUniqueInput!
}

input PremiseCreateWithoutAuthorInput {
    createdAt: DateTime
    id: String
    premisesOnTimelines: PremisesOnTimelinesCreateNestedManyWithoutPremiseInput
    status: PremiseStatus!
    tagsOnPremises: TagsOnPremisesCreateNestedManyWithoutPremiseInput
    threadsOnPremise: ThreadsOnPremiseCreateNestedManyWithoutPremiseInput
    title: String!
    updatedAt: DateTime
    vision: VisionCreateNestedManyWithoutPremiseInput
}

input PremiseCreateWithoutPremisesOnTimelinesInput {
    author: UserCreateNestedOneWithoutPremisesInput
    createdAt: DateTime
    id: String
    status: PremiseStatus!
    tagsOnPremises: TagsOnPremisesCreateNestedManyWithoutPremiseInput
    threadsOnPremise: ThreadsOnPremiseCreateNestedManyWithoutPremiseInput
    title: String!
    updatedAt: DateTime
    vision: VisionCreateNestedManyWithoutPremiseInput
}

input PremiseCreateWithoutTagsOnPremisesInput {
    author: UserCreateNestedOneWithoutPremisesInput
    createdAt: DateTime
    id: String
    premisesOnTimelines: PremisesOnTimelinesCreateNestedManyWithoutPremiseInput
    status: PremiseStatus!
    threadsOnPremise: ThreadsOnPremiseCreateNestedManyWithoutPremiseInput
    title: String!
    updatedAt: DateTime
    vision: VisionCreateNestedManyWithoutPremiseInput
}

input PremiseCreateWithoutThreadsOnPremiseInput {
    author: UserCreateNestedOneWithoutPremisesInput
    createdAt: DateTime
    id: String
    premisesOnTimelines: PremisesOnTimelinesCreateNestedManyWithoutPremiseInput
    status: PremiseStatus!
    tagsOnPremises: TagsOnPremisesCreateNestedManyWithoutPremiseInput
    title: String!
    updatedAt: DateTime
    vision: VisionCreateNestedManyWithoutPremiseInput
}

input PremiseCreateWithoutVisionInput {
    author: UserCreateNestedOneWithoutPremisesInput
    createdAt: DateTime
    id: String
    premisesOnTimelines: PremisesOnTimelinesCreateNestedManyWithoutPremiseInput
    status: PremiseStatus!
    tagsOnPremises: TagsOnPremisesCreateNestedManyWithoutPremiseInput
    threadsOnPremise: ThreadsOnPremiseCreateNestedManyWithoutPremiseInput
    title: String!
    updatedAt: DateTime
}

type PremiseGroupBy {
    _count: PremiseCountAggregate
    _max: PremiseMaxAggregate
    _min: PremiseMinAggregate
    authorId: String
    createdAt: DateTime!
    id: String!
    status: PremiseStatus!
    title: String!
    updatedAt: DateTime
}

input PremiseListRelationFilter {
    every: PremiseWhereInput
    none: PremiseWhereInput
    some: PremiseWhereInput
}

type PremiseMaxAggregate {
    authorId: String
    createdAt: DateTime
    id: String
    status: PremiseStatus
    title: String
    updatedAt: DateTime
}

input PremiseMaxOrderByAggregateInput {
    authorId: SortOrder
    createdAt: SortOrder
    id: SortOrder
    status: SortOrder
    title: SortOrder
    updatedAt: SortOrder
}

type PremiseMinAggregate {
    authorId: String
    createdAt: DateTime
    id: String
    status: PremiseStatus
    title: String
    updatedAt: DateTime
}

input PremiseMinOrderByAggregateInput {
    authorId: SortOrder
    createdAt: SortOrder
    id: SortOrder
    status: SortOrder
    title: SortOrder
    updatedAt: SortOrder
}

input PremiseOrderByRelationAggregateInput {
    _count: SortOrder
}

input PremiseOrderByWithAggregationInput {
    _count: PremiseCountOrderByAggregateInput
    _max: PremiseMaxOrderByAggregateInput
    _min: PremiseMinOrderByAggregateInput
    authorId: SortOrder
    createdAt: SortOrder
    id: SortOrder
    status: SortOrder
    title: SortOrder
    updatedAt: SortOrder
}

input PremiseOrderByWithRelationInput {
    author: UserOrderByWithRelationInput
    authorId: SortOrder
    createdAt: SortOrder
    id: SortOrder
    premisesOnTimelines: PremisesOnTimelinesOrderByRelationAggregateInput
    status: SortOrder
    tagsOnPremises: TagsOnPremisesOrderByRelationAggregateInput
    threadsOnPremise: ThreadsOnPremiseOrderByRelationAggregateInput
    title: SortOrder
    updatedAt: SortOrder
    vision: VisionOrderByRelationAggregateInput
}

input PremiseRelationFilter {
    is: PremiseWhereInput
    isNot: PremiseWhereInput
}

enum PremiseScalarFieldEnum {
    authorId
    createdAt
    id
    status
    title
    updatedAt
}

input PremiseScalarWhereInput {
    AND: [PremiseScalarWhereInput!]
    NOT: [PremiseScalarWhereInput!]
    OR: [PremiseScalarWhereInput!]
    authorId: StringNullableFilter
    createdAt: DateTimeFilter
    id: StringFilter
    status: EnumPremiseStatusFilter
    title: StringFilter
    updatedAt: DateTimeNullableFilter
}

input PremiseScalarWhereWithAggregatesInput {
    AND: [PremiseScalarWhereWithAggregatesInput!]
    NOT: [PremiseScalarWhereWithAggregatesInput!]
    OR: [PremiseScalarWhereWithAggregatesInput!]
    authorId: StringNullableWithAggregatesFilter
    createdAt: DateTimeWithAggregatesFilter
    id: StringWithAggregatesFilter
    status: EnumPremiseStatusWithAggregatesFilter
    title: StringWithAggregatesFilter
    updatedAt: DateTimeNullableWithAggregatesFilter
}

enum PremiseStatus {
    MISINFORMATION
    REFERENCE_PROVIDED
    RUMOUR
    UNVERIFIED
    VERIFIED
}

input PremiseUpdateInput {
    author: UserUpdateOneWithoutPremisesInput
    createdAt: DateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    premisesOnTimelines: PremisesOnTimelinesUpdateManyWithoutPremiseInput
    status: EnumPremiseStatusFieldUpdateOperationsInput
    tagsOnPremises: TagsOnPremisesUpdateManyWithoutPremiseInput
    threadsOnPremise: ThreadsOnPremiseUpdateManyWithoutPremiseInput
    title: StringFieldUpdateOperationsInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
    vision: VisionUpdateManyWithoutPremiseInput
}

input PremiseUpdateManyMutationInput {
    createdAt: DateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    status: EnumPremiseStatusFieldUpdateOperationsInput
    title: StringFieldUpdateOperationsInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input PremiseUpdateManyWithWhereWithoutAuthorInput {
    data: PremiseUpdateManyMutationInput!
    where: PremiseScalarWhereInput!
}

input PremiseUpdateManyWithoutAuthorInput {
    connect: [PremiseWhereUniqueInput!]
    connectOrCreate: [PremiseCreateOrConnectWithoutAuthorInput!]
    create: [PremiseCreateWithoutAuthorInput!]
    createMany: PremiseCreateManyAuthorInputEnvelope
    delete: [PremiseWhereUniqueInput!]
    deleteMany: [PremiseScalarWhereInput!]
    disconnect: [PremiseWhereUniqueInput!]
    set: [PremiseWhereUniqueInput!]
    update: [PremiseUpdateWithWhereUniqueWithoutAuthorInput!]
    updateMany: [PremiseUpdateManyWithWhereWithoutAuthorInput!]
    upsert: [PremiseUpsertWithWhereUniqueWithoutAuthorInput!]
}

input PremiseUpdateOneRequiredWithoutPremisesOnTimelinesInput {
    connect: PremiseWhereUniqueInput
    connectOrCreate: PremiseCreateOrConnectWithoutPremisesOnTimelinesInput
    create: PremiseCreateWithoutPremisesOnTimelinesInput
    update: PremiseUpdateWithoutPremisesOnTimelinesInput
    upsert: PremiseUpsertWithoutPremisesOnTimelinesInput
}

input PremiseUpdateOneRequiredWithoutTagsOnPremisesInput {
    connect: PremiseWhereUniqueInput
    connectOrCreate: PremiseCreateOrConnectWithoutTagsOnPremisesInput
    create: PremiseCreateWithoutTagsOnPremisesInput
    update: PremiseUpdateWithoutTagsOnPremisesInput
    upsert: PremiseUpsertWithoutTagsOnPremisesInput
}

input PremiseUpdateOneRequiredWithoutThreadsOnPremiseInput {
    connect: PremiseWhereUniqueInput
    connectOrCreate: PremiseCreateOrConnectWithoutThreadsOnPremiseInput
    create: PremiseCreateWithoutThreadsOnPremiseInput
    update: PremiseUpdateWithoutThreadsOnPremiseInput
    upsert: PremiseUpsertWithoutThreadsOnPremiseInput
}

input PremiseUpdateOneRequiredWithoutVisionInput {
    connect: PremiseWhereUniqueInput
    connectOrCreate: PremiseCreateOrConnectWithoutVisionInput
    create: PremiseCreateWithoutVisionInput
    update: PremiseUpdateWithoutVisionInput
    upsert: PremiseUpsertWithoutVisionInput
}

input PremiseUpdateWithWhereUniqueWithoutAuthorInput {
    data: PremiseUpdateWithoutAuthorInput!
    where: PremiseWhereUniqueInput!
}

input PremiseUpdateWithoutAuthorInput {
    createdAt: DateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    premisesOnTimelines: PremisesOnTimelinesUpdateManyWithoutPremiseInput
    status: EnumPremiseStatusFieldUpdateOperationsInput
    tagsOnPremises: TagsOnPremisesUpdateManyWithoutPremiseInput
    threadsOnPremise: ThreadsOnPremiseUpdateManyWithoutPremiseInput
    title: StringFieldUpdateOperationsInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
    vision: VisionUpdateManyWithoutPremiseInput
}

input PremiseUpdateWithoutPremisesOnTimelinesInput {
    author: UserUpdateOneWithoutPremisesInput
    createdAt: DateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    status: EnumPremiseStatusFieldUpdateOperationsInput
    tagsOnPremises: TagsOnPremisesUpdateManyWithoutPremiseInput
    threadsOnPremise: ThreadsOnPremiseUpdateManyWithoutPremiseInput
    title: StringFieldUpdateOperationsInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
    vision: VisionUpdateManyWithoutPremiseInput
}

input PremiseUpdateWithoutTagsOnPremisesInput {
    author: UserUpdateOneWithoutPremisesInput
    createdAt: DateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    premisesOnTimelines: PremisesOnTimelinesUpdateManyWithoutPremiseInput
    status: EnumPremiseStatusFieldUpdateOperationsInput
    threadsOnPremise: ThreadsOnPremiseUpdateManyWithoutPremiseInput
    title: StringFieldUpdateOperationsInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
    vision: VisionUpdateManyWithoutPremiseInput
}

input PremiseUpdateWithoutThreadsOnPremiseInput {
    author: UserUpdateOneWithoutPremisesInput
    createdAt: DateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    premisesOnTimelines: PremisesOnTimelinesUpdateManyWithoutPremiseInput
    status: EnumPremiseStatusFieldUpdateOperationsInput
    tagsOnPremises: TagsOnPremisesUpdateManyWithoutPremiseInput
    title: StringFieldUpdateOperationsInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
    vision: VisionUpdateManyWithoutPremiseInput
}

input PremiseUpdateWithoutVisionInput {
    author: UserUpdateOneWithoutPremisesInput
    createdAt: DateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    premisesOnTimelines: PremisesOnTimelinesUpdateManyWithoutPremiseInput
    status: EnumPremiseStatusFieldUpdateOperationsInput
    tagsOnPremises: TagsOnPremisesUpdateManyWithoutPremiseInput
    threadsOnPremise: ThreadsOnPremiseUpdateManyWithoutPremiseInput
    title: StringFieldUpdateOperationsInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input PremiseUpsertWithWhereUniqueWithoutAuthorInput {
    create: PremiseCreateWithoutAuthorInput!
    update: PremiseUpdateWithoutAuthorInput!
    where: PremiseWhereUniqueInput!
}

input PremiseUpsertWithoutPremisesOnTimelinesInput {
    create: PremiseCreateWithoutPremisesOnTimelinesInput!
    update: PremiseUpdateWithoutPremisesOnTimelinesInput!
}

input PremiseUpsertWithoutTagsOnPremisesInput {
    create: PremiseCreateWithoutTagsOnPremisesInput!
    update: PremiseUpdateWithoutTagsOnPremisesInput!
}

input PremiseUpsertWithoutThreadsOnPremiseInput {
    create: PremiseCreateWithoutThreadsOnPremiseInput!
    update: PremiseUpdateWithoutThreadsOnPremiseInput!
}

input PremiseUpsertWithoutVisionInput {
    create: PremiseCreateWithoutVisionInput!
    update: PremiseUpdateWithoutVisionInput!
}

input PremiseWhereInput {
    AND: [PremiseWhereInput!]
    NOT: [PremiseWhereInput!]
    OR: [PremiseWhereInput!]
    author: UserRelationFilter
    authorId: StringNullableFilter
    createdAt: DateTimeFilter
    id: StringFilter
    premisesOnTimelines: PremisesOnTimelinesListRelationFilter
    status: EnumPremiseStatusFilter
    tagsOnPremises: TagsOnPremisesListRelationFilter
    threadsOnPremise: ThreadsOnPremiseListRelationFilter
    title: StringFilter
    updatedAt: DateTimeNullableFilter
    vision: VisionListRelationFilter
}

input PremiseWhereUniqueInput {
    id: String
}

type PremisesOnTimelines {
    assignedAt: DateTime!
    premise: Premise!
    premiseId: String!
    timeline: Timeline!
    timelineId: String!
}

type PremisesOnTimelinesCountAggregate {
    _all: Int!
    assignedAt: Int!
    premiseId: Int!
    timelineId: Int!
}

input PremisesOnTimelinesCountOrderByAggregateInput {
    assignedAt: SortOrder
    premiseId: SortOrder
    timelineId: SortOrder
}

input PremisesOnTimelinesCreateInput {
    assignedAt: DateTime
    premise: PremiseCreateNestedOneWithoutPremisesOnTimelinesInput!
    timeline: TimelineCreateNestedOneWithoutPremisesOnTimelinesInput!
}

input PremisesOnTimelinesCreateManyInput {
    assignedAt: DateTime
    premiseId: String!
    timelineId: String!
}

input PremisesOnTimelinesCreateManyPremiseInput {
    assignedAt: DateTime
    timelineId: String!
}

input PremisesOnTimelinesCreateManyPremiseInputEnvelope {
    data: [PremisesOnTimelinesCreateManyPremiseInput!]!
    skipDuplicates: Boolean
}

input PremisesOnTimelinesCreateManyTimelineInput {
    assignedAt: DateTime
    premiseId: String!
}

input PremisesOnTimelinesCreateManyTimelineInputEnvelope {
    data: [PremisesOnTimelinesCreateManyTimelineInput!]!
    skipDuplicates: Boolean
}

input PremisesOnTimelinesCreateNestedManyWithoutPremiseInput {
    connect: [PremisesOnTimelinesWhereUniqueInput!]
    connectOrCreate: [PremisesOnTimelinesCreateOrConnectWithoutPremiseInput!]
    create: [PremisesOnTimelinesCreateWithoutPremiseInput!]
    createMany: PremisesOnTimelinesCreateManyPremiseInputEnvelope
}

input PremisesOnTimelinesCreateNestedManyWithoutTimelineInput {
    connect: [PremisesOnTimelinesWhereUniqueInput!]
    connectOrCreate: [PremisesOnTimelinesCreateOrConnectWithoutTimelineInput!]
    create: [PremisesOnTimelinesCreateWithoutTimelineInput!]
    createMany: PremisesOnTimelinesCreateManyTimelineInputEnvelope
}

input PremisesOnTimelinesCreateOrConnectWithoutPremiseInput {
    create: PremisesOnTimelinesCreateWithoutPremiseInput!
    where: PremisesOnTimelinesWhereUniqueInput!
}

input PremisesOnTimelinesCreateOrConnectWithoutTimelineInput {
    create: PremisesOnTimelinesCreateWithoutTimelineInput!
    where: PremisesOnTimelinesWhereUniqueInput!
}

input PremisesOnTimelinesCreateWithoutPremiseInput {
    assignedAt: DateTime
    timeline: TimelineCreateNestedOneWithoutPremisesOnTimelinesInput!
}

input PremisesOnTimelinesCreateWithoutTimelineInput {
    assignedAt: DateTime
    premise: PremiseCreateNestedOneWithoutPremisesOnTimelinesInput!
}

type PremisesOnTimelinesGroupBy {
    _count: PremisesOnTimelinesCountAggregate
    _max: PremisesOnTimelinesMaxAggregate
    _min: PremisesOnTimelinesMinAggregate
    assignedAt: DateTime!
    premiseId: String!
    timelineId: String!
}

input PremisesOnTimelinesListRelationFilter {
    every: PremisesOnTimelinesWhereInput
    none: PremisesOnTimelinesWhereInput
    some: PremisesOnTimelinesWhereInput
}

type PremisesOnTimelinesMaxAggregate {
    assignedAt: DateTime
    premiseId: String
    timelineId: String
}

input PremisesOnTimelinesMaxOrderByAggregateInput {
    assignedAt: SortOrder
    premiseId: SortOrder
    timelineId: SortOrder
}

type PremisesOnTimelinesMinAggregate {
    assignedAt: DateTime
    premiseId: String
    timelineId: String
}

input PremisesOnTimelinesMinOrderByAggregateInput {
    assignedAt: SortOrder
    premiseId: SortOrder
    timelineId: SortOrder
}

input PremisesOnTimelinesOrderByRelationAggregateInput {
    _count: SortOrder
}

input PremisesOnTimelinesOrderByWithAggregationInput {
    _count: PremisesOnTimelinesCountOrderByAggregateInput
    _max: PremisesOnTimelinesMaxOrderByAggregateInput
    _min: PremisesOnTimelinesMinOrderByAggregateInput
    assignedAt: SortOrder
    premiseId: SortOrder
    timelineId: SortOrder
}

input PremisesOnTimelinesOrderByWithRelationInput {
    assignedAt: SortOrder
    premise: PremiseOrderByWithRelationInput
    premiseId: SortOrder
    timeline: TimelineOrderByWithRelationInput
    timelineId: SortOrder
}

input PremisesOnTimelinesPremiseIdTimelineIdCompoundUniqueInput {
    premiseId: String!
    timelineId: String!
}

enum PremisesOnTimelinesScalarFieldEnum {
    assignedAt
    premiseId
    timelineId
}

input PremisesOnTimelinesScalarWhereInput {
    AND: [PremisesOnTimelinesScalarWhereInput!]
    NOT: [PremisesOnTimelinesScalarWhereInput!]
    OR: [PremisesOnTimelinesScalarWhereInput!]
    assignedAt: DateTimeFilter
    premiseId: StringFilter
    timelineId: StringFilter
}

input PremisesOnTimelinesScalarWhereWithAggregatesInput {
    AND: [PremisesOnTimelinesScalarWhereWithAggregatesInput!]
    NOT: [PremisesOnTimelinesScalarWhereWithAggregatesInput!]
    OR: [PremisesOnTimelinesScalarWhereWithAggregatesInput!]
    assignedAt: DateTimeWithAggregatesFilter
    premiseId: StringWithAggregatesFilter
    timelineId: StringWithAggregatesFilter
}

input PremisesOnTimelinesUpdateInput {
    assignedAt: DateTimeFieldUpdateOperationsInput
    premise: PremiseUpdateOneRequiredWithoutPremisesOnTimelinesInput
    timeline: TimelineUpdateOneRequiredWithoutPremisesOnTimelinesInput
}

input PremisesOnTimelinesUpdateManyMutationInput {
    assignedAt: DateTimeFieldUpdateOperationsInput
}

input PremisesOnTimelinesUpdateManyWithWhereWithoutPremiseInput {
    data: PremisesOnTimelinesUpdateManyMutationInput!
    where: PremisesOnTimelinesScalarWhereInput!
}

input PremisesOnTimelinesUpdateManyWithWhereWithoutTimelineInput {
    data: PremisesOnTimelinesUpdateManyMutationInput!
    where: PremisesOnTimelinesScalarWhereInput!
}

input PremisesOnTimelinesUpdateManyWithoutPremiseInput {
    connect: [PremisesOnTimelinesWhereUniqueInput!]
    connectOrCreate: [PremisesOnTimelinesCreateOrConnectWithoutPremiseInput!]
    create: [PremisesOnTimelinesCreateWithoutPremiseInput!]
    createMany: PremisesOnTimelinesCreateManyPremiseInputEnvelope
    delete: [PremisesOnTimelinesWhereUniqueInput!]
    deleteMany: [PremisesOnTimelinesScalarWhereInput!]
    disconnect: [PremisesOnTimelinesWhereUniqueInput!]
    set: [PremisesOnTimelinesWhereUniqueInput!]
    update: [PremisesOnTimelinesUpdateWithWhereUniqueWithoutPremiseInput!]
    updateMany: [PremisesOnTimelinesUpdateManyWithWhereWithoutPremiseInput!]
    upsert: [PremisesOnTimelinesUpsertWithWhereUniqueWithoutPremiseInput!]
}

input PremisesOnTimelinesUpdateManyWithoutTimelineInput {
    connect: [PremisesOnTimelinesWhereUniqueInput!]
    connectOrCreate: [PremisesOnTimelinesCreateOrConnectWithoutTimelineInput!]
    create: [PremisesOnTimelinesCreateWithoutTimelineInput!]
    createMany: PremisesOnTimelinesCreateManyTimelineInputEnvelope
    delete: [PremisesOnTimelinesWhereUniqueInput!]
    deleteMany: [PremisesOnTimelinesScalarWhereInput!]
    disconnect: [PremisesOnTimelinesWhereUniqueInput!]
    set: [PremisesOnTimelinesWhereUniqueInput!]
    update: [PremisesOnTimelinesUpdateWithWhereUniqueWithoutTimelineInput!]
    updateMany: [PremisesOnTimelinesUpdateManyWithWhereWithoutTimelineInput!]
    upsert: [PremisesOnTimelinesUpsertWithWhereUniqueWithoutTimelineInput!]
}

input PremisesOnTimelinesUpdateWithWhereUniqueWithoutPremiseInput {
    data: PremisesOnTimelinesUpdateWithoutPremiseInput!
    where: PremisesOnTimelinesWhereUniqueInput!
}

input PremisesOnTimelinesUpdateWithWhereUniqueWithoutTimelineInput {
    data: PremisesOnTimelinesUpdateWithoutTimelineInput!
    where: PremisesOnTimelinesWhereUniqueInput!
}

input PremisesOnTimelinesUpdateWithoutPremiseInput {
    assignedAt: DateTimeFieldUpdateOperationsInput
    timeline: TimelineUpdateOneRequiredWithoutPremisesOnTimelinesInput
}

input PremisesOnTimelinesUpdateWithoutTimelineInput {
    assignedAt: DateTimeFieldUpdateOperationsInput
    premise: PremiseUpdateOneRequiredWithoutPremisesOnTimelinesInput
}

input PremisesOnTimelinesUpsertWithWhereUniqueWithoutPremiseInput {
    create: PremisesOnTimelinesCreateWithoutPremiseInput!
    update: PremisesOnTimelinesUpdateWithoutPremiseInput!
    where: PremisesOnTimelinesWhereUniqueInput!
}

input PremisesOnTimelinesUpsertWithWhereUniqueWithoutTimelineInput {
    create: PremisesOnTimelinesCreateWithoutTimelineInput!
    update: PremisesOnTimelinesUpdateWithoutTimelineInput!
    where: PremisesOnTimelinesWhereUniqueInput!
}

input PremisesOnTimelinesWhereInput {
    AND: [PremisesOnTimelinesWhereInput!]
    NOT: [PremisesOnTimelinesWhereInput!]
    OR: [PremisesOnTimelinesWhereInput!]
    assignedAt: DateTimeFilter
    premise: PremiseRelationFilter
    premiseId: StringFilter
    timeline: TimelineRelationFilter
    timelineId: StringFilter
}

input PremisesOnTimelinesWhereUniqueInput {
    premiseId_timelineId: PremisesOnTimelinesPremiseIdTimelineIdCompoundUniqueInput
}

type Query {
    account(where: AccountWhereUniqueInput!): Account
    accounts(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): [Account!]!
    aggregateAccount(cursor: AccountWhereUniqueInput, orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): AggregateAccount!
    aggregateMergeRequest(cursor: MergeRequestWhereUniqueInput, orderBy: [MergeRequestOrderByWithRelationInput!], skip: Int, take: Int, where: MergeRequestWhereInput): AggregateMergeRequest!
    aggregatePremise(cursor: PremiseWhereUniqueInput, orderBy: [PremiseOrderByWithRelationInput!], skip: Int, take: Int, where: PremiseWhereInput): AggregatePremise!
    aggregatePremisesOnTimelines(cursor: PremisesOnTimelinesWhereUniqueInput, orderBy: [PremisesOnTimelinesOrderByWithRelationInput!], skip: Int, take: Int, where: PremisesOnTimelinesWhereInput): AggregatePremisesOnTimelines!
    aggregateReactionOnThread(cursor: ReactionOnThreadWhereUniqueInput, orderBy: [ReactionOnThreadOrderByWithRelationInput!], skip: Int, take: Int, where: ReactionOnThreadWhereInput): AggregateReactionOnThread!
    aggregateReactionOnTimeline(cursor: ReactionOnTimelineWhereUniqueInput, orderBy: [ReactionOnTimelineOrderByWithRelationInput!], skip: Int, take: Int, where: ReactionOnTimelineWhereInput): AggregateReactionOnTimeline!
    aggregateReactionOnVision(cursor: ReactionOnVisionWhereUniqueInput, orderBy: [ReactionOnVisionOrderByWithRelationInput!], skip: Int, take: Int, where: ReactionOnVisionWhereInput): AggregateReactionOnVision!
    aggregateReference(cursor: ReferenceWhereUniqueInput, orderBy: [ReferenceOrderByWithRelationInput!], skip: Int, take: Int, where: ReferenceWhereInput): AggregateReference!
    aggregateSession(cursor: SessionWhereUniqueInput, orderBy: [SessionOrderByWithRelationInput!], skip: Int, take: Int, where: SessionWhereInput): AggregateSession!
    aggregateSnapshot(cursor: SnapshotWhereUniqueInput, orderBy: [SnapshotOrderByWithRelationInput!], skip: Int, take: Int, where: SnapshotWhereInput): AggregateSnapshot!
    aggregateTag(cursor: TagWhereUniqueInput, orderBy: [TagOrderByWithRelationInput!], skip: Int, take: Int, where: TagWhereInput): AggregateTag!
    aggregateTagsOnPremises(cursor: TagsOnPremisesWhereUniqueInput, orderBy: [TagsOnPremisesOrderByWithRelationInput!], skip: Int, take: Int, where: TagsOnPremisesWhereInput): AggregateTagsOnPremises!
    aggregateTagsOnTimelines(cursor: TagsOnTimelinesWhereUniqueInput, orderBy: [TagsOnTimelinesOrderByWithRelationInput!], skip: Int, take: Int, where: TagsOnTimelinesWhereInput): AggregateTagsOnTimelines!
    aggregateThread(cursor: ThreadWhereUniqueInput, orderBy: [ThreadOrderByWithRelationInput!], skip: Int, take: Int, where: ThreadWhereInput): AggregateThread!
    aggregateThreadsOnPremise(cursor: ThreadsOnPremiseWhereUniqueInput, orderBy: [ThreadsOnPremiseOrderByWithRelationInput!], skip: Int, take: Int, where: ThreadsOnPremiseWhereInput): AggregateThreadsOnPremise!
    aggregateThreadsOnTimeline(cursor: ThreadsOnTimelineWhereUniqueInput, orderBy: [ThreadsOnTimelineOrderByWithRelationInput!], skip: Int, take: Int, where: ThreadsOnTimelineWhereInput): AggregateThreadsOnTimeline!
    aggregateThreadsOnVision(cursor: ThreadsOnVisionWhereUniqueInput, orderBy: [ThreadsOnVisionOrderByWithRelationInput!], skip: Int, take: Int, where: ThreadsOnVisionWhereInput): AggregateThreadsOnVision!
    aggregateTimeline(cursor: TimelineWhereUniqueInput, orderBy: [TimelineOrderByWithRelationInput!], skip: Int, take: Int, where: TimelineWhereInput): AggregateTimeline!
    aggregateUser(cursor: UserWhereUniqueInput, orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): AggregateUser!
    aggregateVerificationToken(cursor: VerificationTokenWhereUniqueInput, orderBy: [VerificationTokenOrderByWithRelationInput!], skip: Int, take: Int, where: VerificationTokenWhereInput): AggregateVerificationToken!
    aggregateVision(cursor: VisionWhereUniqueInput, orderBy: [VisionOrderByWithRelationInput!], skip: Int, take: Int, where: VisionWhereInput): AggregateVision!
    findFirstAccount(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): Account
    findFirstMergeRequest(cursor: MergeRequestWhereUniqueInput, distinct: [MergeRequestScalarFieldEnum!], orderBy: [MergeRequestOrderByWithRelationInput!], skip: Int, take: Int, where: MergeRequestWhereInput): MergeRequest
    findFirstPremise(cursor: PremiseWhereUniqueInput, distinct: [PremiseScalarFieldEnum!], orderBy: [PremiseOrderByWithRelationInput!], skip: Int, take: Int, where: PremiseWhereInput): Premise
    findFirstPremisesOnTimelines(cursor: PremisesOnTimelinesWhereUniqueInput, distinct: [PremisesOnTimelinesScalarFieldEnum!], orderBy: [PremisesOnTimelinesOrderByWithRelationInput!], skip: Int, take: Int, where: PremisesOnTimelinesWhereInput): PremisesOnTimelines
    findFirstReactionOnThread(cursor: ReactionOnThreadWhereUniqueInput, distinct: [ReactionOnThreadScalarFieldEnum!], orderBy: [ReactionOnThreadOrderByWithRelationInput!], skip: Int, take: Int, where: ReactionOnThreadWhereInput): ReactionOnThread
    findFirstReactionOnTimeline(cursor: ReactionOnTimelineWhereUniqueInput, distinct: [ReactionOnTimelineScalarFieldEnum!], orderBy: [ReactionOnTimelineOrderByWithRelationInput!], skip: Int, take: Int, where: ReactionOnTimelineWhereInput): ReactionOnTimeline
    findFirstReactionOnVision(cursor: ReactionOnVisionWhereUniqueInput, distinct: [ReactionOnVisionScalarFieldEnum!], orderBy: [ReactionOnVisionOrderByWithRelationInput!], skip: Int, take: Int, where: ReactionOnVisionWhereInput): ReactionOnVision
    findFirstReference(cursor: ReferenceWhereUniqueInput, distinct: [ReferenceScalarFieldEnum!], orderBy: [ReferenceOrderByWithRelationInput!], skip: Int, take: Int, where: ReferenceWhereInput): Reference
    findFirstSession(cursor: SessionWhereUniqueInput, distinct: [SessionScalarFieldEnum!], orderBy: [SessionOrderByWithRelationInput!], skip: Int, take: Int, where: SessionWhereInput): Session
    findFirstSnapshot(cursor: SnapshotWhereUniqueInput, distinct: [SnapshotScalarFieldEnum!], orderBy: [SnapshotOrderByWithRelationInput!], skip: Int, take: Int, where: SnapshotWhereInput): Snapshot
    findFirstTag(cursor: TagWhereUniqueInput, distinct: [TagScalarFieldEnum!], orderBy: [TagOrderByWithRelationInput!], skip: Int, take: Int, where: TagWhereInput): Tag
    findFirstTagsOnPremises(cursor: TagsOnPremisesWhereUniqueInput, distinct: [TagsOnPremisesScalarFieldEnum!], orderBy: [TagsOnPremisesOrderByWithRelationInput!], skip: Int, take: Int, where: TagsOnPremisesWhereInput): TagsOnPremises
    findFirstTagsOnTimelines(cursor: TagsOnTimelinesWhereUniqueInput, distinct: [TagsOnTimelinesScalarFieldEnum!], orderBy: [TagsOnTimelinesOrderByWithRelationInput!], skip: Int, take: Int, where: TagsOnTimelinesWhereInput): TagsOnTimelines
    findFirstThread(cursor: ThreadWhereUniqueInput, distinct: [ThreadScalarFieldEnum!], orderBy: [ThreadOrderByWithRelationInput!], skip: Int, take: Int, where: ThreadWhereInput): Thread
    findFirstThreadsOnPremise(cursor: ThreadsOnPremiseWhereUniqueInput, distinct: [ThreadsOnPremiseScalarFieldEnum!], orderBy: [ThreadsOnPremiseOrderByWithRelationInput!], skip: Int, take: Int, where: ThreadsOnPremiseWhereInput): ThreadsOnPremise
    findFirstThreadsOnTimeline(cursor: ThreadsOnTimelineWhereUniqueInput, distinct: [ThreadsOnTimelineScalarFieldEnum!], orderBy: [ThreadsOnTimelineOrderByWithRelationInput!], skip: Int, take: Int, where: ThreadsOnTimelineWhereInput): ThreadsOnTimeline
    findFirstThreadsOnVision(cursor: ThreadsOnVisionWhereUniqueInput, distinct: [ThreadsOnVisionScalarFieldEnum!], orderBy: [ThreadsOnVisionOrderByWithRelationInput!], skip: Int, take: Int, where: ThreadsOnVisionWhereInput): ThreadsOnVision
    findFirstTimeline(cursor: TimelineWhereUniqueInput, distinct: [TimelineScalarFieldEnum!], orderBy: [TimelineOrderByWithRelationInput!], skip: Int, take: Int, where: TimelineWhereInput): Timeline
    findFirstUser(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): User
    findFirstVerificationToken(cursor: VerificationTokenWhereUniqueInput, distinct: [VerificationTokenScalarFieldEnum!], orderBy: [VerificationTokenOrderByWithRelationInput!], skip: Int, take: Int, where: VerificationTokenWhereInput): VerificationToken
    findFirstVision(cursor: VisionWhereUniqueInput, distinct: [VisionScalarFieldEnum!], orderBy: [VisionOrderByWithRelationInput!], skip: Int, take: Int, where: VisionWhereInput): Vision
    findManyPremisesOnTimelines(cursor: PremisesOnTimelinesWhereUniqueInput, distinct: [PremisesOnTimelinesScalarFieldEnum!], orderBy: [PremisesOnTimelinesOrderByWithRelationInput!], skip: Int, take: Int, where: PremisesOnTimelinesWhereInput): [PremisesOnTimelines!]!
    findManyTagsOnPremises(cursor: TagsOnPremisesWhereUniqueInput, distinct: [TagsOnPremisesScalarFieldEnum!], orderBy: [TagsOnPremisesOrderByWithRelationInput!], skip: Int, take: Int, where: TagsOnPremisesWhereInput): [TagsOnPremises!]!
    findManyTagsOnTimelines(cursor: TagsOnTimelinesWhereUniqueInput, distinct: [TagsOnTimelinesScalarFieldEnum!], orderBy: [TagsOnTimelinesOrderByWithRelationInput!], skip: Int, take: Int, where: TagsOnTimelinesWhereInput): [TagsOnTimelines!]!
    findUniquePremisesOnTimelines(where: PremisesOnTimelinesWhereUniqueInput!): PremisesOnTimelines
    findUniqueTagsOnPremises(where: TagsOnPremisesWhereUniqueInput!): TagsOnPremises
    findUniqueTagsOnTimelines(where: TagsOnTimelinesWhereUniqueInput!): TagsOnTimelines
    groupByAccount(by: [AccountScalarFieldEnum!]!, having: AccountScalarWhereWithAggregatesInput, orderBy: [AccountOrderByWithAggregationInput!], skip: Int, take: Int, where: AccountWhereInput): [AccountGroupBy!]!
    groupByMergeRequest(by: [MergeRequestScalarFieldEnum!]!, having: MergeRequestScalarWhereWithAggregatesInput, orderBy: [MergeRequestOrderByWithAggregationInput!], skip: Int, take: Int, where: MergeRequestWhereInput): [MergeRequestGroupBy!]!
    groupByPremise(by: [PremiseScalarFieldEnum!]!, having: PremiseScalarWhereWithAggregatesInput, orderBy: [PremiseOrderByWithAggregationInput!], skip: Int, take: Int, where: PremiseWhereInput): [PremiseGroupBy!]!
    groupByPremisesOnTimelines(by: [PremisesOnTimelinesScalarFieldEnum!]!, having: PremisesOnTimelinesScalarWhereWithAggregatesInput, orderBy: [PremisesOnTimelinesOrderByWithAggregationInput!], skip: Int, take: Int, where: PremisesOnTimelinesWhereInput): [PremisesOnTimelinesGroupBy!]!
    groupByReactionOnThread(by: [ReactionOnThreadScalarFieldEnum!]!, having: ReactionOnThreadScalarWhereWithAggregatesInput, orderBy: [ReactionOnThreadOrderByWithAggregationInput!], skip: Int, take: Int, where: ReactionOnThreadWhereInput): [ReactionOnThreadGroupBy!]!
    groupByReactionOnTimeline(by: [ReactionOnTimelineScalarFieldEnum!]!, having: ReactionOnTimelineScalarWhereWithAggregatesInput, orderBy: [ReactionOnTimelineOrderByWithAggregationInput!], skip: Int, take: Int, where: ReactionOnTimelineWhereInput): [ReactionOnTimelineGroupBy!]!
    groupByReactionOnVision(by: [ReactionOnVisionScalarFieldEnum!]!, having: ReactionOnVisionScalarWhereWithAggregatesInput, orderBy: [ReactionOnVisionOrderByWithAggregationInput!], skip: Int, take: Int, where: ReactionOnVisionWhereInput): [ReactionOnVisionGroupBy!]!
    groupByReference(by: [ReferenceScalarFieldEnum!]!, having: ReferenceScalarWhereWithAggregatesInput, orderBy: [ReferenceOrderByWithAggregationInput!], skip: Int, take: Int, where: ReferenceWhereInput): [ReferenceGroupBy!]!
    groupBySession(by: [SessionScalarFieldEnum!]!, having: SessionScalarWhereWithAggregatesInput, orderBy: [SessionOrderByWithAggregationInput!], skip: Int, take: Int, where: SessionWhereInput): [SessionGroupBy!]!
    groupBySnapshot(by: [SnapshotScalarFieldEnum!]!, having: SnapshotScalarWhereWithAggregatesInput, orderBy: [SnapshotOrderByWithAggregationInput!], skip: Int, take: Int, where: SnapshotWhereInput): [SnapshotGroupBy!]!
    groupByTag(by: [TagScalarFieldEnum!]!, having: TagScalarWhereWithAggregatesInput, orderBy: [TagOrderByWithAggregationInput!], skip: Int, take: Int, where: TagWhereInput): [TagGroupBy!]!
    groupByTagsOnPremises(by: [TagsOnPremisesScalarFieldEnum!]!, having: TagsOnPremisesScalarWhereWithAggregatesInput, orderBy: [TagsOnPremisesOrderByWithAggregationInput!], skip: Int, take: Int, where: TagsOnPremisesWhereInput): [TagsOnPremisesGroupBy!]!
    groupByTagsOnTimelines(by: [TagsOnTimelinesScalarFieldEnum!]!, having: TagsOnTimelinesScalarWhereWithAggregatesInput, orderBy: [TagsOnTimelinesOrderByWithAggregationInput!], skip: Int, take: Int, where: TagsOnTimelinesWhereInput): [TagsOnTimelinesGroupBy!]!
    groupByThread(by: [ThreadScalarFieldEnum!]!, having: ThreadScalarWhereWithAggregatesInput, orderBy: [ThreadOrderByWithAggregationInput!], skip: Int, take: Int, where: ThreadWhereInput): [ThreadGroupBy!]!
    groupByThreadsOnPremise(by: [ThreadsOnPremiseScalarFieldEnum!]!, having: ThreadsOnPremiseScalarWhereWithAggregatesInput, orderBy: [ThreadsOnPremiseOrderByWithAggregationInput!], skip: Int, take: Int, where: ThreadsOnPremiseWhereInput): [ThreadsOnPremiseGroupBy!]!
    groupByThreadsOnTimeline(by: [ThreadsOnTimelineScalarFieldEnum!]!, having: ThreadsOnTimelineScalarWhereWithAggregatesInput, orderBy: [ThreadsOnTimelineOrderByWithAggregationInput!], skip: Int, take: Int, where: ThreadsOnTimelineWhereInput): [ThreadsOnTimelineGroupBy!]!
    groupByThreadsOnVision(by: [ThreadsOnVisionScalarFieldEnum!]!, having: ThreadsOnVisionScalarWhereWithAggregatesInput, orderBy: [ThreadsOnVisionOrderByWithAggregationInput!], skip: Int, take: Int, where: ThreadsOnVisionWhereInput): [ThreadsOnVisionGroupBy!]!
    groupByTimeline(by: [TimelineScalarFieldEnum!]!, having: TimelineScalarWhereWithAggregatesInput, orderBy: [TimelineOrderByWithAggregationInput!], skip: Int, take: Int, where: TimelineWhereInput): [TimelineGroupBy!]!
    groupByUser(by: [UserScalarFieldEnum!]!, having: UserScalarWhereWithAggregatesInput, orderBy: [UserOrderByWithAggregationInput!], skip: Int, take: Int, where: UserWhereInput): [UserGroupBy!]!
    groupByVerificationToken(by: [VerificationTokenScalarFieldEnum!]!, having: VerificationTokenScalarWhereWithAggregatesInput, orderBy: [VerificationTokenOrderByWithAggregationInput!], skip: Int, take: Int, where: VerificationTokenWhereInput): [VerificationTokenGroupBy!]!
    groupByVision(by: [VisionScalarFieldEnum!]!, having: VisionScalarWhereWithAggregatesInput, orderBy: [VisionOrderByWithAggregationInput!], skip: Int, take: Int, where: VisionWhereInput): [VisionGroupBy!]!
    mergeRequest(where: MergeRequestWhereUniqueInput!): MergeRequest
    mergeRequests(cursor: MergeRequestWhereUniqueInput, distinct: [MergeRequestScalarFieldEnum!], orderBy: [MergeRequestOrderByWithRelationInput!], skip: Int, take: Int, where: MergeRequestWhereInput): [MergeRequest!]!
    premise(where: PremiseWhereUniqueInput!): Premise
    premises(cursor: PremiseWhereUniqueInput, distinct: [PremiseScalarFieldEnum!], orderBy: [PremiseOrderByWithRelationInput!], skip: Int, take: Int, where: PremiseWhereInput): [Premise!]!
    reactionOnThread(where: ReactionOnThreadWhereUniqueInput!): ReactionOnThread
    reactionOnThreads(cursor: ReactionOnThreadWhereUniqueInput, distinct: [ReactionOnThreadScalarFieldEnum!], orderBy: [ReactionOnThreadOrderByWithRelationInput!], skip: Int, take: Int, where: ReactionOnThreadWhereInput): [ReactionOnThread!]!
    reactionOnTimeline(where: ReactionOnTimelineWhereUniqueInput!): ReactionOnTimeline
    reactionOnTimelines(cursor: ReactionOnTimelineWhereUniqueInput, distinct: [ReactionOnTimelineScalarFieldEnum!], orderBy: [ReactionOnTimelineOrderByWithRelationInput!], skip: Int, take: Int, where: ReactionOnTimelineWhereInput): [ReactionOnTimeline!]!
    reactionOnVision(where: ReactionOnVisionWhereUniqueInput!): ReactionOnVision
    reactionOnVisions(cursor: ReactionOnVisionWhereUniqueInput, distinct: [ReactionOnVisionScalarFieldEnum!], orderBy: [ReactionOnVisionOrderByWithRelationInput!], skip: Int, take: Int, where: ReactionOnVisionWhereInput): [ReactionOnVision!]!
    reference(where: ReferenceWhereUniqueInput!): Reference
    references(cursor: ReferenceWhereUniqueInput, distinct: [ReferenceScalarFieldEnum!], orderBy: [ReferenceOrderByWithRelationInput!], skip: Int, take: Int, where: ReferenceWhereInput): [Reference!]!
    session(where: SessionWhereUniqueInput!): Session
    sessions(cursor: SessionWhereUniqueInput, distinct: [SessionScalarFieldEnum!], orderBy: [SessionOrderByWithRelationInput!], skip: Int, take: Int, where: SessionWhereInput): [Session!]!
    snapshot(where: SnapshotWhereUniqueInput!): Snapshot
    snapshots(cursor: SnapshotWhereUniqueInput, distinct: [SnapshotScalarFieldEnum!], orderBy: [SnapshotOrderByWithRelationInput!], skip: Int, take: Int, where: SnapshotWhereInput): [Snapshot!]!
    tag(where: TagWhereUniqueInput!): Tag
    tags(cursor: TagWhereUniqueInput, distinct: [TagScalarFieldEnum!], orderBy: [TagOrderByWithRelationInput!], skip: Int, take: Int, where: TagWhereInput): [Tag!]!
    thread(where: ThreadWhereUniqueInput!): Thread
    threads(cursor: ThreadWhereUniqueInput, distinct: [ThreadScalarFieldEnum!], orderBy: [ThreadOrderByWithRelationInput!], skip: Int, take: Int, where: ThreadWhereInput): [Thread!]!
    threadsOnPremise(where: ThreadsOnPremiseWhereUniqueInput!): ThreadsOnPremise
    threadsOnPremises(cursor: ThreadsOnPremiseWhereUniqueInput, distinct: [ThreadsOnPremiseScalarFieldEnum!], orderBy: [ThreadsOnPremiseOrderByWithRelationInput!], skip: Int, take: Int, where: ThreadsOnPremiseWhereInput): [ThreadsOnPremise!]!
    threadsOnTimeline(where: ThreadsOnTimelineWhereUniqueInput!): ThreadsOnTimeline
    threadsOnTimelines(cursor: ThreadsOnTimelineWhereUniqueInput, distinct: [ThreadsOnTimelineScalarFieldEnum!], orderBy: [ThreadsOnTimelineOrderByWithRelationInput!], skip: Int, take: Int, where: ThreadsOnTimelineWhereInput): [ThreadsOnTimeline!]!
    threadsOnVision(where: ThreadsOnVisionWhereUniqueInput!): ThreadsOnVision
    threadsOnVisions(cursor: ThreadsOnVisionWhereUniqueInput, distinct: [ThreadsOnVisionScalarFieldEnum!], orderBy: [ThreadsOnVisionOrderByWithRelationInput!], skip: Int, take: Int, where: ThreadsOnVisionWhereInput): [ThreadsOnVision!]!
    timeline(where: TimelineWhereUniqueInput!): Timeline
    timelines(cursor: TimelineWhereUniqueInput, distinct: [TimelineScalarFieldEnum!], orderBy: [TimelineOrderByWithRelationInput!], skip: Int, take: Int, where: TimelineWhereInput): [Timeline!]!
    user(where: UserWhereUniqueInput!): User
    users(cursor: UserWhereUniqueInput, distinct: [UserScalarFieldEnum!], orderBy: [UserOrderByWithRelationInput!], skip: Int, take: Int, where: UserWhereInput): [User!]!
    verificationToken(where: VerificationTokenWhereUniqueInput!): VerificationToken
    verificationTokens(cursor: VerificationTokenWhereUniqueInput, distinct: [VerificationTokenScalarFieldEnum!], orderBy: [VerificationTokenOrderByWithRelationInput!], skip: Int, take: Int, where: VerificationTokenWhereInput): [VerificationToken!]!
    vision(where: VisionWhereUniqueInput!): Vision
    visions(cursor: VisionWhereUniqueInput, distinct: [VisionScalarFieldEnum!], orderBy: [VisionOrderByWithRelationInput!], skip: Int, take: Int, where: VisionWhereInput): [Vision!]!
}

enum QueryMode {
    default
    insensitive
}

enum Reaction {
    DOWNVOTE
    LIKE
    UPVOTE
}

type ReactionOnThread {
    createdAt: DateTime!
    id: String!
    reaction: Reaction!
    thread: Thread!
    threadId: String!
    user: User!
    userId: String!
}

type ReactionOnThreadCountAggregate {
    _all: Int!
    createdAt: Int!
    id: Int!
    reaction: Int!
    threadId: Int!
    userId: Int!
}

input ReactionOnThreadCountOrderByAggregateInput {
    createdAt: SortOrder
    id: SortOrder
    reaction: SortOrder
    threadId: SortOrder
    userId: SortOrder
}

input ReactionOnThreadCreateInput {
    createdAt: DateTime
    id: String
    reaction: Reaction!
    thread: ThreadCreateNestedOneWithoutReactionOnThreadInput!
    user: UserCreateNestedOneWithoutReactionOnThreadInput!
}

input ReactionOnThreadCreateManyInput {
    createdAt: DateTime
    id: String
    reaction: Reaction!
    threadId: String!
    userId: String!
}

input ReactionOnThreadCreateManyThreadInput {
    createdAt: DateTime
    id: String
    reaction: Reaction!
    userId: String!
}

input ReactionOnThreadCreateManyThreadInputEnvelope {
    data: [ReactionOnThreadCreateManyThreadInput!]!
    skipDuplicates: Boolean
}

input ReactionOnThreadCreateManyUserInput {
    createdAt: DateTime
    id: String
    reaction: Reaction!
    threadId: String!
}

input ReactionOnThreadCreateManyUserInputEnvelope {
    data: [ReactionOnThreadCreateManyUserInput!]!
    skipDuplicates: Boolean
}

input ReactionOnThreadCreateNestedManyWithoutThreadInput {
    connect: [ReactionOnThreadWhereUniqueInput!]
    connectOrCreate: [ReactionOnThreadCreateOrConnectWithoutThreadInput!]
    create: [ReactionOnThreadCreateWithoutThreadInput!]
    createMany: ReactionOnThreadCreateManyThreadInputEnvelope
}

input ReactionOnThreadCreateNestedManyWithoutUserInput {
    connect: [ReactionOnThreadWhereUniqueInput!]
    connectOrCreate: [ReactionOnThreadCreateOrConnectWithoutUserInput!]
    create: [ReactionOnThreadCreateWithoutUserInput!]
    createMany: ReactionOnThreadCreateManyUserInputEnvelope
}

input ReactionOnThreadCreateOrConnectWithoutThreadInput {
    create: ReactionOnThreadCreateWithoutThreadInput!
    where: ReactionOnThreadWhereUniqueInput!
}

input ReactionOnThreadCreateOrConnectWithoutUserInput {
    create: ReactionOnThreadCreateWithoutUserInput!
    where: ReactionOnThreadWhereUniqueInput!
}

input ReactionOnThreadCreateWithoutThreadInput {
    createdAt: DateTime
    id: String
    reaction: Reaction!
    user: UserCreateNestedOneWithoutReactionOnThreadInput!
}

input ReactionOnThreadCreateWithoutUserInput {
    createdAt: DateTime
    id: String
    reaction: Reaction!
    thread: ThreadCreateNestedOneWithoutReactionOnThreadInput!
}

type ReactionOnThreadGroupBy {
    _count: ReactionOnThreadCountAggregate
    _max: ReactionOnThreadMaxAggregate
    _min: ReactionOnThreadMinAggregate
    createdAt: DateTime!
    id: String!
    reaction: Reaction!
    threadId: String!
    userId: String!
}

input ReactionOnThreadListRelationFilter {
    every: ReactionOnThreadWhereInput
    none: ReactionOnThreadWhereInput
    some: ReactionOnThreadWhereInput
}

type ReactionOnThreadMaxAggregate {
    createdAt: DateTime
    id: String
    reaction: Reaction
    threadId: String
    userId: String
}

input ReactionOnThreadMaxOrderByAggregateInput {
    createdAt: SortOrder
    id: SortOrder
    reaction: SortOrder
    threadId: SortOrder
    userId: SortOrder
}

type ReactionOnThreadMinAggregate {
    createdAt: DateTime
    id: String
    reaction: Reaction
    threadId: String
    userId: String
}

input ReactionOnThreadMinOrderByAggregateInput {
    createdAt: SortOrder
    id: SortOrder
    reaction: SortOrder
    threadId: SortOrder
    userId: SortOrder
}

input ReactionOnThreadOrderByRelationAggregateInput {
    _count: SortOrder
}

input ReactionOnThreadOrderByWithAggregationInput {
    _count: ReactionOnThreadCountOrderByAggregateInput
    _max: ReactionOnThreadMaxOrderByAggregateInput
    _min: ReactionOnThreadMinOrderByAggregateInput
    createdAt: SortOrder
    id: SortOrder
    reaction: SortOrder
    threadId: SortOrder
    userId: SortOrder
}

input ReactionOnThreadOrderByWithRelationInput {
    createdAt: SortOrder
    id: SortOrder
    reaction: SortOrder
    thread: ThreadOrderByWithRelationInput
    threadId: SortOrder
    user: UserOrderByWithRelationInput
    userId: SortOrder
}

enum ReactionOnThreadScalarFieldEnum {
    createdAt
    id
    reaction
    threadId
    userId
}

input ReactionOnThreadScalarWhereInput {
    AND: [ReactionOnThreadScalarWhereInput!]
    NOT: [ReactionOnThreadScalarWhereInput!]
    OR: [ReactionOnThreadScalarWhereInput!]
    createdAt: DateTimeFilter
    id: StringFilter
    reaction: EnumReactionFilter
    threadId: StringFilter
    userId: StringFilter
}

input ReactionOnThreadScalarWhereWithAggregatesInput {
    AND: [ReactionOnThreadScalarWhereWithAggregatesInput!]
    NOT: [ReactionOnThreadScalarWhereWithAggregatesInput!]
    OR: [ReactionOnThreadScalarWhereWithAggregatesInput!]
    createdAt: DateTimeWithAggregatesFilter
    id: StringWithAggregatesFilter
    reaction: EnumReactionWithAggregatesFilter
    threadId: StringWithAggregatesFilter
    userId: StringWithAggregatesFilter
}

input ReactionOnThreadUpdateInput {
    createdAt: DateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    reaction: EnumReactionFieldUpdateOperationsInput
    thread: ThreadUpdateOneRequiredWithoutReactionOnThreadInput
    user: UserUpdateOneRequiredWithoutReactionOnThreadInput
}

input ReactionOnThreadUpdateManyMutationInput {
    createdAt: DateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    reaction: EnumReactionFieldUpdateOperationsInput
}

input ReactionOnThreadUpdateManyWithWhereWithoutThreadInput {
    data: ReactionOnThreadUpdateManyMutationInput!
    where: ReactionOnThreadScalarWhereInput!
}

input ReactionOnThreadUpdateManyWithWhereWithoutUserInput {
    data: ReactionOnThreadUpdateManyMutationInput!
    where: ReactionOnThreadScalarWhereInput!
}

input ReactionOnThreadUpdateManyWithoutThreadInput {
    connect: [ReactionOnThreadWhereUniqueInput!]
    connectOrCreate: [ReactionOnThreadCreateOrConnectWithoutThreadInput!]
    create: [ReactionOnThreadCreateWithoutThreadInput!]
    createMany: ReactionOnThreadCreateManyThreadInputEnvelope
    delete: [ReactionOnThreadWhereUniqueInput!]
    deleteMany: [ReactionOnThreadScalarWhereInput!]
    disconnect: [ReactionOnThreadWhereUniqueInput!]
    set: [ReactionOnThreadWhereUniqueInput!]
    update: [ReactionOnThreadUpdateWithWhereUniqueWithoutThreadInput!]
    updateMany: [ReactionOnThreadUpdateManyWithWhereWithoutThreadInput!]
    upsert: [ReactionOnThreadUpsertWithWhereUniqueWithoutThreadInput!]
}

input ReactionOnThreadUpdateManyWithoutUserInput {
    connect: [ReactionOnThreadWhereUniqueInput!]
    connectOrCreate: [ReactionOnThreadCreateOrConnectWithoutUserInput!]
    create: [ReactionOnThreadCreateWithoutUserInput!]
    createMany: ReactionOnThreadCreateManyUserInputEnvelope
    delete: [ReactionOnThreadWhereUniqueInput!]
    deleteMany: [ReactionOnThreadScalarWhereInput!]
    disconnect: [ReactionOnThreadWhereUniqueInput!]
    set: [ReactionOnThreadWhereUniqueInput!]
    update: [ReactionOnThreadUpdateWithWhereUniqueWithoutUserInput!]
    updateMany: [ReactionOnThreadUpdateManyWithWhereWithoutUserInput!]
    upsert: [ReactionOnThreadUpsertWithWhereUniqueWithoutUserInput!]
}

input ReactionOnThreadUpdateWithWhereUniqueWithoutThreadInput {
    data: ReactionOnThreadUpdateWithoutThreadInput!
    where: ReactionOnThreadWhereUniqueInput!
}

input ReactionOnThreadUpdateWithWhereUniqueWithoutUserInput {
    data: ReactionOnThreadUpdateWithoutUserInput!
    where: ReactionOnThreadWhereUniqueInput!
}

input ReactionOnThreadUpdateWithoutThreadInput {
    createdAt: DateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    reaction: EnumReactionFieldUpdateOperationsInput
    user: UserUpdateOneRequiredWithoutReactionOnThreadInput
}

input ReactionOnThreadUpdateWithoutUserInput {
    createdAt: DateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    reaction: EnumReactionFieldUpdateOperationsInput
    thread: ThreadUpdateOneRequiredWithoutReactionOnThreadInput
}

input ReactionOnThreadUpsertWithWhereUniqueWithoutThreadInput {
    create: ReactionOnThreadCreateWithoutThreadInput!
    update: ReactionOnThreadUpdateWithoutThreadInput!
    where: ReactionOnThreadWhereUniqueInput!
}

input ReactionOnThreadUpsertWithWhereUniqueWithoutUserInput {
    create: ReactionOnThreadCreateWithoutUserInput!
    update: ReactionOnThreadUpdateWithoutUserInput!
    where: ReactionOnThreadWhereUniqueInput!
}

input ReactionOnThreadWhereInput {
    AND: [ReactionOnThreadWhereInput!]
    NOT: [ReactionOnThreadWhereInput!]
    OR: [ReactionOnThreadWhereInput!]
    createdAt: DateTimeFilter
    id: StringFilter
    reaction: EnumReactionFilter
    thread: ThreadRelationFilter
    threadId: StringFilter
    user: UserRelationFilter
    userId: StringFilter
}

input ReactionOnThreadWhereUniqueInput {
    id: String
}

type ReactionOnTimeline {
    createdAt: DateTime!
    id: String!
    reaction: Reaction!
    timeline: Timeline!
    timelineId: String!
    user: User!
    userId: String!
}

type ReactionOnTimelineCountAggregate {
    _all: Int!
    createdAt: Int!
    id: Int!
    reaction: Int!
    timelineId: Int!
    userId: Int!
}

input ReactionOnTimelineCountOrderByAggregateInput {
    createdAt: SortOrder
    id: SortOrder
    reaction: SortOrder
    timelineId: SortOrder
    userId: SortOrder
}

input ReactionOnTimelineCreateInput {
    createdAt: DateTime
    id: String
    reaction: Reaction!
    timeline: TimelineCreateNestedOneWithoutReactionOnTimelineInput!
    user: UserCreateNestedOneWithoutReactionOnTimelineInput!
}

input ReactionOnTimelineCreateManyInput {
    createdAt: DateTime
    id: String
    reaction: Reaction!
    timelineId: String!
    userId: String!
}

input ReactionOnTimelineCreateManyTimelineInput {
    createdAt: DateTime
    id: String
    reaction: Reaction!
    userId: String!
}

input ReactionOnTimelineCreateManyTimelineInputEnvelope {
    data: [ReactionOnTimelineCreateManyTimelineInput!]!
    skipDuplicates: Boolean
}

input ReactionOnTimelineCreateManyUserInput {
    createdAt: DateTime
    id: String
    reaction: Reaction!
    timelineId: String!
}

input ReactionOnTimelineCreateManyUserInputEnvelope {
    data: [ReactionOnTimelineCreateManyUserInput!]!
    skipDuplicates: Boolean
}

input ReactionOnTimelineCreateNestedManyWithoutTimelineInput {
    connect: [ReactionOnTimelineWhereUniqueInput!]
    connectOrCreate: [ReactionOnTimelineCreateOrConnectWithoutTimelineInput!]
    create: [ReactionOnTimelineCreateWithoutTimelineInput!]
    createMany: ReactionOnTimelineCreateManyTimelineInputEnvelope
}

input ReactionOnTimelineCreateNestedManyWithoutUserInput {
    connect: [ReactionOnTimelineWhereUniqueInput!]
    connectOrCreate: [ReactionOnTimelineCreateOrConnectWithoutUserInput!]
    create: [ReactionOnTimelineCreateWithoutUserInput!]
    createMany: ReactionOnTimelineCreateManyUserInputEnvelope
}

input ReactionOnTimelineCreateOrConnectWithoutTimelineInput {
    create: ReactionOnTimelineCreateWithoutTimelineInput!
    where: ReactionOnTimelineWhereUniqueInput!
}

input ReactionOnTimelineCreateOrConnectWithoutUserInput {
    create: ReactionOnTimelineCreateWithoutUserInput!
    where: ReactionOnTimelineWhereUniqueInput!
}

input ReactionOnTimelineCreateWithoutTimelineInput {
    createdAt: DateTime
    id: String
    reaction: Reaction!
    user: UserCreateNestedOneWithoutReactionOnTimelineInput!
}

input ReactionOnTimelineCreateWithoutUserInput {
    createdAt: DateTime
    id: String
    reaction: Reaction!
    timeline: TimelineCreateNestedOneWithoutReactionOnTimelineInput!
}

type ReactionOnTimelineGroupBy {
    _count: ReactionOnTimelineCountAggregate
    _max: ReactionOnTimelineMaxAggregate
    _min: ReactionOnTimelineMinAggregate
    createdAt: DateTime!
    id: String!
    reaction: Reaction!
    timelineId: String!
    userId: String!
}

input ReactionOnTimelineListRelationFilter {
    every: ReactionOnTimelineWhereInput
    none: ReactionOnTimelineWhereInput
    some: ReactionOnTimelineWhereInput
}

type ReactionOnTimelineMaxAggregate {
    createdAt: DateTime
    id: String
    reaction: Reaction
    timelineId: String
    userId: String
}

input ReactionOnTimelineMaxOrderByAggregateInput {
    createdAt: SortOrder
    id: SortOrder
    reaction: SortOrder
    timelineId: SortOrder
    userId: SortOrder
}

type ReactionOnTimelineMinAggregate {
    createdAt: DateTime
    id: String
    reaction: Reaction
    timelineId: String
    userId: String
}

input ReactionOnTimelineMinOrderByAggregateInput {
    createdAt: SortOrder
    id: SortOrder
    reaction: SortOrder
    timelineId: SortOrder
    userId: SortOrder
}

input ReactionOnTimelineOrderByRelationAggregateInput {
    _count: SortOrder
}

input ReactionOnTimelineOrderByWithAggregationInput {
    _count: ReactionOnTimelineCountOrderByAggregateInput
    _max: ReactionOnTimelineMaxOrderByAggregateInput
    _min: ReactionOnTimelineMinOrderByAggregateInput
    createdAt: SortOrder
    id: SortOrder
    reaction: SortOrder
    timelineId: SortOrder
    userId: SortOrder
}

input ReactionOnTimelineOrderByWithRelationInput {
    createdAt: SortOrder
    id: SortOrder
    reaction: SortOrder
    timeline: TimelineOrderByWithRelationInput
    timelineId: SortOrder
    user: UserOrderByWithRelationInput
    userId: SortOrder
}

enum ReactionOnTimelineScalarFieldEnum {
    createdAt
    id
    reaction
    timelineId
    userId
}

input ReactionOnTimelineScalarWhereInput {
    AND: [ReactionOnTimelineScalarWhereInput!]
    NOT: [ReactionOnTimelineScalarWhereInput!]
    OR: [ReactionOnTimelineScalarWhereInput!]
    createdAt: DateTimeFilter
    id: StringFilter
    reaction: EnumReactionFilter
    timelineId: StringFilter
    userId: StringFilter
}

input ReactionOnTimelineScalarWhereWithAggregatesInput {
    AND: [ReactionOnTimelineScalarWhereWithAggregatesInput!]
    NOT: [ReactionOnTimelineScalarWhereWithAggregatesInput!]
    OR: [ReactionOnTimelineScalarWhereWithAggregatesInput!]
    createdAt: DateTimeWithAggregatesFilter
    id: StringWithAggregatesFilter
    reaction: EnumReactionWithAggregatesFilter
    timelineId: StringWithAggregatesFilter
    userId: StringWithAggregatesFilter
}

input ReactionOnTimelineUpdateInput {
    createdAt: DateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    reaction: EnumReactionFieldUpdateOperationsInput
    timeline: TimelineUpdateOneRequiredWithoutReactionOnTimelineInput
    user: UserUpdateOneRequiredWithoutReactionOnTimelineInput
}

input ReactionOnTimelineUpdateManyMutationInput {
    createdAt: DateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    reaction: EnumReactionFieldUpdateOperationsInput
}

input ReactionOnTimelineUpdateManyWithWhereWithoutTimelineInput {
    data: ReactionOnTimelineUpdateManyMutationInput!
    where: ReactionOnTimelineScalarWhereInput!
}

input ReactionOnTimelineUpdateManyWithWhereWithoutUserInput {
    data: ReactionOnTimelineUpdateManyMutationInput!
    where: ReactionOnTimelineScalarWhereInput!
}

input ReactionOnTimelineUpdateManyWithoutTimelineInput {
    connect: [ReactionOnTimelineWhereUniqueInput!]
    connectOrCreate: [ReactionOnTimelineCreateOrConnectWithoutTimelineInput!]
    create: [ReactionOnTimelineCreateWithoutTimelineInput!]
    createMany: ReactionOnTimelineCreateManyTimelineInputEnvelope
    delete: [ReactionOnTimelineWhereUniqueInput!]
    deleteMany: [ReactionOnTimelineScalarWhereInput!]
    disconnect: [ReactionOnTimelineWhereUniqueInput!]
    set: [ReactionOnTimelineWhereUniqueInput!]
    update: [ReactionOnTimelineUpdateWithWhereUniqueWithoutTimelineInput!]
    updateMany: [ReactionOnTimelineUpdateManyWithWhereWithoutTimelineInput!]
    upsert: [ReactionOnTimelineUpsertWithWhereUniqueWithoutTimelineInput!]
}

input ReactionOnTimelineUpdateManyWithoutUserInput {
    connect: [ReactionOnTimelineWhereUniqueInput!]
    connectOrCreate: [ReactionOnTimelineCreateOrConnectWithoutUserInput!]
    create: [ReactionOnTimelineCreateWithoutUserInput!]
    createMany: ReactionOnTimelineCreateManyUserInputEnvelope
    delete: [ReactionOnTimelineWhereUniqueInput!]
    deleteMany: [ReactionOnTimelineScalarWhereInput!]
    disconnect: [ReactionOnTimelineWhereUniqueInput!]
    set: [ReactionOnTimelineWhereUniqueInput!]
    update: [ReactionOnTimelineUpdateWithWhereUniqueWithoutUserInput!]
    updateMany: [ReactionOnTimelineUpdateManyWithWhereWithoutUserInput!]
    upsert: [ReactionOnTimelineUpsertWithWhereUniqueWithoutUserInput!]
}

input ReactionOnTimelineUpdateWithWhereUniqueWithoutTimelineInput {
    data: ReactionOnTimelineUpdateWithoutTimelineInput!
    where: ReactionOnTimelineWhereUniqueInput!
}

input ReactionOnTimelineUpdateWithWhereUniqueWithoutUserInput {
    data: ReactionOnTimelineUpdateWithoutUserInput!
    where: ReactionOnTimelineWhereUniqueInput!
}

input ReactionOnTimelineUpdateWithoutTimelineInput {
    createdAt: DateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    reaction: EnumReactionFieldUpdateOperationsInput
    user: UserUpdateOneRequiredWithoutReactionOnTimelineInput
}

input ReactionOnTimelineUpdateWithoutUserInput {
    createdAt: DateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    reaction: EnumReactionFieldUpdateOperationsInput
    timeline: TimelineUpdateOneRequiredWithoutReactionOnTimelineInput
}

input ReactionOnTimelineUpsertWithWhereUniqueWithoutTimelineInput {
    create: ReactionOnTimelineCreateWithoutTimelineInput!
    update: ReactionOnTimelineUpdateWithoutTimelineInput!
    where: ReactionOnTimelineWhereUniqueInput!
}

input ReactionOnTimelineUpsertWithWhereUniqueWithoutUserInput {
    create: ReactionOnTimelineCreateWithoutUserInput!
    update: ReactionOnTimelineUpdateWithoutUserInput!
    where: ReactionOnTimelineWhereUniqueInput!
}

input ReactionOnTimelineWhereInput {
    AND: [ReactionOnTimelineWhereInput!]
    NOT: [ReactionOnTimelineWhereInput!]
    OR: [ReactionOnTimelineWhereInput!]
    createdAt: DateTimeFilter
    id: StringFilter
    reaction: EnumReactionFilter
    timeline: TimelineRelationFilter
    timelineId: StringFilter
    user: UserRelationFilter
    userId: StringFilter
}

input ReactionOnTimelineWhereUniqueInput {
    id: String
}

type ReactionOnVision {
    createdAt: DateTime!
    id: String!
    reaction: Reaction!
    user: User!
    userId: String!
    vision: Vision!
    visionId: String!
}

type ReactionOnVisionCountAggregate {
    _all: Int!
    createdAt: Int!
    id: Int!
    reaction: Int!
    userId: Int!
    visionId: Int!
}

input ReactionOnVisionCountOrderByAggregateInput {
    createdAt: SortOrder
    id: SortOrder
    reaction: SortOrder
    userId: SortOrder
    visionId: SortOrder
}

input ReactionOnVisionCreateInput {
    createdAt: DateTime
    id: String
    reaction: Reaction!
    user: UserCreateNestedOneWithoutReactionOnVisionInput!
    vision: VisionCreateNestedOneWithoutReactionOnVisionInput!
}

input ReactionOnVisionCreateManyInput {
    createdAt: DateTime
    id: String
    reaction: Reaction!
    userId: String!
    visionId: String!
}

input ReactionOnVisionCreateManyUserInput {
    createdAt: DateTime
    id: String
    reaction: Reaction!
    visionId: String!
}

input ReactionOnVisionCreateManyUserInputEnvelope {
    data: [ReactionOnVisionCreateManyUserInput!]!
    skipDuplicates: Boolean
}

input ReactionOnVisionCreateManyVisionInput {
    createdAt: DateTime
    id: String
    reaction: Reaction!
    userId: String!
}

input ReactionOnVisionCreateManyVisionInputEnvelope {
    data: [ReactionOnVisionCreateManyVisionInput!]!
    skipDuplicates: Boolean
}

input ReactionOnVisionCreateNestedManyWithoutUserInput {
    connect: [ReactionOnVisionWhereUniqueInput!]
    connectOrCreate: [ReactionOnVisionCreateOrConnectWithoutUserInput!]
    create: [ReactionOnVisionCreateWithoutUserInput!]
    createMany: ReactionOnVisionCreateManyUserInputEnvelope
}

input ReactionOnVisionCreateNestedManyWithoutVisionInput {
    connect: [ReactionOnVisionWhereUniqueInput!]
    connectOrCreate: [ReactionOnVisionCreateOrConnectWithoutVisionInput!]
    create: [ReactionOnVisionCreateWithoutVisionInput!]
    createMany: ReactionOnVisionCreateManyVisionInputEnvelope
}

input ReactionOnVisionCreateOrConnectWithoutUserInput {
    create: ReactionOnVisionCreateWithoutUserInput!
    where: ReactionOnVisionWhereUniqueInput!
}

input ReactionOnVisionCreateOrConnectWithoutVisionInput {
    create: ReactionOnVisionCreateWithoutVisionInput!
    where: ReactionOnVisionWhereUniqueInput!
}

input ReactionOnVisionCreateWithoutUserInput {
    createdAt: DateTime
    id: String
    reaction: Reaction!
    vision: VisionCreateNestedOneWithoutReactionOnVisionInput!
}

input ReactionOnVisionCreateWithoutVisionInput {
    createdAt: DateTime
    id: String
    reaction: Reaction!
    user: UserCreateNestedOneWithoutReactionOnVisionInput!
}

type ReactionOnVisionGroupBy {
    _count: ReactionOnVisionCountAggregate
    _max: ReactionOnVisionMaxAggregate
    _min: ReactionOnVisionMinAggregate
    createdAt: DateTime!
    id: String!
    reaction: Reaction!
    userId: String!
    visionId: String!
}

input ReactionOnVisionListRelationFilter {
    every: ReactionOnVisionWhereInput
    none: ReactionOnVisionWhereInput
    some: ReactionOnVisionWhereInput
}

type ReactionOnVisionMaxAggregate {
    createdAt: DateTime
    id: String
    reaction: Reaction
    userId: String
    visionId: String
}

input ReactionOnVisionMaxOrderByAggregateInput {
    createdAt: SortOrder
    id: SortOrder
    reaction: SortOrder
    userId: SortOrder
    visionId: SortOrder
}

type ReactionOnVisionMinAggregate {
    createdAt: DateTime
    id: String
    reaction: Reaction
    userId: String
    visionId: String
}

input ReactionOnVisionMinOrderByAggregateInput {
    createdAt: SortOrder
    id: SortOrder
    reaction: SortOrder
    userId: SortOrder
    visionId: SortOrder
}

input ReactionOnVisionOrderByRelationAggregateInput {
    _count: SortOrder
}

input ReactionOnVisionOrderByWithAggregationInput {
    _count: ReactionOnVisionCountOrderByAggregateInput
    _max: ReactionOnVisionMaxOrderByAggregateInput
    _min: ReactionOnVisionMinOrderByAggregateInput
    createdAt: SortOrder
    id: SortOrder
    reaction: SortOrder
    userId: SortOrder
    visionId: SortOrder
}

input ReactionOnVisionOrderByWithRelationInput {
    createdAt: SortOrder
    id: SortOrder
    reaction: SortOrder
    user: UserOrderByWithRelationInput
    userId: SortOrder
    vision: VisionOrderByWithRelationInput
    visionId: SortOrder
}

enum ReactionOnVisionScalarFieldEnum {
    createdAt
    id
    reaction
    userId
    visionId
}

input ReactionOnVisionScalarWhereInput {
    AND: [ReactionOnVisionScalarWhereInput!]
    NOT: [ReactionOnVisionScalarWhereInput!]
    OR: [ReactionOnVisionScalarWhereInput!]
    createdAt: DateTimeFilter
    id: StringFilter
    reaction: EnumReactionFilter
    userId: StringFilter
    visionId: StringFilter
}

input ReactionOnVisionScalarWhereWithAggregatesInput {
    AND: [ReactionOnVisionScalarWhereWithAggregatesInput!]
    NOT: [ReactionOnVisionScalarWhereWithAggregatesInput!]
    OR: [ReactionOnVisionScalarWhereWithAggregatesInput!]
    createdAt: DateTimeWithAggregatesFilter
    id: StringWithAggregatesFilter
    reaction: EnumReactionWithAggregatesFilter
    userId: StringWithAggregatesFilter
    visionId: StringWithAggregatesFilter
}

input ReactionOnVisionUpdateInput {
    createdAt: DateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    reaction: EnumReactionFieldUpdateOperationsInput
    user: UserUpdateOneRequiredWithoutReactionOnVisionInput
    vision: VisionUpdateOneRequiredWithoutReactionOnVisionInput
}

input ReactionOnVisionUpdateManyMutationInput {
    createdAt: DateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    reaction: EnumReactionFieldUpdateOperationsInput
}

input ReactionOnVisionUpdateManyWithWhereWithoutUserInput {
    data: ReactionOnVisionUpdateManyMutationInput!
    where: ReactionOnVisionScalarWhereInput!
}

input ReactionOnVisionUpdateManyWithWhereWithoutVisionInput {
    data: ReactionOnVisionUpdateManyMutationInput!
    where: ReactionOnVisionScalarWhereInput!
}

input ReactionOnVisionUpdateManyWithoutUserInput {
    connect: [ReactionOnVisionWhereUniqueInput!]
    connectOrCreate: [ReactionOnVisionCreateOrConnectWithoutUserInput!]
    create: [ReactionOnVisionCreateWithoutUserInput!]
    createMany: ReactionOnVisionCreateManyUserInputEnvelope
    delete: [ReactionOnVisionWhereUniqueInput!]
    deleteMany: [ReactionOnVisionScalarWhereInput!]
    disconnect: [ReactionOnVisionWhereUniqueInput!]
    set: [ReactionOnVisionWhereUniqueInput!]
    update: [ReactionOnVisionUpdateWithWhereUniqueWithoutUserInput!]
    updateMany: [ReactionOnVisionUpdateManyWithWhereWithoutUserInput!]
    upsert: [ReactionOnVisionUpsertWithWhereUniqueWithoutUserInput!]
}

input ReactionOnVisionUpdateManyWithoutVisionInput {
    connect: [ReactionOnVisionWhereUniqueInput!]
    connectOrCreate: [ReactionOnVisionCreateOrConnectWithoutVisionInput!]
    create: [ReactionOnVisionCreateWithoutVisionInput!]
    createMany: ReactionOnVisionCreateManyVisionInputEnvelope
    delete: [ReactionOnVisionWhereUniqueInput!]
    deleteMany: [ReactionOnVisionScalarWhereInput!]
    disconnect: [ReactionOnVisionWhereUniqueInput!]
    set: [ReactionOnVisionWhereUniqueInput!]
    update: [ReactionOnVisionUpdateWithWhereUniqueWithoutVisionInput!]
    updateMany: [ReactionOnVisionUpdateManyWithWhereWithoutVisionInput!]
    upsert: [ReactionOnVisionUpsertWithWhereUniqueWithoutVisionInput!]
}

input ReactionOnVisionUpdateWithWhereUniqueWithoutUserInput {
    data: ReactionOnVisionUpdateWithoutUserInput!
    where: ReactionOnVisionWhereUniqueInput!
}

input ReactionOnVisionUpdateWithWhereUniqueWithoutVisionInput {
    data: ReactionOnVisionUpdateWithoutVisionInput!
    where: ReactionOnVisionWhereUniqueInput!
}

input ReactionOnVisionUpdateWithoutUserInput {
    createdAt: DateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    reaction: EnumReactionFieldUpdateOperationsInput
    vision: VisionUpdateOneRequiredWithoutReactionOnVisionInput
}

input ReactionOnVisionUpdateWithoutVisionInput {
    createdAt: DateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    reaction: EnumReactionFieldUpdateOperationsInput
    user: UserUpdateOneRequiredWithoutReactionOnVisionInput
}

input ReactionOnVisionUpsertWithWhereUniqueWithoutUserInput {
    create: ReactionOnVisionCreateWithoutUserInput!
    update: ReactionOnVisionUpdateWithoutUserInput!
    where: ReactionOnVisionWhereUniqueInput!
}

input ReactionOnVisionUpsertWithWhereUniqueWithoutVisionInput {
    create: ReactionOnVisionCreateWithoutVisionInput!
    update: ReactionOnVisionUpdateWithoutVisionInput!
    where: ReactionOnVisionWhereUniqueInput!
}

input ReactionOnVisionWhereInput {
    AND: [ReactionOnVisionWhereInput!]
    NOT: [ReactionOnVisionWhereInput!]
    OR: [ReactionOnVisionWhereInput!]
    createdAt: DateTimeFilter
    id: StringFilter
    reaction: EnumReactionFilter
    user: UserRelationFilter
    userId: StringFilter
    vision: VisionRelationFilter
    visionId: StringFilter
}

input ReactionOnVisionWhereUniqueInput {
    id: String
}

type Reference {
    Vision(cursor: VisionWhereUniqueInput, distinct: [VisionScalarFieldEnum!], orderBy: [VisionOrderByWithRelationInput!], skip: Int, take: Int, where: VisionWhereInput): [Vision!]!
    _count: ReferenceCount
    id: String!
    snapshots(cursor: SnapshotWhereUniqueInput, distinct: [SnapshotScalarFieldEnum!], orderBy: [SnapshotOrderByWithRelationInput!], skip: Int, take: Int, where: SnapshotWhereInput): [Snapshot!]!
}

type ReferenceCount {
    Vision: Int!
    snapshots: Int!
}

type ReferenceCountAggregate {
    _all: Int!
    id: Int!
}

input ReferenceCountOrderByAggregateInput {
    id: SortOrder
}

input ReferenceCreateInput {
    Vision: VisionCreateNestedManyWithoutReferenceInput
    id: String
    snapshots: SnapshotCreateNestedManyWithoutReferencesInput
}

input ReferenceCreateManyInput {
    id: String
}

input ReferenceCreateNestedManyWithoutSnapshotsInput {
    connect: [ReferenceWhereUniqueInput!]
    connectOrCreate: [ReferenceCreateOrConnectWithoutSnapshotsInput!]
    create: [ReferenceCreateWithoutSnapshotsInput!]
}

input ReferenceCreateNestedOneWithoutVisionInput {
    connect: ReferenceWhereUniqueInput
    connectOrCreate: ReferenceCreateOrConnectWithoutVisionInput
    create: ReferenceCreateWithoutVisionInput
}

input ReferenceCreateOrConnectWithoutSnapshotsInput {
    create: ReferenceCreateWithoutSnapshotsInput!
    where: ReferenceWhereUniqueInput!
}

input ReferenceCreateOrConnectWithoutVisionInput {
    create: ReferenceCreateWithoutVisionInput!
    where: ReferenceWhereUniqueInput!
}

input ReferenceCreateWithoutSnapshotsInput {
    Vision: VisionCreateNestedManyWithoutReferenceInput
    id: String
}

input ReferenceCreateWithoutVisionInput {
    id: String
    snapshots: SnapshotCreateNestedManyWithoutReferencesInput
}

type ReferenceGroupBy {
    _count: ReferenceCountAggregate
    _max: ReferenceMaxAggregate
    _min: ReferenceMinAggregate
    id: String!
}

input ReferenceListRelationFilter {
    every: ReferenceWhereInput
    none: ReferenceWhereInput
    some: ReferenceWhereInput
}

type ReferenceMaxAggregate {
    id: String
}

input ReferenceMaxOrderByAggregateInput {
    id: SortOrder
}

type ReferenceMinAggregate {
    id: String
}

input ReferenceMinOrderByAggregateInput {
    id: SortOrder
}

input ReferenceOrderByRelationAggregateInput {
    _count: SortOrder
}

input ReferenceOrderByWithAggregationInput {
    _count: ReferenceCountOrderByAggregateInput
    _max: ReferenceMaxOrderByAggregateInput
    _min: ReferenceMinOrderByAggregateInput
    id: SortOrder
}

input ReferenceOrderByWithRelationInput {
    Vision: VisionOrderByRelationAggregateInput
    id: SortOrder
    snapshots: SnapshotOrderByRelationAggregateInput
}

input ReferenceRelationFilter {
    is: ReferenceWhereInput
    isNot: ReferenceWhereInput
}

enum ReferenceScalarFieldEnum {
    id
}

input ReferenceScalarWhereInput {
    AND: [ReferenceScalarWhereInput!]
    NOT: [ReferenceScalarWhereInput!]
    OR: [ReferenceScalarWhereInput!]
    id: StringFilter
}

input ReferenceScalarWhereWithAggregatesInput {
    AND: [ReferenceScalarWhereWithAggregatesInput!]
    NOT: [ReferenceScalarWhereWithAggregatesInput!]
    OR: [ReferenceScalarWhereWithAggregatesInput!]
    id: StringWithAggregatesFilter
}

input ReferenceUpdateInput {
    Vision: VisionUpdateManyWithoutReferenceInput
    id: StringFieldUpdateOperationsInput
    snapshots: SnapshotUpdateManyWithoutReferencesInput
}

input ReferenceUpdateManyMutationInput {
    id: StringFieldUpdateOperationsInput
}

input ReferenceUpdateManyWithWhereWithoutSnapshotsInput {
    data: ReferenceUpdateManyMutationInput!
    where: ReferenceScalarWhereInput!
}

input ReferenceUpdateManyWithoutSnapshotsInput {
    connect: [ReferenceWhereUniqueInput!]
    connectOrCreate: [ReferenceCreateOrConnectWithoutSnapshotsInput!]
    create: [ReferenceCreateWithoutSnapshotsInput!]
    delete: [ReferenceWhereUniqueInput!]
    deleteMany: [ReferenceScalarWhereInput!]
    disconnect: [ReferenceWhereUniqueInput!]
    set: [ReferenceWhereUniqueInput!]
    update: [ReferenceUpdateWithWhereUniqueWithoutSnapshotsInput!]
    updateMany: [ReferenceUpdateManyWithWhereWithoutSnapshotsInput!]
    upsert: [ReferenceUpsertWithWhereUniqueWithoutSnapshotsInput!]
}

input ReferenceUpdateOneWithoutVisionInput {
    connect: ReferenceWhereUniqueInput
    connectOrCreate: ReferenceCreateOrConnectWithoutVisionInput
    create: ReferenceCreateWithoutVisionInput
    delete: Boolean
    disconnect: Boolean
    update: ReferenceUpdateWithoutVisionInput
    upsert: ReferenceUpsertWithoutVisionInput
}

input ReferenceUpdateWithWhereUniqueWithoutSnapshotsInput {
    data: ReferenceUpdateWithoutSnapshotsInput!
    where: ReferenceWhereUniqueInput!
}

input ReferenceUpdateWithoutSnapshotsInput {
    Vision: VisionUpdateManyWithoutReferenceInput
    id: StringFieldUpdateOperationsInput
}

input ReferenceUpdateWithoutVisionInput {
    id: StringFieldUpdateOperationsInput
    snapshots: SnapshotUpdateManyWithoutReferencesInput
}

input ReferenceUpsertWithWhereUniqueWithoutSnapshotsInput {
    create: ReferenceCreateWithoutSnapshotsInput!
    update: ReferenceUpdateWithoutSnapshotsInput!
    where: ReferenceWhereUniqueInput!
}

input ReferenceUpsertWithoutVisionInput {
    create: ReferenceCreateWithoutVisionInput!
    update: ReferenceUpdateWithoutVisionInput!
}

input ReferenceWhereInput {
    AND: [ReferenceWhereInput!]
    NOT: [ReferenceWhereInput!]
    OR: [ReferenceWhereInput!]
    Vision: VisionListRelationFilter
    id: StringFilter
    snapshots: SnapshotListRelationFilter
}

input ReferenceWhereUniqueInput {
    id: String
}

type Session {
    expires: DateTime!
    id: String!
    sessionToken: String!
    user: User!
    userId: String!
}

type SessionCountAggregate {
    _all: Int!
    expires: Int!
    id: Int!
    sessionToken: Int!
    userId: Int!
}

input SessionCountOrderByAggregateInput {
    expires: SortOrder
    id: SortOrder
    sessionToken: SortOrder
    userId: SortOrder
}

input SessionCreateInput {
    expires: DateTime!
    id: String
    sessionToken: String!
    user: UserCreateNestedOneWithoutSessionsInput!
}

input SessionCreateManyInput {
    expires: DateTime!
    id: String
    sessionToken: String!
    userId: String!
}

input SessionCreateManyUserInput {
    expires: DateTime!
    id: String
    sessionToken: String!
}

input SessionCreateManyUserInputEnvelope {
    data: [SessionCreateManyUserInput!]!
    skipDuplicates: Boolean
}

input SessionCreateNestedManyWithoutUserInput {
    connect: [SessionWhereUniqueInput!]
    connectOrCreate: [SessionCreateOrConnectWithoutUserInput!]
    create: [SessionCreateWithoutUserInput!]
    createMany: SessionCreateManyUserInputEnvelope
}

input SessionCreateOrConnectWithoutUserInput {
    create: SessionCreateWithoutUserInput!
    where: SessionWhereUniqueInput!
}

input SessionCreateWithoutUserInput {
    expires: DateTime!
    id: String
    sessionToken: String!
}

type SessionGroupBy {
    _count: SessionCountAggregate
    _max: SessionMaxAggregate
    _min: SessionMinAggregate
    expires: DateTime!
    id: String!
    sessionToken: String!
    userId: String!
}

input SessionListRelationFilter {
    every: SessionWhereInput
    none: SessionWhereInput
    some: SessionWhereInput
}

type SessionMaxAggregate {
    expires: DateTime
    id: String
    sessionToken: String
    userId: String
}

input SessionMaxOrderByAggregateInput {
    expires: SortOrder
    id: SortOrder
    sessionToken: SortOrder
    userId: SortOrder
}

type SessionMinAggregate {
    expires: DateTime
    id: String
    sessionToken: String
    userId: String
}

input SessionMinOrderByAggregateInput {
    expires: SortOrder
    id: SortOrder
    sessionToken: SortOrder
    userId: SortOrder
}

input SessionOrderByRelationAggregateInput {
    _count: SortOrder
}

input SessionOrderByWithAggregationInput {
    _count: SessionCountOrderByAggregateInput
    _max: SessionMaxOrderByAggregateInput
    _min: SessionMinOrderByAggregateInput
    expires: SortOrder
    id: SortOrder
    sessionToken: SortOrder
    userId: SortOrder
}

input SessionOrderByWithRelationInput {
    expires: SortOrder
    id: SortOrder
    sessionToken: SortOrder
    user: UserOrderByWithRelationInput
    userId: SortOrder
}

enum SessionScalarFieldEnum {
    expires
    id
    sessionToken
    userId
}

input SessionScalarWhereInput {
    AND: [SessionScalarWhereInput!]
    NOT: [SessionScalarWhereInput!]
    OR: [SessionScalarWhereInput!]
    expires: DateTimeFilter
    id: StringFilter
    sessionToken: StringFilter
    userId: StringFilter
}

input SessionScalarWhereWithAggregatesInput {
    AND: [SessionScalarWhereWithAggregatesInput!]
    NOT: [SessionScalarWhereWithAggregatesInput!]
    OR: [SessionScalarWhereWithAggregatesInput!]
    expires: DateTimeWithAggregatesFilter
    id: StringWithAggregatesFilter
    sessionToken: StringWithAggregatesFilter
    userId: StringWithAggregatesFilter
}

input SessionUpdateInput {
    expires: DateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    sessionToken: StringFieldUpdateOperationsInput
    user: UserUpdateOneRequiredWithoutSessionsInput
}

input SessionUpdateManyMutationInput {
    expires: DateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    sessionToken: StringFieldUpdateOperationsInput
}

input SessionUpdateManyWithWhereWithoutUserInput {
    data: SessionUpdateManyMutationInput!
    where: SessionScalarWhereInput!
}

input SessionUpdateManyWithoutUserInput {
    connect: [SessionWhereUniqueInput!]
    connectOrCreate: [SessionCreateOrConnectWithoutUserInput!]
    create: [SessionCreateWithoutUserInput!]
    createMany: SessionCreateManyUserInputEnvelope
    delete: [SessionWhereUniqueInput!]
    deleteMany: [SessionScalarWhereInput!]
    disconnect: [SessionWhereUniqueInput!]
    set: [SessionWhereUniqueInput!]
    update: [SessionUpdateWithWhereUniqueWithoutUserInput!]
    updateMany: [SessionUpdateManyWithWhereWithoutUserInput!]
    upsert: [SessionUpsertWithWhereUniqueWithoutUserInput!]
}

input SessionUpdateWithWhereUniqueWithoutUserInput {
    data: SessionUpdateWithoutUserInput!
    where: SessionWhereUniqueInput!
}

input SessionUpdateWithoutUserInput {
    expires: DateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    sessionToken: StringFieldUpdateOperationsInput
}

input SessionUpsertWithWhereUniqueWithoutUserInput {
    create: SessionCreateWithoutUserInput!
    update: SessionUpdateWithoutUserInput!
    where: SessionWhereUniqueInput!
}

input SessionWhereInput {
    AND: [SessionWhereInput!]
    NOT: [SessionWhereInput!]
    OR: [SessionWhereInput!]
    expires: DateTimeFilter
    id: StringFilter
    sessionToken: StringFilter
    user: UserRelationFilter
    userId: StringFilter
}

input SessionWhereUniqueInput {
    id: String
    sessionToken: String
}

type Snapshot {
    _count: SnapshotCount
    caption: String!
    createdAt: DateTime!
    id: String!
    references(cursor: ReferenceWhereUniqueInput, distinct: [ReferenceScalarFieldEnum!], orderBy: [ReferenceOrderByWithRelationInput!], skip: Int, take: Int, where: ReferenceWhereInput): [Reference!]!
    s3Url: String!
    sourceUrl: String!
    versionId: String!
}

type SnapshotCount {
    references: Int!
}

type SnapshotCountAggregate {
    _all: Int!
    caption: Int!
    createdAt: Int!
    id: Int!
    s3Url: Int!
    sourceUrl: Int!
    versionId: Int!
}

input SnapshotCountOrderByAggregateInput {
    caption: SortOrder
    createdAt: SortOrder
    id: SortOrder
    s3Url: SortOrder
    sourceUrl: SortOrder
    versionId: SortOrder
}

input SnapshotCreateInput {
    caption: String!
    createdAt: DateTime
    id: String
    references: ReferenceCreateNestedManyWithoutSnapshotsInput
    s3Url: String!
    sourceUrl: String!
    versionId: String!
}

input SnapshotCreateManyInput {
    caption: String!
    createdAt: DateTime
    id: String
    s3Url: String!
    sourceUrl: String!
    versionId: String!
}

input SnapshotCreateNestedManyWithoutReferencesInput {
    connect: [SnapshotWhereUniqueInput!]
    connectOrCreate: [SnapshotCreateOrConnectWithoutReferencesInput!]
    create: [SnapshotCreateWithoutReferencesInput!]
}

input SnapshotCreateOrConnectWithoutReferencesInput {
    create: SnapshotCreateWithoutReferencesInput!
    where: SnapshotWhereUniqueInput!
}

input SnapshotCreateWithoutReferencesInput {
    caption: String!
    createdAt: DateTime
    id: String
    s3Url: String!
    sourceUrl: String!
    versionId: String!
}

type SnapshotGroupBy {
    _count: SnapshotCountAggregate
    _max: SnapshotMaxAggregate
    _min: SnapshotMinAggregate
    caption: String!
    createdAt: DateTime!
    id: String!
    s3Url: String!
    sourceUrl: String!
    versionId: String!
}

input SnapshotListRelationFilter {
    every: SnapshotWhereInput
    none: SnapshotWhereInput
    some: SnapshotWhereInput
}

type SnapshotMaxAggregate {
    caption: String
    createdAt: DateTime
    id: String
    s3Url: String
    sourceUrl: String
    versionId: String
}

input SnapshotMaxOrderByAggregateInput {
    caption: SortOrder
    createdAt: SortOrder
    id: SortOrder
    s3Url: SortOrder
    sourceUrl: SortOrder
    versionId: SortOrder
}

type SnapshotMinAggregate {
    caption: String
    createdAt: DateTime
    id: String
    s3Url: String
    sourceUrl: String
    versionId: String
}

input SnapshotMinOrderByAggregateInput {
    caption: SortOrder
    createdAt: SortOrder
    id: SortOrder
    s3Url: SortOrder
    sourceUrl: SortOrder
    versionId: SortOrder
}

input SnapshotOrderByRelationAggregateInput {
    _count: SortOrder
}

input SnapshotOrderByWithAggregationInput {
    _count: SnapshotCountOrderByAggregateInput
    _max: SnapshotMaxOrderByAggregateInput
    _min: SnapshotMinOrderByAggregateInput
    caption: SortOrder
    createdAt: SortOrder
    id: SortOrder
    s3Url: SortOrder
    sourceUrl: SortOrder
    versionId: SortOrder
}

input SnapshotOrderByWithRelationInput {
    caption: SortOrder
    createdAt: SortOrder
    id: SortOrder
    references: ReferenceOrderByRelationAggregateInput
    s3Url: SortOrder
    sourceUrl: SortOrder
    versionId: SortOrder
}

enum SnapshotScalarFieldEnum {
    caption
    createdAt
    id
    s3Url
    sourceUrl
    versionId
}

input SnapshotScalarWhereInput {
    AND: [SnapshotScalarWhereInput!]
    NOT: [SnapshotScalarWhereInput!]
    OR: [SnapshotScalarWhereInput!]
    caption: StringFilter
    createdAt: DateTimeFilter
    id: StringFilter
    s3Url: StringFilter
    sourceUrl: StringFilter
    versionId: StringFilter
}

input SnapshotScalarWhereWithAggregatesInput {
    AND: [SnapshotScalarWhereWithAggregatesInput!]
    NOT: [SnapshotScalarWhereWithAggregatesInput!]
    OR: [SnapshotScalarWhereWithAggregatesInput!]
    caption: StringWithAggregatesFilter
    createdAt: DateTimeWithAggregatesFilter
    id: StringWithAggregatesFilter
    s3Url: StringWithAggregatesFilter
    sourceUrl: StringWithAggregatesFilter
    versionId: StringWithAggregatesFilter
}

input SnapshotUpdateInput {
    caption: StringFieldUpdateOperationsInput
    createdAt: DateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    references: ReferenceUpdateManyWithoutSnapshotsInput
    s3Url: StringFieldUpdateOperationsInput
    sourceUrl: StringFieldUpdateOperationsInput
    versionId: StringFieldUpdateOperationsInput
}

input SnapshotUpdateManyMutationInput {
    caption: StringFieldUpdateOperationsInput
    createdAt: DateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    s3Url: StringFieldUpdateOperationsInput
    sourceUrl: StringFieldUpdateOperationsInput
    versionId: StringFieldUpdateOperationsInput
}

input SnapshotUpdateManyWithWhereWithoutReferencesInput {
    data: SnapshotUpdateManyMutationInput!
    where: SnapshotScalarWhereInput!
}

input SnapshotUpdateManyWithoutReferencesInput {
    connect: [SnapshotWhereUniqueInput!]
    connectOrCreate: [SnapshotCreateOrConnectWithoutReferencesInput!]
    create: [SnapshotCreateWithoutReferencesInput!]
    delete: [SnapshotWhereUniqueInput!]
    deleteMany: [SnapshotScalarWhereInput!]
    disconnect: [SnapshotWhereUniqueInput!]
    set: [SnapshotWhereUniqueInput!]
    update: [SnapshotUpdateWithWhereUniqueWithoutReferencesInput!]
    updateMany: [SnapshotUpdateManyWithWhereWithoutReferencesInput!]
    upsert: [SnapshotUpsertWithWhereUniqueWithoutReferencesInput!]
}

input SnapshotUpdateWithWhereUniqueWithoutReferencesInput {
    data: SnapshotUpdateWithoutReferencesInput!
    where: SnapshotWhereUniqueInput!
}

input SnapshotUpdateWithoutReferencesInput {
    caption: StringFieldUpdateOperationsInput
    createdAt: DateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    s3Url: StringFieldUpdateOperationsInput
    sourceUrl: StringFieldUpdateOperationsInput
    versionId: StringFieldUpdateOperationsInput
}

input SnapshotUpsertWithWhereUniqueWithoutReferencesInput {
    create: SnapshotCreateWithoutReferencesInput!
    update: SnapshotUpdateWithoutReferencesInput!
    where: SnapshotWhereUniqueInput!
}

input SnapshotWhereInput {
    AND: [SnapshotWhereInput!]
    NOT: [SnapshotWhereInput!]
    OR: [SnapshotWhereInput!]
    caption: StringFilter
    createdAt: DateTimeFilter
    id: StringFilter
    references: ReferenceListRelationFilter
    s3Url: StringFilter
    sourceUrl: StringFilter
    versionId: StringFilter
}

input SnapshotWhereUniqueInput {
    id: String
}

enum SortOrder {
    asc
    desc
}

input StringFieldUpdateOperationsInput {
    set: String
}

input StringFilter {
    contains: String
    endsWith: String
    equals: String
    gt: String
    gte: String
    in: [String!]
    lt: String
    lte: String
    mode: QueryMode
    not: NestedStringFilter
    notIn: [String!]
    startsWith: String
}

input StringNullableFilter {
    contains: String
    endsWith: String
    equals: String
    gt: String
    gte: String
    in: [String!]
    lt: String
    lte: String
    mode: QueryMode
    not: NestedStringNullableFilter
    notIn: [String!]
    startsWith: String
}

input StringNullableWithAggregatesFilter {
    _count: NestedIntNullableFilter
    _max: NestedStringNullableFilter
    _min: NestedStringNullableFilter
    contains: String
    endsWith: String
    equals: String
    gt: String
    gte: String
    in: [String!]
    lt: String
    lte: String
    mode: QueryMode
    not: NestedStringNullableWithAggregatesFilter
    notIn: [String!]
    startsWith: String
}

input StringWithAggregatesFilter {
    _count: NestedIntFilter
    _max: NestedStringFilter
    _min: NestedStringFilter
    contains: String
    endsWith: String
    equals: String
    gt: String
    gte: String
    in: [String!]
    lt: String
    lte: String
    mode: QueryMode
    not: NestedStringWithAggregatesFilter
    notIn: [String!]
    startsWith: String
}

type Tag {
    _count: TagCount
    id: Int!
    label: String!
    tagsOnPremises(cursor: TagsOnPremisesWhereUniqueInput, distinct: [TagsOnPremisesScalarFieldEnum!], orderBy: [TagsOnPremisesOrderByWithRelationInput!], skip: Int, take: Int, where: TagsOnPremisesWhereInput): [TagsOnPremises!]!
    tagsOnTimelines(cursor: TagsOnTimelinesWhereUniqueInput, distinct: [TagsOnTimelinesScalarFieldEnum!], orderBy: [TagsOnTimelinesOrderByWithRelationInput!], skip: Int, take: Int, where: TagsOnTimelinesWhereInput): [TagsOnTimelines!]!
}

type TagAvgAggregate {
    id: Float
}

input TagAvgOrderByAggregateInput {
    id: SortOrder
}

type TagCount {
    tagsOnPremises: Int!
    tagsOnTimelines: Int!
}

type TagCountAggregate {
    _all: Int!
    id: Int!
    label: Int!
}

input TagCountOrderByAggregateInput {
    id: SortOrder
    label: SortOrder
}

input TagCreateInput {
    label: String!
    tagsOnPremises: TagsOnPremisesCreateNestedManyWithoutTagInput
    tagsOnTimelines: TagsOnTimelinesCreateNestedManyWithoutTagInput
}

input TagCreateManyInput {
    id: Int
    label: String!
}

input TagCreateNestedOneWithoutTagsOnPremisesInput {
    connect: TagWhereUniqueInput
    connectOrCreate: TagCreateOrConnectWithoutTagsOnPremisesInput
    create: TagCreateWithoutTagsOnPremisesInput
}

input TagCreateNestedOneWithoutTagsOnTimelinesInput {
    connect: TagWhereUniqueInput
    connectOrCreate: TagCreateOrConnectWithoutTagsOnTimelinesInput
    create: TagCreateWithoutTagsOnTimelinesInput
}

input TagCreateOrConnectWithoutTagsOnPremisesInput {
    create: TagCreateWithoutTagsOnPremisesInput!
    where: TagWhereUniqueInput!
}

input TagCreateOrConnectWithoutTagsOnTimelinesInput {
    create: TagCreateWithoutTagsOnTimelinesInput!
    where: TagWhereUniqueInput!
}

input TagCreateWithoutTagsOnPremisesInput {
    label: String!
    tagsOnTimelines: TagsOnTimelinesCreateNestedManyWithoutTagInput
}

input TagCreateWithoutTagsOnTimelinesInput {
    label: String!
    tagsOnPremises: TagsOnPremisesCreateNestedManyWithoutTagInput
}

type TagGroupBy {
    _avg: TagAvgAggregate
    _count: TagCountAggregate
    _max: TagMaxAggregate
    _min: TagMinAggregate
    _sum: TagSumAggregate
    id: Int!
    label: String!
}

type TagMaxAggregate {
    id: Int
    label: String
}

input TagMaxOrderByAggregateInput {
    id: SortOrder
    label: SortOrder
}

type TagMinAggregate {
    id: Int
    label: String
}

input TagMinOrderByAggregateInput {
    id: SortOrder
    label: SortOrder
}

input TagOrderByWithAggregationInput {
    _avg: TagAvgOrderByAggregateInput
    _count: TagCountOrderByAggregateInput
    _max: TagMaxOrderByAggregateInput
    _min: TagMinOrderByAggregateInput
    _sum: TagSumOrderByAggregateInput
    id: SortOrder
    label: SortOrder
}

input TagOrderByWithRelationInput {
    id: SortOrder
    label: SortOrder
    tagsOnPremises: TagsOnPremisesOrderByRelationAggregateInput
    tagsOnTimelines: TagsOnTimelinesOrderByRelationAggregateInput
}

input TagRelationFilter {
    is: TagWhereInput
    isNot: TagWhereInput
}

enum TagScalarFieldEnum {
    id
    label
}

input TagScalarWhereWithAggregatesInput {
    AND: [TagScalarWhereWithAggregatesInput!]
    NOT: [TagScalarWhereWithAggregatesInput!]
    OR: [TagScalarWhereWithAggregatesInput!]
    id: IntWithAggregatesFilter
    label: StringWithAggregatesFilter
}

type TagSumAggregate {
    id: Int
}

input TagSumOrderByAggregateInput {
    id: SortOrder
}

input TagUpdateInput {
    label: StringFieldUpdateOperationsInput
    tagsOnPremises: TagsOnPremisesUpdateManyWithoutTagInput
    tagsOnTimelines: TagsOnTimelinesUpdateManyWithoutTagInput
}

input TagUpdateManyMutationInput {
    label: StringFieldUpdateOperationsInput
}

input TagUpdateOneRequiredWithoutTagsOnPremisesInput {
    connect: TagWhereUniqueInput
    connectOrCreate: TagCreateOrConnectWithoutTagsOnPremisesInput
    create: TagCreateWithoutTagsOnPremisesInput
    update: TagUpdateWithoutTagsOnPremisesInput
    upsert: TagUpsertWithoutTagsOnPremisesInput
}

input TagUpdateOneRequiredWithoutTagsOnTimelinesInput {
    connect: TagWhereUniqueInput
    connectOrCreate: TagCreateOrConnectWithoutTagsOnTimelinesInput
    create: TagCreateWithoutTagsOnTimelinesInput
    update: TagUpdateWithoutTagsOnTimelinesInput
    upsert: TagUpsertWithoutTagsOnTimelinesInput
}

input TagUpdateWithoutTagsOnPremisesInput {
    label: StringFieldUpdateOperationsInput
    tagsOnTimelines: TagsOnTimelinesUpdateManyWithoutTagInput
}

input TagUpdateWithoutTagsOnTimelinesInput {
    label: StringFieldUpdateOperationsInput
    tagsOnPremises: TagsOnPremisesUpdateManyWithoutTagInput
}

input TagUpsertWithoutTagsOnPremisesInput {
    create: TagCreateWithoutTagsOnPremisesInput!
    update: TagUpdateWithoutTagsOnPremisesInput!
}

input TagUpsertWithoutTagsOnTimelinesInput {
    create: TagCreateWithoutTagsOnTimelinesInput!
    update: TagUpdateWithoutTagsOnTimelinesInput!
}

input TagWhereInput {
    AND: [TagWhereInput!]
    NOT: [TagWhereInput!]
    OR: [TagWhereInput!]
    id: IntFilter
    label: StringFilter
    tagsOnPremises: TagsOnPremisesListRelationFilter
    tagsOnTimelines: TagsOnTimelinesListRelationFilter
}

input TagWhereUniqueInput {
    id: Int
    label: String
}

type TagsOnPremises {
    assignedAt: DateTime!
    premise: Premise!
    premiseId: String!
    tag: Tag!
    tagId: Int!
}

type TagsOnPremisesAvgAggregate {
    tagId: Float
}

input TagsOnPremisesAvgOrderByAggregateInput {
    tagId: SortOrder
}

type TagsOnPremisesCountAggregate {
    _all: Int!
    assignedAt: Int!
    premiseId: Int!
    tagId: Int!
}

input TagsOnPremisesCountOrderByAggregateInput {
    assignedAt: SortOrder
    premiseId: SortOrder
    tagId: SortOrder
}

input TagsOnPremisesCreateInput {
    assignedAt: DateTime
    premise: PremiseCreateNestedOneWithoutTagsOnPremisesInput!
    tag: TagCreateNestedOneWithoutTagsOnPremisesInput!
}

input TagsOnPremisesCreateManyInput {
    assignedAt: DateTime
    premiseId: String!
    tagId: Int!
}

input TagsOnPremisesCreateManyPremiseInput {
    assignedAt: DateTime
    tagId: Int!
}

input TagsOnPremisesCreateManyPremiseInputEnvelope {
    data: [TagsOnPremisesCreateManyPremiseInput!]!
    skipDuplicates: Boolean
}

input TagsOnPremisesCreateManyTagInput {
    assignedAt: DateTime
    premiseId: String!
}

input TagsOnPremisesCreateManyTagInputEnvelope {
    data: [TagsOnPremisesCreateManyTagInput!]!
    skipDuplicates: Boolean
}

input TagsOnPremisesCreateNestedManyWithoutPremiseInput {
    connect: [TagsOnPremisesWhereUniqueInput!]
    connectOrCreate: [TagsOnPremisesCreateOrConnectWithoutPremiseInput!]
    create: [TagsOnPremisesCreateWithoutPremiseInput!]
    createMany: TagsOnPremisesCreateManyPremiseInputEnvelope
}

input TagsOnPremisesCreateNestedManyWithoutTagInput {
    connect: [TagsOnPremisesWhereUniqueInput!]
    connectOrCreate: [TagsOnPremisesCreateOrConnectWithoutTagInput!]
    create: [TagsOnPremisesCreateWithoutTagInput!]
    createMany: TagsOnPremisesCreateManyTagInputEnvelope
}

input TagsOnPremisesCreateOrConnectWithoutPremiseInput {
    create: TagsOnPremisesCreateWithoutPremiseInput!
    where: TagsOnPremisesWhereUniqueInput!
}

input TagsOnPremisesCreateOrConnectWithoutTagInput {
    create: TagsOnPremisesCreateWithoutTagInput!
    where: TagsOnPremisesWhereUniqueInput!
}

input TagsOnPremisesCreateWithoutPremiseInput {
    assignedAt: DateTime
    tag: TagCreateNestedOneWithoutTagsOnPremisesInput!
}

input TagsOnPremisesCreateWithoutTagInput {
    assignedAt: DateTime
    premise: PremiseCreateNestedOneWithoutTagsOnPremisesInput!
}

type TagsOnPremisesGroupBy {
    _avg: TagsOnPremisesAvgAggregate
    _count: TagsOnPremisesCountAggregate
    _max: TagsOnPremisesMaxAggregate
    _min: TagsOnPremisesMinAggregate
    _sum: TagsOnPremisesSumAggregate
    assignedAt: DateTime!
    premiseId: String!
    tagId: Int!
}

input TagsOnPremisesListRelationFilter {
    every: TagsOnPremisesWhereInput
    none: TagsOnPremisesWhereInput
    some: TagsOnPremisesWhereInput
}

type TagsOnPremisesMaxAggregate {
    assignedAt: DateTime
    premiseId: String
    tagId: Int
}

input TagsOnPremisesMaxOrderByAggregateInput {
    assignedAt: SortOrder
    premiseId: SortOrder
    tagId: SortOrder
}

type TagsOnPremisesMinAggregate {
    assignedAt: DateTime
    premiseId: String
    tagId: Int
}

input TagsOnPremisesMinOrderByAggregateInput {
    assignedAt: SortOrder
    premiseId: SortOrder
    tagId: SortOrder
}

input TagsOnPremisesOrderByRelationAggregateInput {
    _count: SortOrder
}

input TagsOnPremisesOrderByWithAggregationInput {
    _avg: TagsOnPremisesAvgOrderByAggregateInput
    _count: TagsOnPremisesCountOrderByAggregateInput
    _max: TagsOnPremisesMaxOrderByAggregateInput
    _min: TagsOnPremisesMinOrderByAggregateInput
    _sum: TagsOnPremisesSumOrderByAggregateInput
    assignedAt: SortOrder
    premiseId: SortOrder
    tagId: SortOrder
}

input TagsOnPremisesOrderByWithRelationInput {
    assignedAt: SortOrder
    premise: PremiseOrderByWithRelationInput
    premiseId: SortOrder
    tag: TagOrderByWithRelationInput
    tagId: SortOrder
}

enum TagsOnPremisesScalarFieldEnum {
    assignedAt
    premiseId
    tagId
}

input TagsOnPremisesScalarWhereInput {
    AND: [TagsOnPremisesScalarWhereInput!]
    NOT: [TagsOnPremisesScalarWhereInput!]
    OR: [TagsOnPremisesScalarWhereInput!]
    assignedAt: DateTimeFilter
    premiseId: StringFilter
    tagId: IntFilter
}

input TagsOnPremisesScalarWhereWithAggregatesInput {
    AND: [TagsOnPremisesScalarWhereWithAggregatesInput!]
    NOT: [TagsOnPremisesScalarWhereWithAggregatesInput!]
    OR: [TagsOnPremisesScalarWhereWithAggregatesInput!]
    assignedAt: DateTimeWithAggregatesFilter
    premiseId: StringWithAggregatesFilter
    tagId: IntWithAggregatesFilter
}

type TagsOnPremisesSumAggregate {
    tagId: Int
}

input TagsOnPremisesSumOrderByAggregateInput {
    tagId: SortOrder
}

input TagsOnPremisesTagIdPremiseIdCompoundUniqueInput {
    premiseId: String!
    tagId: Int!
}

input TagsOnPremisesUpdateInput {
    assignedAt: DateTimeFieldUpdateOperationsInput
    premise: PremiseUpdateOneRequiredWithoutTagsOnPremisesInput
    tag: TagUpdateOneRequiredWithoutTagsOnPremisesInput
}

input TagsOnPremisesUpdateManyMutationInput {
    assignedAt: DateTimeFieldUpdateOperationsInput
}

input TagsOnPremisesUpdateManyWithWhereWithoutPremiseInput {
    data: TagsOnPremisesUpdateManyMutationInput!
    where: TagsOnPremisesScalarWhereInput!
}

input TagsOnPremisesUpdateManyWithWhereWithoutTagInput {
    data: TagsOnPremisesUpdateManyMutationInput!
    where: TagsOnPremisesScalarWhereInput!
}

input TagsOnPremisesUpdateManyWithoutPremiseInput {
    connect: [TagsOnPremisesWhereUniqueInput!]
    connectOrCreate: [TagsOnPremisesCreateOrConnectWithoutPremiseInput!]
    create: [TagsOnPremisesCreateWithoutPremiseInput!]
    createMany: TagsOnPremisesCreateManyPremiseInputEnvelope
    delete: [TagsOnPremisesWhereUniqueInput!]
    deleteMany: [TagsOnPremisesScalarWhereInput!]
    disconnect: [TagsOnPremisesWhereUniqueInput!]
    set: [TagsOnPremisesWhereUniqueInput!]
    update: [TagsOnPremisesUpdateWithWhereUniqueWithoutPremiseInput!]
    updateMany: [TagsOnPremisesUpdateManyWithWhereWithoutPremiseInput!]
    upsert: [TagsOnPremisesUpsertWithWhereUniqueWithoutPremiseInput!]
}

input TagsOnPremisesUpdateManyWithoutTagInput {
    connect: [TagsOnPremisesWhereUniqueInput!]
    connectOrCreate: [TagsOnPremisesCreateOrConnectWithoutTagInput!]
    create: [TagsOnPremisesCreateWithoutTagInput!]
    createMany: TagsOnPremisesCreateManyTagInputEnvelope
    delete: [TagsOnPremisesWhereUniqueInput!]
    deleteMany: [TagsOnPremisesScalarWhereInput!]
    disconnect: [TagsOnPremisesWhereUniqueInput!]
    set: [TagsOnPremisesWhereUniqueInput!]
    update: [TagsOnPremisesUpdateWithWhereUniqueWithoutTagInput!]
    updateMany: [TagsOnPremisesUpdateManyWithWhereWithoutTagInput!]
    upsert: [TagsOnPremisesUpsertWithWhereUniqueWithoutTagInput!]
}

input TagsOnPremisesUpdateWithWhereUniqueWithoutPremiseInput {
    data: TagsOnPremisesUpdateWithoutPremiseInput!
    where: TagsOnPremisesWhereUniqueInput!
}

input TagsOnPremisesUpdateWithWhereUniqueWithoutTagInput {
    data: TagsOnPremisesUpdateWithoutTagInput!
    where: TagsOnPremisesWhereUniqueInput!
}

input TagsOnPremisesUpdateWithoutPremiseInput {
    assignedAt: DateTimeFieldUpdateOperationsInput
    tag: TagUpdateOneRequiredWithoutTagsOnPremisesInput
}

input TagsOnPremisesUpdateWithoutTagInput {
    assignedAt: DateTimeFieldUpdateOperationsInput
    premise: PremiseUpdateOneRequiredWithoutTagsOnPremisesInput
}

input TagsOnPremisesUpsertWithWhereUniqueWithoutPremiseInput {
    create: TagsOnPremisesCreateWithoutPremiseInput!
    update: TagsOnPremisesUpdateWithoutPremiseInput!
    where: TagsOnPremisesWhereUniqueInput!
}

input TagsOnPremisesUpsertWithWhereUniqueWithoutTagInput {
    create: TagsOnPremisesCreateWithoutTagInput!
    update: TagsOnPremisesUpdateWithoutTagInput!
    where: TagsOnPremisesWhereUniqueInput!
}

input TagsOnPremisesWhereInput {
    AND: [TagsOnPremisesWhereInput!]
    NOT: [TagsOnPremisesWhereInput!]
    OR: [TagsOnPremisesWhereInput!]
    assignedAt: DateTimeFilter
    premise: PremiseRelationFilter
    premiseId: StringFilter
    tag: TagRelationFilter
    tagId: IntFilter
}

input TagsOnPremisesWhereUniqueInput {
    tagId_premiseId: TagsOnPremisesTagIdPremiseIdCompoundUniqueInput
}

type TagsOnTimelines {
    assignedAt: DateTime!
    tag: Tag!
    tagId: Int!
    timeline: Timeline!
    timelineId: String!
}

type TagsOnTimelinesAvgAggregate {
    tagId: Float
}

input TagsOnTimelinesAvgOrderByAggregateInput {
    tagId: SortOrder
}

type TagsOnTimelinesCountAggregate {
    _all: Int!
    assignedAt: Int!
    tagId: Int!
    timelineId: Int!
}

input TagsOnTimelinesCountOrderByAggregateInput {
    assignedAt: SortOrder
    tagId: SortOrder
    timelineId: SortOrder
}

input TagsOnTimelinesCreateInput {
    assignedAt: DateTime
    tag: TagCreateNestedOneWithoutTagsOnTimelinesInput!
    timeline: TimelineCreateNestedOneWithoutTagsOnTimelinesInput!
}

input TagsOnTimelinesCreateManyInput {
    assignedAt: DateTime
    tagId: Int!
    timelineId: String!
}

input TagsOnTimelinesCreateManyTagInput {
    assignedAt: DateTime
    timelineId: String!
}

input TagsOnTimelinesCreateManyTagInputEnvelope {
    data: [TagsOnTimelinesCreateManyTagInput!]!
    skipDuplicates: Boolean
}

input TagsOnTimelinesCreateManyTimelineInput {
    assignedAt: DateTime
    tagId: Int!
}

input TagsOnTimelinesCreateManyTimelineInputEnvelope {
    data: [TagsOnTimelinesCreateManyTimelineInput!]!
    skipDuplicates: Boolean
}

input TagsOnTimelinesCreateNestedManyWithoutTagInput {
    connect: [TagsOnTimelinesWhereUniqueInput!]
    connectOrCreate: [TagsOnTimelinesCreateOrConnectWithoutTagInput!]
    create: [TagsOnTimelinesCreateWithoutTagInput!]
    createMany: TagsOnTimelinesCreateManyTagInputEnvelope
}

input TagsOnTimelinesCreateNestedManyWithoutTimelineInput {
    connect: [TagsOnTimelinesWhereUniqueInput!]
    connectOrCreate: [TagsOnTimelinesCreateOrConnectWithoutTimelineInput!]
    create: [TagsOnTimelinesCreateWithoutTimelineInput!]
    createMany: TagsOnTimelinesCreateManyTimelineInputEnvelope
}

input TagsOnTimelinesCreateOrConnectWithoutTagInput {
    create: TagsOnTimelinesCreateWithoutTagInput!
    where: TagsOnTimelinesWhereUniqueInput!
}

input TagsOnTimelinesCreateOrConnectWithoutTimelineInput {
    create: TagsOnTimelinesCreateWithoutTimelineInput!
    where: TagsOnTimelinesWhereUniqueInput!
}

input TagsOnTimelinesCreateWithoutTagInput {
    assignedAt: DateTime
    timeline: TimelineCreateNestedOneWithoutTagsOnTimelinesInput!
}

input TagsOnTimelinesCreateWithoutTimelineInput {
    assignedAt: DateTime
    tag: TagCreateNestedOneWithoutTagsOnTimelinesInput!
}

type TagsOnTimelinesGroupBy {
    _avg: TagsOnTimelinesAvgAggregate
    _count: TagsOnTimelinesCountAggregate
    _max: TagsOnTimelinesMaxAggregate
    _min: TagsOnTimelinesMinAggregate
    _sum: TagsOnTimelinesSumAggregate
    assignedAt: DateTime!
    tagId: Int!
    timelineId: String!
}

input TagsOnTimelinesListRelationFilter {
    every: TagsOnTimelinesWhereInput
    none: TagsOnTimelinesWhereInput
    some: TagsOnTimelinesWhereInput
}

type TagsOnTimelinesMaxAggregate {
    assignedAt: DateTime
    tagId: Int
    timelineId: String
}

input TagsOnTimelinesMaxOrderByAggregateInput {
    assignedAt: SortOrder
    tagId: SortOrder
    timelineId: SortOrder
}

type TagsOnTimelinesMinAggregate {
    assignedAt: DateTime
    tagId: Int
    timelineId: String
}

input TagsOnTimelinesMinOrderByAggregateInput {
    assignedAt: SortOrder
    tagId: SortOrder
    timelineId: SortOrder
}

input TagsOnTimelinesOrderByRelationAggregateInput {
    _count: SortOrder
}

input TagsOnTimelinesOrderByWithAggregationInput {
    _avg: TagsOnTimelinesAvgOrderByAggregateInput
    _count: TagsOnTimelinesCountOrderByAggregateInput
    _max: TagsOnTimelinesMaxOrderByAggregateInput
    _min: TagsOnTimelinesMinOrderByAggregateInput
    _sum: TagsOnTimelinesSumOrderByAggregateInput
    assignedAt: SortOrder
    tagId: SortOrder
    timelineId: SortOrder
}

input TagsOnTimelinesOrderByWithRelationInput {
    assignedAt: SortOrder
    tag: TagOrderByWithRelationInput
    tagId: SortOrder
    timeline: TimelineOrderByWithRelationInput
    timelineId: SortOrder
}

enum TagsOnTimelinesScalarFieldEnum {
    assignedAt
    tagId
    timelineId
}

input TagsOnTimelinesScalarWhereInput {
    AND: [TagsOnTimelinesScalarWhereInput!]
    NOT: [TagsOnTimelinesScalarWhereInput!]
    OR: [TagsOnTimelinesScalarWhereInput!]
    assignedAt: DateTimeFilter
    tagId: IntFilter
    timelineId: StringFilter
}

input TagsOnTimelinesScalarWhereWithAggregatesInput {
    AND: [TagsOnTimelinesScalarWhereWithAggregatesInput!]
    NOT: [TagsOnTimelinesScalarWhereWithAggregatesInput!]
    OR: [TagsOnTimelinesScalarWhereWithAggregatesInput!]
    assignedAt: DateTimeWithAggregatesFilter
    tagId: IntWithAggregatesFilter
    timelineId: StringWithAggregatesFilter
}

type TagsOnTimelinesSumAggregate {
    tagId: Int
}

input TagsOnTimelinesSumOrderByAggregateInput {
    tagId: SortOrder
}

input TagsOnTimelinesTagIdTimelineIdCompoundUniqueInput {
    tagId: Int!
    timelineId: String!
}

input TagsOnTimelinesUpdateInput {
    assignedAt: DateTimeFieldUpdateOperationsInput
    tag: TagUpdateOneRequiredWithoutTagsOnTimelinesInput
    timeline: TimelineUpdateOneRequiredWithoutTagsOnTimelinesInput
}

input TagsOnTimelinesUpdateManyMutationInput {
    assignedAt: DateTimeFieldUpdateOperationsInput
}

input TagsOnTimelinesUpdateManyWithWhereWithoutTagInput {
    data: TagsOnTimelinesUpdateManyMutationInput!
    where: TagsOnTimelinesScalarWhereInput!
}

input TagsOnTimelinesUpdateManyWithWhereWithoutTimelineInput {
    data: TagsOnTimelinesUpdateManyMutationInput!
    where: TagsOnTimelinesScalarWhereInput!
}

input TagsOnTimelinesUpdateManyWithoutTagInput {
    connect: [TagsOnTimelinesWhereUniqueInput!]
    connectOrCreate: [TagsOnTimelinesCreateOrConnectWithoutTagInput!]
    create: [TagsOnTimelinesCreateWithoutTagInput!]
    createMany: TagsOnTimelinesCreateManyTagInputEnvelope
    delete: [TagsOnTimelinesWhereUniqueInput!]
    deleteMany: [TagsOnTimelinesScalarWhereInput!]
    disconnect: [TagsOnTimelinesWhereUniqueInput!]
    set: [TagsOnTimelinesWhereUniqueInput!]
    update: [TagsOnTimelinesUpdateWithWhereUniqueWithoutTagInput!]
    updateMany: [TagsOnTimelinesUpdateManyWithWhereWithoutTagInput!]
    upsert: [TagsOnTimelinesUpsertWithWhereUniqueWithoutTagInput!]
}

input TagsOnTimelinesUpdateManyWithoutTimelineInput {
    connect: [TagsOnTimelinesWhereUniqueInput!]
    connectOrCreate: [TagsOnTimelinesCreateOrConnectWithoutTimelineInput!]
    create: [TagsOnTimelinesCreateWithoutTimelineInput!]
    createMany: TagsOnTimelinesCreateManyTimelineInputEnvelope
    delete: [TagsOnTimelinesWhereUniqueInput!]
    deleteMany: [TagsOnTimelinesScalarWhereInput!]
    disconnect: [TagsOnTimelinesWhereUniqueInput!]
    set: [TagsOnTimelinesWhereUniqueInput!]
    update: [TagsOnTimelinesUpdateWithWhereUniqueWithoutTimelineInput!]
    updateMany: [TagsOnTimelinesUpdateManyWithWhereWithoutTimelineInput!]
    upsert: [TagsOnTimelinesUpsertWithWhereUniqueWithoutTimelineInput!]
}

input TagsOnTimelinesUpdateWithWhereUniqueWithoutTagInput {
    data: TagsOnTimelinesUpdateWithoutTagInput!
    where: TagsOnTimelinesWhereUniqueInput!
}

input TagsOnTimelinesUpdateWithWhereUniqueWithoutTimelineInput {
    data: TagsOnTimelinesUpdateWithoutTimelineInput!
    where: TagsOnTimelinesWhereUniqueInput!
}

input TagsOnTimelinesUpdateWithoutTagInput {
    assignedAt: DateTimeFieldUpdateOperationsInput
    timeline: TimelineUpdateOneRequiredWithoutTagsOnTimelinesInput
}

input TagsOnTimelinesUpdateWithoutTimelineInput {
    assignedAt: DateTimeFieldUpdateOperationsInput
    tag: TagUpdateOneRequiredWithoutTagsOnTimelinesInput
}

input TagsOnTimelinesUpsertWithWhereUniqueWithoutTagInput {
    create: TagsOnTimelinesCreateWithoutTagInput!
    update: TagsOnTimelinesUpdateWithoutTagInput!
    where: TagsOnTimelinesWhereUniqueInput!
}

input TagsOnTimelinesUpsertWithWhereUniqueWithoutTimelineInput {
    create: TagsOnTimelinesCreateWithoutTimelineInput!
    update: TagsOnTimelinesUpdateWithoutTimelineInput!
    where: TagsOnTimelinesWhereUniqueInput!
}

input TagsOnTimelinesWhereInput {
    AND: [TagsOnTimelinesWhereInput!]
    NOT: [TagsOnTimelinesWhereInput!]
    OR: [TagsOnTimelinesWhereInput!]
    assignedAt: DateTimeFilter
    tag: TagRelationFilter
    tagId: IntFilter
    timeline: TimelineRelationFilter
    timelineId: StringFilter
}

input TagsOnTimelinesWhereUniqueInput {
    tagId_timelineId: TagsOnTimelinesTagIdTimelineIdCompoundUniqueInput
}

type Thread {
    ReactionOnThread(cursor: ReactionOnThreadWhereUniqueInput, distinct: [ReactionOnThreadScalarFieldEnum!], orderBy: [ReactionOnThreadOrderByWithRelationInput!], skip: Int, take: Int, where: ReactionOnThreadWhereInput): [ReactionOnThread!]!
    _count: ThreadCount
    activityDate: DateTime
    author: User
    authorId: String
    childThreads(cursor: ThreadWhereUniqueInput, distinct: [ThreadScalarFieldEnum!], orderBy: [ThreadOrderByWithRelationInput!], skip: Int, take: Int, where: ThreadWhereInput): [Thread!]!
    createdAt: DateTime!
    description: String
    id: String!
    parentThread: Thread
    parentThreadId: String
    reference: String
    threadsOnPremise: ThreadsOnPremise
    threadsOnTimeline: ThreadsOnTimeline
    threadsOnVision: ThreadsOnVision
    title: String!
}

type ThreadCount {
    ReactionOnThread: Int!
    childThreads: Int!
}

type ThreadCountAggregate {
    _all: Int!
    activityDate: Int!
    authorId: Int!
    createdAt: Int!
    description: Int!
    id: Int!
    parentThreadId: Int!
    reference: Int!
    title: Int!
}

input ThreadCountOrderByAggregateInput {
    activityDate: SortOrder
    authorId: SortOrder
    createdAt: SortOrder
    description: SortOrder
    id: SortOrder
    parentThreadId: SortOrder
    reference: SortOrder
    title: SortOrder
}

input ThreadCreateInput {
    ReactionOnThread: ReactionOnThreadCreateNestedManyWithoutThreadInput
    activityDate: DateTime
    author: UserCreateNestedOneWithoutThreadsInput
    childThreads: ThreadCreateNestedManyWithoutParentThreadInput
    createdAt: DateTime
    description: String
    id: String
    parentThread: ThreadCreateNestedOneWithoutChildThreadsInput
    reference: String
    threadsOnPremise: ThreadsOnPremiseCreateNestedOneWithoutThreadInput
    threadsOnTimeline: ThreadsOnTimelineCreateNestedOneWithoutThreadInput
    threadsOnVision: ThreadsOnVisionCreateNestedOneWithoutThreadInput
    title: String!
}

input ThreadCreateManyAuthorInput {
    activityDate: DateTime
    createdAt: DateTime
    description: String
    id: String
    parentThreadId: String
    reference: String
    title: String!
}

input ThreadCreateManyAuthorInputEnvelope {
    data: [ThreadCreateManyAuthorInput!]!
    skipDuplicates: Boolean
}

input ThreadCreateManyInput {
    activityDate: DateTime
    authorId: String
    createdAt: DateTime
    description: String
    id: String
    parentThreadId: String
    reference: String
    title: String!
}

input ThreadCreateManyParentThreadInput {
    activityDate: DateTime
    authorId: String
    createdAt: DateTime
    description: String
    id: String
    reference: String
    title: String!
}

input ThreadCreateManyParentThreadInputEnvelope {
    data: [ThreadCreateManyParentThreadInput!]!
    skipDuplicates: Boolean
}

input ThreadCreateNestedManyWithoutAuthorInput {
    connect: [ThreadWhereUniqueInput!]
    connectOrCreate: [ThreadCreateOrConnectWithoutAuthorInput!]
    create: [ThreadCreateWithoutAuthorInput!]
    createMany: ThreadCreateManyAuthorInputEnvelope
}

input ThreadCreateNestedManyWithoutParentThreadInput {
    connect: [ThreadWhereUniqueInput!]
    connectOrCreate: [ThreadCreateOrConnectWithoutParentThreadInput!]
    create: [ThreadCreateWithoutParentThreadInput!]
    createMany: ThreadCreateManyParentThreadInputEnvelope
}

input ThreadCreateNestedOneWithoutChildThreadsInput {
    connect: ThreadWhereUniqueInput
    connectOrCreate: ThreadCreateOrConnectWithoutChildThreadsInput
    create: ThreadCreateWithoutChildThreadsInput
}

input ThreadCreateNestedOneWithoutReactionOnThreadInput {
    connect: ThreadWhereUniqueInput
    connectOrCreate: ThreadCreateOrConnectWithoutReactionOnThreadInput
    create: ThreadCreateWithoutReactionOnThreadInput
}

input ThreadCreateNestedOneWithoutThreadsOnPremiseInput {
    connect: ThreadWhereUniqueInput
    connectOrCreate: ThreadCreateOrConnectWithoutThreadsOnPremiseInput
    create: ThreadCreateWithoutThreadsOnPremiseInput
}

input ThreadCreateNestedOneWithoutThreadsOnTimelineInput {
    connect: ThreadWhereUniqueInput
    connectOrCreate: ThreadCreateOrConnectWithoutThreadsOnTimelineInput
    create: ThreadCreateWithoutThreadsOnTimelineInput
}

input ThreadCreateNestedOneWithoutThreadsOnVisionInput {
    connect: ThreadWhereUniqueInput
    connectOrCreate: ThreadCreateOrConnectWithoutThreadsOnVisionInput
    create: ThreadCreateWithoutThreadsOnVisionInput
}

input ThreadCreateOrConnectWithoutAuthorInput {
    create: ThreadCreateWithoutAuthorInput!
    where: ThreadWhereUniqueInput!
}

input ThreadCreateOrConnectWithoutChildThreadsInput {
    create: ThreadCreateWithoutChildThreadsInput!
    where: ThreadWhereUniqueInput!
}

input ThreadCreateOrConnectWithoutParentThreadInput {
    create: ThreadCreateWithoutParentThreadInput!
    where: ThreadWhereUniqueInput!
}

input ThreadCreateOrConnectWithoutReactionOnThreadInput {
    create: ThreadCreateWithoutReactionOnThreadInput!
    where: ThreadWhereUniqueInput!
}

input ThreadCreateOrConnectWithoutThreadsOnPremiseInput {
    create: ThreadCreateWithoutThreadsOnPremiseInput!
    where: ThreadWhereUniqueInput!
}

input ThreadCreateOrConnectWithoutThreadsOnTimelineInput {
    create: ThreadCreateWithoutThreadsOnTimelineInput!
    where: ThreadWhereUniqueInput!
}

input ThreadCreateOrConnectWithoutThreadsOnVisionInput {
    create: ThreadCreateWithoutThreadsOnVisionInput!
    where: ThreadWhereUniqueInput!
}

input ThreadCreateWithoutAuthorInput {
    ReactionOnThread: ReactionOnThreadCreateNestedManyWithoutThreadInput
    activityDate: DateTime
    childThreads: ThreadCreateNestedManyWithoutParentThreadInput
    createdAt: DateTime
    description: String
    id: String
    parentThread: ThreadCreateNestedOneWithoutChildThreadsInput
    reference: String
    threadsOnPremise: ThreadsOnPremiseCreateNestedOneWithoutThreadInput
    threadsOnTimeline: ThreadsOnTimelineCreateNestedOneWithoutThreadInput
    threadsOnVision: ThreadsOnVisionCreateNestedOneWithoutThreadInput
    title: String!
}

input ThreadCreateWithoutChildThreadsInput {
    ReactionOnThread: ReactionOnThreadCreateNestedManyWithoutThreadInput
    activityDate: DateTime
    author: UserCreateNestedOneWithoutThreadsInput
    createdAt: DateTime
    description: String
    id: String
    parentThread: ThreadCreateNestedOneWithoutChildThreadsInput
    reference: String
    threadsOnPremise: ThreadsOnPremiseCreateNestedOneWithoutThreadInput
    threadsOnTimeline: ThreadsOnTimelineCreateNestedOneWithoutThreadInput
    threadsOnVision: ThreadsOnVisionCreateNestedOneWithoutThreadInput
    title: String!
}

input ThreadCreateWithoutParentThreadInput {
    ReactionOnThread: ReactionOnThreadCreateNestedManyWithoutThreadInput
    activityDate: DateTime
    author: UserCreateNestedOneWithoutThreadsInput
    childThreads: ThreadCreateNestedManyWithoutParentThreadInput
    createdAt: DateTime
    description: String
    id: String
    reference: String
    threadsOnPremise: ThreadsOnPremiseCreateNestedOneWithoutThreadInput
    threadsOnTimeline: ThreadsOnTimelineCreateNestedOneWithoutThreadInput
    threadsOnVision: ThreadsOnVisionCreateNestedOneWithoutThreadInput
    title: String!
}

input ThreadCreateWithoutReactionOnThreadInput {
    activityDate: DateTime
    author: UserCreateNestedOneWithoutThreadsInput
    childThreads: ThreadCreateNestedManyWithoutParentThreadInput
    createdAt: DateTime
    description: String
    id: String
    parentThread: ThreadCreateNestedOneWithoutChildThreadsInput
    reference: String
    threadsOnPremise: ThreadsOnPremiseCreateNestedOneWithoutThreadInput
    threadsOnTimeline: ThreadsOnTimelineCreateNestedOneWithoutThreadInput
    threadsOnVision: ThreadsOnVisionCreateNestedOneWithoutThreadInput
    title: String!
}

input ThreadCreateWithoutThreadsOnPremiseInput {
    ReactionOnThread: ReactionOnThreadCreateNestedManyWithoutThreadInput
    activityDate: DateTime
    author: UserCreateNestedOneWithoutThreadsInput
    childThreads: ThreadCreateNestedManyWithoutParentThreadInput
    createdAt: DateTime
    description: String
    id: String
    parentThread: ThreadCreateNestedOneWithoutChildThreadsInput
    reference: String
    threadsOnTimeline: ThreadsOnTimelineCreateNestedOneWithoutThreadInput
    threadsOnVision: ThreadsOnVisionCreateNestedOneWithoutThreadInput
    title: String!
}

input ThreadCreateWithoutThreadsOnTimelineInput {
    ReactionOnThread: ReactionOnThreadCreateNestedManyWithoutThreadInput
    activityDate: DateTime
    author: UserCreateNestedOneWithoutThreadsInput
    childThreads: ThreadCreateNestedManyWithoutParentThreadInput
    createdAt: DateTime
    description: String
    id: String
    parentThread: ThreadCreateNestedOneWithoutChildThreadsInput
    reference: String
    threadsOnPremise: ThreadsOnPremiseCreateNestedOneWithoutThreadInput
    threadsOnVision: ThreadsOnVisionCreateNestedOneWithoutThreadInput
    title: String!
}

input ThreadCreateWithoutThreadsOnVisionInput {
    ReactionOnThread: ReactionOnThreadCreateNestedManyWithoutThreadInput
    activityDate: DateTime
    author: UserCreateNestedOneWithoutThreadsInput
    childThreads: ThreadCreateNestedManyWithoutParentThreadInput
    createdAt: DateTime
    description: String
    id: String
    parentThread: ThreadCreateNestedOneWithoutChildThreadsInput
    reference: String
    threadsOnPremise: ThreadsOnPremiseCreateNestedOneWithoutThreadInput
    threadsOnTimeline: ThreadsOnTimelineCreateNestedOneWithoutThreadInput
    title: String!
}

type ThreadGroupBy {
    _count: ThreadCountAggregate
    _max: ThreadMaxAggregate
    _min: ThreadMinAggregate
    activityDate: DateTime
    authorId: String
    createdAt: DateTime!
    description: String
    id: String!
    parentThreadId: String
    reference: String
    title: String!
}

input ThreadListRelationFilter {
    every: ThreadWhereInput
    none: ThreadWhereInput
    some: ThreadWhereInput
}

type ThreadMaxAggregate {
    activityDate: DateTime
    authorId: String
    createdAt: DateTime
    description: String
    id: String
    parentThreadId: String
    reference: String
    title: String
}

input ThreadMaxOrderByAggregateInput {
    activityDate: SortOrder
    authorId: SortOrder
    createdAt: SortOrder
    description: SortOrder
    id: SortOrder
    parentThreadId: SortOrder
    reference: SortOrder
    title: SortOrder
}

type ThreadMinAggregate {
    activityDate: DateTime
    authorId: String
    createdAt: DateTime
    description: String
    id: String
    parentThreadId: String
    reference: String
    title: String
}

input ThreadMinOrderByAggregateInput {
    activityDate: SortOrder
    authorId: SortOrder
    createdAt: SortOrder
    description: SortOrder
    id: SortOrder
    parentThreadId: SortOrder
    reference: SortOrder
    title: SortOrder
}

input ThreadOrderByRelationAggregateInput {
    _count: SortOrder
}

input ThreadOrderByWithAggregationInput {
    _count: ThreadCountOrderByAggregateInput
    _max: ThreadMaxOrderByAggregateInput
    _min: ThreadMinOrderByAggregateInput
    activityDate: SortOrder
    authorId: SortOrder
    createdAt: SortOrder
    description: SortOrder
    id: SortOrder
    parentThreadId: SortOrder
    reference: SortOrder
    title: SortOrder
}

input ThreadOrderByWithRelationInput {
    ReactionOnThread: ReactionOnThreadOrderByRelationAggregateInput
    activityDate: SortOrder
    author: UserOrderByWithRelationInput
    authorId: SortOrder
    childThreads: ThreadOrderByRelationAggregateInput
    createdAt: SortOrder
    description: SortOrder
    id: SortOrder
    parentThread: ThreadOrderByWithRelationInput
    parentThreadId: SortOrder
    reference: SortOrder
    threadsOnPremise: ThreadsOnPremiseOrderByWithRelationInput
    threadsOnTimeline: ThreadsOnTimelineOrderByWithRelationInput
    threadsOnVision: ThreadsOnVisionOrderByWithRelationInput
    title: SortOrder
}

input ThreadRelationFilter {
    is: ThreadWhereInput
    isNot: ThreadWhereInput
}

enum ThreadScalarFieldEnum {
    activityDate
    authorId
    createdAt
    description
    id
    parentThreadId
    reference
    title
}

input ThreadScalarWhereInput {
    AND: [ThreadScalarWhereInput!]
    NOT: [ThreadScalarWhereInput!]
    OR: [ThreadScalarWhereInput!]
    activityDate: DateTimeNullableFilter
    authorId: StringNullableFilter
    createdAt: DateTimeFilter
    description: StringNullableFilter
    id: StringFilter
    parentThreadId: StringNullableFilter
    reference: StringNullableFilter
    title: StringFilter
}

input ThreadScalarWhereWithAggregatesInput {
    AND: [ThreadScalarWhereWithAggregatesInput!]
    NOT: [ThreadScalarWhereWithAggregatesInput!]
    OR: [ThreadScalarWhereWithAggregatesInput!]
    activityDate: DateTimeNullableWithAggregatesFilter
    authorId: StringNullableWithAggregatesFilter
    createdAt: DateTimeWithAggregatesFilter
    description: StringNullableWithAggregatesFilter
    id: StringWithAggregatesFilter
    parentThreadId: StringNullableWithAggregatesFilter
    reference: StringNullableWithAggregatesFilter
    title: StringWithAggregatesFilter
}

input ThreadUpdateInput {
    ReactionOnThread: ReactionOnThreadUpdateManyWithoutThreadInput
    activityDate: NullableDateTimeFieldUpdateOperationsInput
    author: UserUpdateOneWithoutThreadsInput
    childThreads: ThreadUpdateManyWithoutParentThreadInput
    createdAt: DateTimeFieldUpdateOperationsInput
    description: NullableStringFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    parentThread: ThreadUpdateOneWithoutChildThreadsInput
    reference: NullableStringFieldUpdateOperationsInput
    threadsOnPremise: ThreadsOnPremiseUpdateOneWithoutThreadInput
    threadsOnTimeline: ThreadsOnTimelineUpdateOneWithoutThreadInput
    threadsOnVision: ThreadsOnVisionUpdateOneWithoutThreadInput
    title: StringFieldUpdateOperationsInput
}

input ThreadUpdateManyMutationInput {
    activityDate: NullableDateTimeFieldUpdateOperationsInput
    createdAt: DateTimeFieldUpdateOperationsInput
    description: NullableStringFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    reference: NullableStringFieldUpdateOperationsInput
    title: StringFieldUpdateOperationsInput
}

input ThreadUpdateManyWithWhereWithoutAuthorInput {
    data: ThreadUpdateManyMutationInput!
    where: ThreadScalarWhereInput!
}

input ThreadUpdateManyWithWhereWithoutParentThreadInput {
    data: ThreadUpdateManyMutationInput!
    where: ThreadScalarWhereInput!
}

input ThreadUpdateManyWithoutAuthorInput {
    connect: [ThreadWhereUniqueInput!]
    connectOrCreate: [ThreadCreateOrConnectWithoutAuthorInput!]
    create: [ThreadCreateWithoutAuthorInput!]
    createMany: ThreadCreateManyAuthorInputEnvelope
    delete: [ThreadWhereUniqueInput!]
    deleteMany: [ThreadScalarWhereInput!]
    disconnect: [ThreadWhereUniqueInput!]
    set: [ThreadWhereUniqueInput!]
    update: [ThreadUpdateWithWhereUniqueWithoutAuthorInput!]
    updateMany: [ThreadUpdateManyWithWhereWithoutAuthorInput!]
    upsert: [ThreadUpsertWithWhereUniqueWithoutAuthorInput!]
}

input ThreadUpdateManyWithoutParentThreadInput {
    connect: [ThreadWhereUniqueInput!]
    connectOrCreate: [ThreadCreateOrConnectWithoutParentThreadInput!]
    create: [ThreadCreateWithoutParentThreadInput!]
    createMany: ThreadCreateManyParentThreadInputEnvelope
    delete: [ThreadWhereUniqueInput!]
    deleteMany: [ThreadScalarWhereInput!]
    disconnect: [ThreadWhereUniqueInput!]
    set: [ThreadWhereUniqueInput!]
    update: [ThreadUpdateWithWhereUniqueWithoutParentThreadInput!]
    updateMany: [ThreadUpdateManyWithWhereWithoutParentThreadInput!]
    upsert: [ThreadUpsertWithWhereUniqueWithoutParentThreadInput!]
}

input ThreadUpdateOneRequiredWithoutReactionOnThreadInput {
    connect: ThreadWhereUniqueInput
    connectOrCreate: ThreadCreateOrConnectWithoutReactionOnThreadInput
    create: ThreadCreateWithoutReactionOnThreadInput
    update: ThreadUpdateWithoutReactionOnThreadInput
    upsert: ThreadUpsertWithoutReactionOnThreadInput
}

input ThreadUpdateOneRequiredWithoutThreadsOnPremiseInput {
    connect: ThreadWhereUniqueInput
    connectOrCreate: ThreadCreateOrConnectWithoutThreadsOnPremiseInput
    create: ThreadCreateWithoutThreadsOnPremiseInput
    update: ThreadUpdateWithoutThreadsOnPremiseInput
    upsert: ThreadUpsertWithoutThreadsOnPremiseInput
}

input ThreadUpdateOneRequiredWithoutThreadsOnTimelineInput {
    connect: ThreadWhereUniqueInput
    connectOrCreate: ThreadCreateOrConnectWithoutThreadsOnTimelineInput
    create: ThreadCreateWithoutThreadsOnTimelineInput
    update: ThreadUpdateWithoutThreadsOnTimelineInput
    upsert: ThreadUpsertWithoutThreadsOnTimelineInput
}

input ThreadUpdateOneRequiredWithoutThreadsOnVisionInput {
    connect: ThreadWhereUniqueInput
    connectOrCreate: ThreadCreateOrConnectWithoutThreadsOnVisionInput
    create: ThreadCreateWithoutThreadsOnVisionInput
    update: ThreadUpdateWithoutThreadsOnVisionInput
    upsert: ThreadUpsertWithoutThreadsOnVisionInput
}

input ThreadUpdateOneWithoutChildThreadsInput {
    connect: ThreadWhereUniqueInput
    connectOrCreate: ThreadCreateOrConnectWithoutChildThreadsInput
    create: ThreadCreateWithoutChildThreadsInput
    delete: Boolean
    disconnect: Boolean
    update: ThreadUpdateWithoutChildThreadsInput
    upsert: ThreadUpsertWithoutChildThreadsInput
}

input ThreadUpdateWithWhereUniqueWithoutAuthorInput {
    data: ThreadUpdateWithoutAuthorInput!
    where: ThreadWhereUniqueInput!
}

input ThreadUpdateWithWhereUniqueWithoutParentThreadInput {
    data: ThreadUpdateWithoutParentThreadInput!
    where: ThreadWhereUniqueInput!
}

input ThreadUpdateWithoutAuthorInput {
    ReactionOnThread: ReactionOnThreadUpdateManyWithoutThreadInput
    activityDate: NullableDateTimeFieldUpdateOperationsInput
    childThreads: ThreadUpdateManyWithoutParentThreadInput
    createdAt: DateTimeFieldUpdateOperationsInput
    description: NullableStringFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    parentThread: ThreadUpdateOneWithoutChildThreadsInput
    reference: NullableStringFieldUpdateOperationsInput
    threadsOnPremise: ThreadsOnPremiseUpdateOneWithoutThreadInput
    threadsOnTimeline: ThreadsOnTimelineUpdateOneWithoutThreadInput
    threadsOnVision: ThreadsOnVisionUpdateOneWithoutThreadInput
    title: StringFieldUpdateOperationsInput
}

input ThreadUpdateWithoutChildThreadsInput {
    ReactionOnThread: ReactionOnThreadUpdateManyWithoutThreadInput
    activityDate: NullableDateTimeFieldUpdateOperationsInput
    author: UserUpdateOneWithoutThreadsInput
    createdAt: DateTimeFieldUpdateOperationsInput
    description: NullableStringFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    parentThread: ThreadUpdateOneWithoutChildThreadsInput
    reference: NullableStringFieldUpdateOperationsInput
    threadsOnPremise: ThreadsOnPremiseUpdateOneWithoutThreadInput
    threadsOnTimeline: ThreadsOnTimelineUpdateOneWithoutThreadInput
    threadsOnVision: ThreadsOnVisionUpdateOneWithoutThreadInput
    title: StringFieldUpdateOperationsInput
}

input ThreadUpdateWithoutParentThreadInput {
    ReactionOnThread: ReactionOnThreadUpdateManyWithoutThreadInput
    activityDate: NullableDateTimeFieldUpdateOperationsInput
    author: UserUpdateOneWithoutThreadsInput
    childThreads: ThreadUpdateManyWithoutParentThreadInput
    createdAt: DateTimeFieldUpdateOperationsInput
    description: NullableStringFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    reference: NullableStringFieldUpdateOperationsInput
    threadsOnPremise: ThreadsOnPremiseUpdateOneWithoutThreadInput
    threadsOnTimeline: ThreadsOnTimelineUpdateOneWithoutThreadInput
    threadsOnVision: ThreadsOnVisionUpdateOneWithoutThreadInput
    title: StringFieldUpdateOperationsInput
}

input ThreadUpdateWithoutReactionOnThreadInput {
    activityDate: NullableDateTimeFieldUpdateOperationsInput
    author: UserUpdateOneWithoutThreadsInput
    childThreads: ThreadUpdateManyWithoutParentThreadInput
    createdAt: DateTimeFieldUpdateOperationsInput
    description: NullableStringFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    parentThread: ThreadUpdateOneWithoutChildThreadsInput
    reference: NullableStringFieldUpdateOperationsInput
    threadsOnPremise: ThreadsOnPremiseUpdateOneWithoutThreadInput
    threadsOnTimeline: ThreadsOnTimelineUpdateOneWithoutThreadInput
    threadsOnVision: ThreadsOnVisionUpdateOneWithoutThreadInput
    title: StringFieldUpdateOperationsInput
}

input ThreadUpdateWithoutThreadsOnPremiseInput {
    ReactionOnThread: ReactionOnThreadUpdateManyWithoutThreadInput
    activityDate: NullableDateTimeFieldUpdateOperationsInput
    author: UserUpdateOneWithoutThreadsInput
    childThreads: ThreadUpdateManyWithoutParentThreadInput
    createdAt: DateTimeFieldUpdateOperationsInput
    description: NullableStringFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    parentThread: ThreadUpdateOneWithoutChildThreadsInput
    reference: NullableStringFieldUpdateOperationsInput
    threadsOnTimeline: ThreadsOnTimelineUpdateOneWithoutThreadInput
    threadsOnVision: ThreadsOnVisionUpdateOneWithoutThreadInput
    title: StringFieldUpdateOperationsInput
}

input ThreadUpdateWithoutThreadsOnTimelineInput {
    ReactionOnThread: ReactionOnThreadUpdateManyWithoutThreadInput
    activityDate: NullableDateTimeFieldUpdateOperationsInput
    author: UserUpdateOneWithoutThreadsInput
    childThreads: ThreadUpdateManyWithoutParentThreadInput
    createdAt: DateTimeFieldUpdateOperationsInput
    description: NullableStringFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    parentThread: ThreadUpdateOneWithoutChildThreadsInput
    reference: NullableStringFieldUpdateOperationsInput
    threadsOnPremise: ThreadsOnPremiseUpdateOneWithoutThreadInput
    threadsOnVision: ThreadsOnVisionUpdateOneWithoutThreadInput
    title: StringFieldUpdateOperationsInput
}

input ThreadUpdateWithoutThreadsOnVisionInput {
    ReactionOnThread: ReactionOnThreadUpdateManyWithoutThreadInput
    activityDate: NullableDateTimeFieldUpdateOperationsInput
    author: UserUpdateOneWithoutThreadsInput
    childThreads: ThreadUpdateManyWithoutParentThreadInput
    createdAt: DateTimeFieldUpdateOperationsInput
    description: NullableStringFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    parentThread: ThreadUpdateOneWithoutChildThreadsInput
    reference: NullableStringFieldUpdateOperationsInput
    threadsOnPremise: ThreadsOnPremiseUpdateOneWithoutThreadInput
    threadsOnTimeline: ThreadsOnTimelineUpdateOneWithoutThreadInput
    title: StringFieldUpdateOperationsInput
}

input ThreadUpsertWithWhereUniqueWithoutAuthorInput {
    create: ThreadCreateWithoutAuthorInput!
    update: ThreadUpdateWithoutAuthorInput!
    where: ThreadWhereUniqueInput!
}

input ThreadUpsertWithWhereUniqueWithoutParentThreadInput {
    create: ThreadCreateWithoutParentThreadInput!
    update: ThreadUpdateWithoutParentThreadInput!
    where: ThreadWhereUniqueInput!
}

input ThreadUpsertWithoutChildThreadsInput {
    create: ThreadCreateWithoutChildThreadsInput!
    update: ThreadUpdateWithoutChildThreadsInput!
}

input ThreadUpsertWithoutReactionOnThreadInput {
    create: ThreadCreateWithoutReactionOnThreadInput!
    update: ThreadUpdateWithoutReactionOnThreadInput!
}

input ThreadUpsertWithoutThreadsOnPremiseInput {
    create: ThreadCreateWithoutThreadsOnPremiseInput!
    update: ThreadUpdateWithoutThreadsOnPremiseInput!
}

input ThreadUpsertWithoutThreadsOnTimelineInput {
    create: ThreadCreateWithoutThreadsOnTimelineInput!
    update: ThreadUpdateWithoutThreadsOnTimelineInput!
}

input ThreadUpsertWithoutThreadsOnVisionInput {
    create: ThreadCreateWithoutThreadsOnVisionInput!
    update: ThreadUpdateWithoutThreadsOnVisionInput!
}

input ThreadWhereInput {
    AND: [ThreadWhereInput!]
    NOT: [ThreadWhereInput!]
    OR: [ThreadWhereInput!]
    ReactionOnThread: ReactionOnThreadListRelationFilter
    activityDate: DateTimeNullableFilter
    author: UserRelationFilter
    authorId: StringNullableFilter
    childThreads: ThreadListRelationFilter
    createdAt: DateTimeFilter
    description: StringNullableFilter
    id: StringFilter
    parentThread: ThreadRelationFilter
    parentThreadId: StringNullableFilter
    reference: StringNullableFilter
    threadsOnPremise: ThreadsOnPremiseRelationFilter
    threadsOnTimeline: ThreadsOnTimelineRelationFilter
    threadsOnVision: ThreadsOnVisionRelationFilter
    title: StringFilter
}

input ThreadWhereUniqueInput {
    id: String
}

type ThreadsOnPremise {
    assignedAt: DateTime!
    premise: Premise!
    premiseId: String!
    thread: Thread!
    threadId: String!
}

type ThreadsOnPremiseCountAggregate {
    _all: Int!
    assignedAt: Int!
    premiseId: Int!
    threadId: Int!
}

input ThreadsOnPremiseCountOrderByAggregateInput {
    assignedAt: SortOrder
    premiseId: SortOrder
    threadId: SortOrder
}

input ThreadsOnPremiseCreateInput {
    assignedAt: DateTime
    premise: PremiseCreateNestedOneWithoutThreadsOnPremiseInput!
    thread: ThreadCreateNestedOneWithoutThreadsOnPremiseInput!
}

input ThreadsOnPremiseCreateManyInput {
    assignedAt: DateTime
    premiseId: String!
    threadId: String!
}

input ThreadsOnPremiseCreateManyPremiseInput {
    assignedAt: DateTime
    threadId: String!
}

input ThreadsOnPremiseCreateManyPremiseInputEnvelope {
    data: [ThreadsOnPremiseCreateManyPremiseInput!]!
    skipDuplicates: Boolean
}

input ThreadsOnPremiseCreateNestedManyWithoutPremiseInput {
    connect: [ThreadsOnPremiseWhereUniqueInput!]
    connectOrCreate: [ThreadsOnPremiseCreateOrConnectWithoutPremiseInput!]
    create: [ThreadsOnPremiseCreateWithoutPremiseInput!]
    createMany: ThreadsOnPremiseCreateManyPremiseInputEnvelope
}

input ThreadsOnPremiseCreateNestedOneWithoutThreadInput {
    connect: ThreadsOnPremiseWhereUniqueInput
    connectOrCreate: ThreadsOnPremiseCreateOrConnectWithoutThreadInput
    create: ThreadsOnPremiseCreateWithoutThreadInput
}

input ThreadsOnPremiseCreateOrConnectWithoutPremiseInput {
    create: ThreadsOnPremiseCreateWithoutPremiseInput!
    where: ThreadsOnPremiseWhereUniqueInput!
}

input ThreadsOnPremiseCreateOrConnectWithoutThreadInput {
    create: ThreadsOnPremiseCreateWithoutThreadInput!
    where: ThreadsOnPremiseWhereUniqueInput!
}

input ThreadsOnPremiseCreateWithoutPremiseInput {
    assignedAt: DateTime
    thread: ThreadCreateNestedOneWithoutThreadsOnPremiseInput!
}

input ThreadsOnPremiseCreateWithoutThreadInput {
    assignedAt: DateTime
    premise: PremiseCreateNestedOneWithoutThreadsOnPremiseInput!
}

type ThreadsOnPremiseGroupBy {
    _count: ThreadsOnPremiseCountAggregate
    _max: ThreadsOnPremiseMaxAggregate
    _min: ThreadsOnPremiseMinAggregate
    assignedAt: DateTime!
    premiseId: String!
    threadId: String!
}

input ThreadsOnPremiseListRelationFilter {
    every: ThreadsOnPremiseWhereInput
    none: ThreadsOnPremiseWhereInput
    some: ThreadsOnPremiseWhereInput
}

type ThreadsOnPremiseMaxAggregate {
    assignedAt: DateTime
    premiseId: String
    threadId: String
}

input ThreadsOnPremiseMaxOrderByAggregateInput {
    assignedAt: SortOrder
    premiseId: SortOrder
    threadId: SortOrder
}

type ThreadsOnPremiseMinAggregate {
    assignedAt: DateTime
    premiseId: String
    threadId: String
}

input ThreadsOnPremiseMinOrderByAggregateInput {
    assignedAt: SortOrder
    premiseId: SortOrder
    threadId: SortOrder
}

input ThreadsOnPremiseOrderByRelationAggregateInput {
    _count: SortOrder
}

input ThreadsOnPremiseOrderByWithAggregationInput {
    _count: ThreadsOnPremiseCountOrderByAggregateInput
    _max: ThreadsOnPremiseMaxOrderByAggregateInput
    _min: ThreadsOnPremiseMinOrderByAggregateInput
    assignedAt: SortOrder
    premiseId: SortOrder
    threadId: SortOrder
}

input ThreadsOnPremiseOrderByWithRelationInput {
    assignedAt: SortOrder
    premise: PremiseOrderByWithRelationInput
    premiseId: SortOrder
    thread: ThreadOrderByWithRelationInput
    threadId: SortOrder
}

input ThreadsOnPremiseRelationFilter {
    is: ThreadsOnPremiseWhereInput
    isNot: ThreadsOnPremiseWhereInput
}

enum ThreadsOnPremiseScalarFieldEnum {
    assignedAt
    premiseId
    threadId
}

input ThreadsOnPremiseScalarWhereInput {
    AND: [ThreadsOnPremiseScalarWhereInput!]
    NOT: [ThreadsOnPremiseScalarWhereInput!]
    OR: [ThreadsOnPremiseScalarWhereInput!]
    assignedAt: DateTimeFilter
    premiseId: StringFilter
    threadId: StringFilter
}

input ThreadsOnPremiseScalarWhereWithAggregatesInput {
    AND: [ThreadsOnPremiseScalarWhereWithAggregatesInput!]
    NOT: [ThreadsOnPremiseScalarWhereWithAggregatesInput!]
    OR: [ThreadsOnPremiseScalarWhereWithAggregatesInput!]
    assignedAt: DateTimeWithAggregatesFilter
    premiseId: StringWithAggregatesFilter
    threadId: StringWithAggregatesFilter
}

input ThreadsOnPremiseThreadIdPremiseIdCompoundUniqueInput {
    premiseId: String!
    threadId: String!
}

input ThreadsOnPremiseUpdateInput {
    assignedAt: DateTimeFieldUpdateOperationsInput
    premise: PremiseUpdateOneRequiredWithoutThreadsOnPremiseInput
    thread: ThreadUpdateOneRequiredWithoutThreadsOnPremiseInput
}

input ThreadsOnPremiseUpdateManyMutationInput {
    assignedAt: DateTimeFieldUpdateOperationsInput
}

input ThreadsOnPremiseUpdateManyWithWhereWithoutPremiseInput {
    data: ThreadsOnPremiseUpdateManyMutationInput!
    where: ThreadsOnPremiseScalarWhereInput!
}

input ThreadsOnPremiseUpdateManyWithoutPremiseInput {
    connect: [ThreadsOnPremiseWhereUniqueInput!]
    connectOrCreate: [ThreadsOnPremiseCreateOrConnectWithoutPremiseInput!]
    create: [ThreadsOnPremiseCreateWithoutPremiseInput!]
    createMany: ThreadsOnPremiseCreateManyPremiseInputEnvelope
    delete: [ThreadsOnPremiseWhereUniqueInput!]
    deleteMany: [ThreadsOnPremiseScalarWhereInput!]
    disconnect: [ThreadsOnPremiseWhereUniqueInput!]
    set: [ThreadsOnPremiseWhereUniqueInput!]
    update: [ThreadsOnPremiseUpdateWithWhereUniqueWithoutPremiseInput!]
    updateMany: [ThreadsOnPremiseUpdateManyWithWhereWithoutPremiseInput!]
    upsert: [ThreadsOnPremiseUpsertWithWhereUniqueWithoutPremiseInput!]
}

input ThreadsOnPremiseUpdateOneWithoutThreadInput {
    connect: ThreadsOnPremiseWhereUniqueInput
    connectOrCreate: ThreadsOnPremiseCreateOrConnectWithoutThreadInput
    create: ThreadsOnPremiseCreateWithoutThreadInput
    delete: Boolean
    disconnect: Boolean
    update: ThreadsOnPremiseUpdateWithoutThreadInput
    upsert: ThreadsOnPremiseUpsertWithoutThreadInput
}

input ThreadsOnPremiseUpdateWithWhereUniqueWithoutPremiseInput {
    data: ThreadsOnPremiseUpdateWithoutPremiseInput!
    where: ThreadsOnPremiseWhereUniqueInput!
}

input ThreadsOnPremiseUpdateWithoutPremiseInput {
    assignedAt: DateTimeFieldUpdateOperationsInput
    thread: ThreadUpdateOneRequiredWithoutThreadsOnPremiseInput
}

input ThreadsOnPremiseUpdateWithoutThreadInput {
    assignedAt: DateTimeFieldUpdateOperationsInput
    premise: PremiseUpdateOneRequiredWithoutThreadsOnPremiseInput
}

input ThreadsOnPremiseUpsertWithWhereUniqueWithoutPremiseInput {
    create: ThreadsOnPremiseCreateWithoutPremiseInput!
    update: ThreadsOnPremiseUpdateWithoutPremiseInput!
    where: ThreadsOnPremiseWhereUniqueInput!
}

input ThreadsOnPremiseUpsertWithoutThreadInput {
    create: ThreadsOnPremiseCreateWithoutThreadInput!
    update: ThreadsOnPremiseUpdateWithoutThreadInput!
}

input ThreadsOnPremiseWhereInput {
    AND: [ThreadsOnPremiseWhereInput!]
    NOT: [ThreadsOnPremiseWhereInput!]
    OR: [ThreadsOnPremiseWhereInput!]
    assignedAt: DateTimeFilter
    premise: PremiseRelationFilter
    premiseId: StringFilter
    thread: ThreadRelationFilter
    threadId: StringFilter
}

input ThreadsOnPremiseWhereUniqueInput {
    threadId: String
    threadId_premiseId: ThreadsOnPremiseThreadIdPremiseIdCompoundUniqueInput
}

type ThreadsOnTimeline {
    assignedAt: DateTime!
    thread: Thread!
    threadId: String!
    timeline: Timeline!
    timelineId: String!
}

type ThreadsOnTimelineCountAggregate {
    _all: Int!
    assignedAt: Int!
    threadId: Int!
    timelineId: Int!
}

input ThreadsOnTimelineCountOrderByAggregateInput {
    assignedAt: SortOrder
    threadId: SortOrder
    timelineId: SortOrder
}

input ThreadsOnTimelineCreateInput {
    assignedAt: DateTime
    thread: ThreadCreateNestedOneWithoutThreadsOnTimelineInput!
    timeline: TimelineCreateNestedOneWithoutThreadsOnTimelineInput!
}

input ThreadsOnTimelineCreateManyInput {
    assignedAt: DateTime
    threadId: String!
    timelineId: String!
}

input ThreadsOnTimelineCreateManyTimelineInput {
    assignedAt: DateTime
    threadId: String!
}

input ThreadsOnTimelineCreateManyTimelineInputEnvelope {
    data: [ThreadsOnTimelineCreateManyTimelineInput!]!
    skipDuplicates: Boolean
}

input ThreadsOnTimelineCreateNestedManyWithoutTimelineInput {
    connect: [ThreadsOnTimelineWhereUniqueInput!]
    connectOrCreate: [ThreadsOnTimelineCreateOrConnectWithoutTimelineInput!]
    create: [ThreadsOnTimelineCreateWithoutTimelineInput!]
    createMany: ThreadsOnTimelineCreateManyTimelineInputEnvelope
}

input ThreadsOnTimelineCreateNestedOneWithoutThreadInput {
    connect: ThreadsOnTimelineWhereUniqueInput
    connectOrCreate: ThreadsOnTimelineCreateOrConnectWithoutThreadInput
    create: ThreadsOnTimelineCreateWithoutThreadInput
}

input ThreadsOnTimelineCreateOrConnectWithoutThreadInput {
    create: ThreadsOnTimelineCreateWithoutThreadInput!
    where: ThreadsOnTimelineWhereUniqueInput!
}

input ThreadsOnTimelineCreateOrConnectWithoutTimelineInput {
    create: ThreadsOnTimelineCreateWithoutTimelineInput!
    where: ThreadsOnTimelineWhereUniqueInput!
}

input ThreadsOnTimelineCreateWithoutThreadInput {
    assignedAt: DateTime
    timeline: TimelineCreateNestedOneWithoutThreadsOnTimelineInput!
}

input ThreadsOnTimelineCreateWithoutTimelineInput {
    assignedAt: DateTime
    thread: ThreadCreateNestedOneWithoutThreadsOnTimelineInput!
}

type ThreadsOnTimelineGroupBy {
    _count: ThreadsOnTimelineCountAggregate
    _max: ThreadsOnTimelineMaxAggregate
    _min: ThreadsOnTimelineMinAggregate
    assignedAt: DateTime!
    threadId: String!
    timelineId: String!
}

input ThreadsOnTimelineListRelationFilter {
    every: ThreadsOnTimelineWhereInput
    none: ThreadsOnTimelineWhereInput
    some: ThreadsOnTimelineWhereInput
}

type ThreadsOnTimelineMaxAggregate {
    assignedAt: DateTime
    threadId: String
    timelineId: String
}

input ThreadsOnTimelineMaxOrderByAggregateInput {
    assignedAt: SortOrder
    threadId: SortOrder
    timelineId: SortOrder
}

type ThreadsOnTimelineMinAggregate {
    assignedAt: DateTime
    threadId: String
    timelineId: String
}

input ThreadsOnTimelineMinOrderByAggregateInput {
    assignedAt: SortOrder
    threadId: SortOrder
    timelineId: SortOrder
}

input ThreadsOnTimelineOrderByRelationAggregateInput {
    _count: SortOrder
}

input ThreadsOnTimelineOrderByWithAggregationInput {
    _count: ThreadsOnTimelineCountOrderByAggregateInput
    _max: ThreadsOnTimelineMaxOrderByAggregateInput
    _min: ThreadsOnTimelineMinOrderByAggregateInput
    assignedAt: SortOrder
    threadId: SortOrder
    timelineId: SortOrder
}

input ThreadsOnTimelineOrderByWithRelationInput {
    assignedAt: SortOrder
    thread: ThreadOrderByWithRelationInput
    threadId: SortOrder
    timeline: TimelineOrderByWithRelationInput
    timelineId: SortOrder
}

input ThreadsOnTimelineRelationFilter {
    is: ThreadsOnTimelineWhereInput
    isNot: ThreadsOnTimelineWhereInput
}

enum ThreadsOnTimelineScalarFieldEnum {
    assignedAt
    threadId
    timelineId
}

input ThreadsOnTimelineScalarWhereInput {
    AND: [ThreadsOnTimelineScalarWhereInput!]
    NOT: [ThreadsOnTimelineScalarWhereInput!]
    OR: [ThreadsOnTimelineScalarWhereInput!]
    assignedAt: DateTimeFilter
    threadId: StringFilter
    timelineId: StringFilter
}

input ThreadsOnTimelineScalarWhereWithAggregatesInput {
    AND: [ThreadsOnTimelineScalarWhereWithAggregatesInput!]
    NOT: [ThreadsOnTimelineScalarWhereWithAggregatesInput!]
    OR: [ThreadsOnTimelineScalarWhereWithAggregatesInput!]
    assignedAt: DateTimeWithAggregatesFilter
    threadId: StringWithAggregatesFilter
    timelineId: StringWithAggregatesFilter
}

input ThreadsOnTimelineThreadIdTimelineIdCompoundUniqueInput {
    threadId: String!
    timelineId: String!
}

input ThreadsOnTimelineUpdateInput {
    assignedAt: DateTimeFieldUpdateOperationsInput
    thread: ThreadUpdateOneRequiredWithoutThreadsOnTimelineInput
    timeline: TimelineUpdateOneRequiredWithoutThreadsOnTimelineInput
}

input ThreadsOnTimelineUpdateManyMutationInput {
    assignedAt: DateTimeFieldUpdateOperationsInput
}

input ThreadsOnTimelineUpdateManyWithWhereWithoutTimelineInput {
    data: ThreadsOnTimelineUpdateManyMutationInput!
    where: ThreadsOnTimelineScalarWhereInput!
}

input ThreadsOnTimelineUpdateManyWithoutTimelineInput {
    connect: [ThreadsOnTimelineWhereUniqueInput!]
    connectOrCreate: [ThreadsOnTimelineCreateOrConnectWithoutTimelineInput!]
    create: [ThreadsOnTimelineCreateWithoutTimelineInput!]
    createMany: ThreadsOnTimelineCreateManyTimelineInputEnvelope
    delete: [ThreadsOnTimelineWhereUniqueInput!]
    deleteMany: [ThreadsOnTimelineScalarWhereInput!]
    disconnect: [ThreadsOnTimelineWhereUniqueInput!]
    set: [ThreadsOnTimelineWhereUniqueInput!]
    update: [ThreadsOnTimelineUpdateWithWhereUniqueWithoutTimelineInput!]
    updateMany: [ThreadsOnTimelineUpdateManyWithWhereWithoutTimelineInput!]
    upsert: [ThreadsOnTimelineUpsertWithWhereUniqueWithoutTimelineInput!]
}

input ThreadsOnTimelineUpdateOneWithoutThreadInput {
    connect: ThreadsOnTimelineWhereUniqueInput
    connectOrCreate: ThreadsOnTimelineCreateOrConnectWithoutThreadInput
    create: ThreadsOnTimelineCreateWithoutThreadInput
    delete: Boolean
    disconnect: Boolean
    update: ThreadsOnTimelineUpdateWithoutThreadInput
    upsert: ThreadsOnTimelineUpsertWithoutThreadInput
}

input ThreadsOnTimelineUpdateWithWhereUniqueWithoutTimelineInput {
    data: ThreadsOnTimelineUpdateWithoutTimelineInput!
    where: ThreadsOnTimelineWhereUniqueInput!
}

input ThreadsOnTimelineUpdateWithoutThreadInput {
    assignedAt: DateTimeFieldUpdateOperationsInput
    timeline: TimelineUpdateOneRequiredWithoutThreadsOnTimelineInput
}

input ThreadsOnTimelineUpdateWithoutTimelineInput {
    assignedAt: DateTimeFieldUpdateOperationsInput
    thread: ThreadUpdateOneRequiredWithoutThreadsOnTimelineInput
}

input ThreadsOnTimelineUpsertWithWhereUniqueWithoutTimelineInput {
    create: ThreadsOnTimelineCreateWithoutTimelineInput!
    update: ThreadsOnTimelineUpdateWithoutTimelineInput!
    where: ThreadsOnTimelineWhereUniqueInput!
}

input ThreadsOnTimelineUpsertWithoutThreadInput {
    create: ThreadsOnTimelineCreateWithoutThreadInput!
    update: ThreadsOnTimelineUpdateWithoutThreadInput!
}

input ThreadsOnTimelineWhereInput {
    AND: [ThreadsOnTimelineWhereInput!]
    NOT: [ThreadsOnTimelineWhereInput!]
    OR: [ThreadsOnTimelineWhereInput!]
    assignedAt: DateTimeFilter
    thread: ThreadRelationFilter
    threadId: StringFilter
    timeline: TimelineRelationFilter
    timelineId: StringFilter
}

input ThreadsOnTimelineWhereUniqueInput {
    threadId: String
    threadId_timelineId: ThreadsOnTimelineThreadIdTimelineIdCompoundUniqueInput
}

type ThreadsOnVision {
    assignedAt: DateTime!
    thread: Thread!
    threadId: String!
    vision: Vision!
    visionId: String!
}

type ThreadsOnVisionCountAggregate {
    _all: Int!
    assignedAt: Int!
    threadId: Int!
    visionId: Int!
}

input ThreadsOnVisionCountOrderByAggregateInput {
    assignedAt: SortOrder
    threadId: SortOrder
    visionId: SortOrder
}

input ThreadsOnVisionCreateInput {
    assignedAt: DateTime
    thread: ThreadCreateNestedOneWithoutThreadsOnVisionInput!
    vision: VisionCreateNestedOneWithoutThreadsOnVisionInput!
}

input ThreadsOnVisionCreateManyInput {
    assignedAt: DateTime
    threadId: String!
    visionId: String!
}

input ThreadsOnVisionCreateManyVisionInput {
    assignedAt: DateTime
    threadId: String!
}

input ThreadsOnVisionCreateManyVisionInputEnvelope {
    data: [ThreadsOnVisionCreateManyVisionInput!]!
    skipDuplicates: Boolean
}

input ThreadsOnVisionCreateNestedManyWithoutVisionInput {
    connect: [ThreadsOnVisionWhereUniqueInput!]
    connectOrCreate: [ThreadsOnVisionCreateOrConnectWithoutVisionInput!]
    create: [ThreadsOnVisionCreateWithoutVisionInput!]
    createMany: ThreadsOnVisionCreateManyVisionInputEnvelope
}

input ThreadsOnVisionCreateNestedOneWithoutThreadInput {
    connect: ThreadsOnVisionWhereUniqueInput
    connectOrCreate: ThreadsOnVisionCreateOrConnectWithoutThreadInput
    create: ThreadsOnVisionCreateWithoutThreadInput
}

input ThreadsOnVisionCreateOrConnectWithoutThreadInput {
    create: ThreadsOnVisionCreateWithoutThreadInput!
    where: ThreadsOnVisionWhereUniqueInput!
}

input ThreadsOnVisionCreateOrConnectWithoutVisionInput {
    create: ThreadsOnVisionCreateWithoutVisionInput!
    where: ThreadsOnVisionWhereUniqueInput!
}

input ThreadsOnVisionCreateWithoutThreadInput {
    assignedAt: DateTime
    vision: VisionCreateNestedOneWithoutThreadsOnVisionInput!
}

input ThreadsOnVisionCreateWithoutVisionInput {
    assignedAt: DateTime
    thread: ThreadCreateNestedOneWithoutThreadsOnVisionInput!
}

type ThreadsOnVisionGroupBy {
    _count: ThreadsOnVisionCountAggregate
    _max: ThreadsOnVisionMaxAggregate
    _min: ThreadsOnVisionMinAggregate
    assignedAt: DateTime!
    threadId: String!
    visionId: String!
}

input ThreadsOnVisionListRelationFilter {
    every: ThreadsOnVisionWhereInput
    none: ThreadsOnVisionWhereInput
    some: ThreadsOnVisionWhereInput
}

type ThreadsOnVisionMaxAggregate {
    assignedAt: DateTime
    threadId: String
    visionId: String
}

input ThreadsOnVisionMaxOrderByAggregateInput {
    assignedAt: SortOrder
    threadId: SortOrder
    visionId: SortOrder
}

type ThreadsOnVisionMinAggregate {
    assignedAt: DateTime
    threadId: String
    visionId: String
}

input ThreadsOnVisionMinOrderByAggregateInput {
    assignedAt: SortOrder
    threadId: SortOrder
    visionId: SortOrder
}

input ThreadsOnVisionOrderByRelationAggregateInput {
    _count: SortOrder
}

input ThreadsOnVisionOrderByWithAggregationInput {
    _count: ThreadsOnVisionCountOrderByAggregateInput
    _max: ThreadsOnVisionMaxOrderByAggregateInput
    _min: ThreadsOnVisionMinOrderByAggregateInput
    assignedAt: SortOrder
    threadId: SortOrder
    visionId: SortOrder
}

input ThreadsOnVisionOrderByWithRelationInput {
    assignedAt: SortOrder
    thread: ThreadOrderByWithRelationInput
    threadId: SortOrder
    vision: VisionOrderByWithRelationInput
    visionId: SortOrder
}

input ThreadsOnVisionRelationFilter {
    is: ThreadsOnVisionWhereInput
    isNot: ThreadsOnVisionWhereInput
}

enum ThreadsOnVisionScalarFieldEnum {
    assignedAt
    threadId
    visionId
}

input ThreadsOnVisionScalarWhereInput {
    AND: [ThreadsOnVisionScalarWhereInput!]
    NOT: [ThreadsOnVisionScalarWhereInput!]
    OR: [ThreadsOnVisionScalarWhereInput!]
    assignedAt: DateTimeFilter
    threadId: StringFilter
    visionId: StringFilter
}

input ThreadsOnVisionScalarWhereWithAggregatesInput {
    AND: [ThreadsOnVisionScalarWhereWithAggregatesInput!]
    NOT: [ThreadsOnVisionScalarWhereWithAggregatesInput!]
    OR: [ThreadsOnVisionScalarWhereWithAggregatesInput!]
    assignedAt: DateTimeWithAggregatesFilter
    threadId: StringWithAggregatesFilter
    visionId: StringWithAggregatesFilter
}

input ThreadsOnVisionThreadIdVisionIdCompoundUniqueInput {
    threadId: String!
    visionId: String!
}

input ThreadsOnVisionUpdateInput {
    assignedAt: DateTimeFieldUpdateOperationsInput
    thread: ThreadUpdateOneRequiredWithoutThreadsOnVisionInput
    vision: VisionUpdateOneRequiredWithoutThreadsOnVisionInput
}

input ThreadsOnVisionUpdateManyMutationInput {
    assignedAt: DateTimeFieldUpdateOperationsInput
}

input ThreadsOnVisionUpdateManyWithWhereWithoutVisionInput {
    data: ThreadsOnVisionUpdateManyMutationInput!
    where: ThreadsOnVisionScalarWhereInput!
}

input ThreadsOnVisionUpdateManyWithoutVisionInput {
    connect: [ThreadsOnVisionWhereUniqueInput!]
    connectOrCreate: [ThreadsOnVisionCreateOrConnectWithoutVisionInput!]
    create: [ThreadsOnVisionCreateWithoutVisionInput!]
    createMany: ThreadsOnVisionCreateManyVisionInputEnvelope
    delete: [ThreadsOnVisionWhereUniqueInput!]
    deleteMany: [ThreadsOnVisionScalarWhereInput!]
    disconnect: [ThreadsOnVisionWhereUniqueInput!]
    set: [ThreadsOnVisionWhereUniqueInput!]
    update: [ThreadsOnVisionUpdateWithWhereUniqueWithoutVisionInput!]
    updateMany: [ThreadsOnVisionUpdateManyWithWhereWithoutVisionInput!]
    upsert: [ThreadsOnVisionUpsertWithWhereUniqueWithoutVisionInput!]
}

input ThreadsOnVisionUpdateOneWithoutThreadInput {
    connect: ThreadsOnVisionWhereUniqueInput
    connectOrCreate: ThreadsOnVisionCreateOrConnectWithoutThreadInput
    create: ThreadsOnVisionCreateWithoutThreadInput
    delete: Boolean
    disconnect: Boolean
    update: ThreadsOnVisionUpdateWithoutThreadInput
    upsert: ThreadsOnVisionUpsertWithoutThreadInput
}

input ThreadsOnVisionUpdateWithWhereUniqueWithoutVisionInput {
    data: ThreadsOnVisionUpdateWithoutVisionInput!
    where: ThreadsOnVisionWhereUniqueInput!
}

input ThreadsOnVisionUpdateWithoutThreadInput {
    assignedAt: DateTimeFieldUpdateOperationsInput
    vision: VisionUpdateOneRequiredWithoutThreadsOnVisionInput
}

input ThreadsOnVisionUpdateWithoutVisionInput {
    assignedAt: DateTimeFieldUpdateOperationsInput
    thread: ThreadUpdateOneRequiredWithoutThreadsOnVisionInput
}

input ThreadsOnVisionUpsertWithWhereUniqueWithoutVisionInput {
    create: ThreadsOnVisionCreateWithoutVisionInput!
    update: ThreadsOnVisionUpdateWithoutVisionInput!
    where: ThreadsOnVisionWhereUniqueInput!
}

input ThreadsOnVisionUpsertWithoutThreadInput {
    create: ThreadsOnVisionCreateWithoutThreadInput!
    update: ThreadsOnVisionUpdateWithoutThreadInput!
}

input ThreadsOnVisionWhereInput {
    AND: [ThreadsOnVisionWhereInput!]
    NOT: [ThreadsOnVisionWhereInput!]
    OR: [ThreadsOnVisionWhereInput!]
    assignedAt: DateTimeFilter
    thread: ThreadRelationFilter
    threadId: StringFilter
    vision: VisionRelationFilter
    visionId: StringFilter
}

input ThreadsOnVisionWhereUniqueInput {
    threadId: String
    threadId_visionId: ThreadsOnVisionThreadIdVisionIdCompoundUniqueInput
}

type Timeline {
    ReactionOnTimeline(cursor: ReactionOnTimelineWhereUniqueInput, distinct: [ReactionOnTimelineScalarFieldEnum!], orderBy: [ReactionOnTimelineOrderByWithRelationInput!], skip: Int, take: Int, where: ReactionOnTimelineWhereInput): [ReactionOnTimeline!]!
    _count: TimelineCount
    author: User!
    authorId: String!
    description: String!
    id: String!
    premisesOnTimelines(cursor: PremisesOnTimelinesWhereUniqueInput, distinct: [PremisesOnTimelinesScalarFieldEnum!], orderBy: [PremisesOnTimelinesOrderByWithRelationInput!], skip: Int, take: Int, where: PremisesOnTimelinesWhereInput): [PremisesOnTimelines!]!
    status: String!
    tagsOnTimelines(cursor: TagsOnTimelinesWhereUniqueInput, distinct: [TagsOnTimelinesScalarFieldEnum!], orderBy: [TagsOnTimelinesOrderByWithRelationInput!], skip: Int, take: Int, where: TagsOnTimelinesWhereInput): [TagsOnTimelines!]!
    threadsOnTimeline(cursor: ThreadsOnTimelineWhereUniqueInput, distinct: [ThreadsOnTimelineScalarFieldEnum!], orderBy: [ThreadsOnTimelineOrderByWithRelationInput!], skip: Int, take: Int, where: ThreadsOnTimelineWhereInput): [ThreadsOnTimeline!]!
    title: String!
}

type TimelineCount {
    ReactionOnTimeline: Int!
    premisesOnTimelines: Int!
    tagsOnTimelines: Int!
    threadsOnTimeline: Int!
}

type TimelineCountAggregate {
    _all: Int!
    authorId: Int!
    description: Int!
    id: Int!
    status: Int!
    title: Int!
}

input TimelineCountOrderByAggregateInput {
    authorId: SortOrder
    description: SortOrder
    id: SortOrder
    status: SortOrder
    title: SortOrder
}

input TimelineCreateInput {
    ReactionOnTimeline: ReactionOnTimelineCreateNestedManyWithoutTimelineInput
    author: UserCreateNestedOneWithoutTimelinesInput!
    description: String!
    id: String
    premisesOnTimelines: PremisesOnTimelinesCreateNestedManyWithoutTimelineInput
    status: String!
    tagsOnTimelines: TagsOnTimelinesCreateNestedManyWithoutTimelineInput
    threadsOnTimeline: ThreadsOnTimelineCreateNestedManyWithoutTimelineInput
    title: String!
}

input TimelineCreateManyAuthorInput {
    description: String!
    id: String
    status: String!
    title: String!
}

input TimelineCreateManyAuthorInputEnvelope {
    data: [TimelineCreateManyAuthorInput!]!
    skipDuplicates: Boolean
}

input TimelineCreateManyInput {
    authorId: String!
    description: String!
    id: String
    status: String!
    title: String!
}

input TimelineCreateNestedManyWithoutAuthorInput {
    connect: [TimelineWhereUniqueInput!]
    connectOrCreate: [TimelineCreateOrConnectWithoutAuthorInput!]
    create: [TimelineCreateWithoutAuthorInput!]
    createMany: TimelineCreateManyAuthorInputEnvelope
}

input TimelineCreateNestedOneWithoutPremisesOnTimelinesInput {
    connect: TimelineWhereUniqueInput
    connectOrCreate: TimelineCreateOrConnectWithoutPremisesOnTimelinesInput
    create: TimelineCreateWithoutPremisesOnTimelinesInput
}

input TimelineCreateNestedOneWithoutReactionOnTimelineInput {
    connect: TimelineWhereUniqueInput
    connectOrCreate: TimelineCreateOrConnectWithoutReactionOnTimelineInput
    create: TimelineCreateWithoutReactionOnTimelineInput
}

input TimelineCreateNestedOneWithoutTagsOnTimelinesInput {
    connect: TimelineWhereUniqueInput
    connectOrCreate: TimelineCreateOrConnectWithoutTagsOnTimelinesInput
    create: TimelineCreateWithoutTagsOnTimelinesInput
}

input TimelineCreateNestedOneWithoutThreadsOnTimelineInput {
    connect: TimelineWhereUniqueInput
    connectOrCreate: TimelineCreateOrConnectWithoutThreadsOnTimelineInput
    create: TimelineCreateWithoutThreadsOnTimelineInput
}

input TimelineCreateOrConnectWithoutAuthorInput {
    create: TimelineCreateWithoutAuthorInput!
    where: TimelineWhereUniqueInput!
}

input TimelineCreateOrConnectWithoutPremisesOnTimelinesInput {
    create: TimelineCreateWithoutPremisesOnTimelinesInput!
    where: TimelineWhereUniqueInput!
}

input TimelineCreateOrConnectWithoutReactionOnTimelineInput {
    create: TimelineCreateWithoutReactionOnTimelineInput!
    where: TimelineWhereUniqueInput!
}

input TimelineCreateOrConnectWithoutTagsOnTimelinesInput {
    create: TimelineCreateWithoutTagsOnTimelinesInput!
    where: TimelineWhereUniqueInput!
}

input TimelineCreateOrConnectWithoutThreadsOnTimelineInput {
    create: TimelineCreateWithoutThreadsOnTimelineInput!
    where: TimelineWhereUniqueInput!
}

input TimelineCreateWithoutAuthorInput {
    ReactionOnTimeline: ReactionOnTimelineCreateNestedManyWithoutTimelineInput
    description: String!
    id: String
    premisesOnTimelines: PremisesOnTimelinesCreateNestedManyWithoutTimelineInput
    status: String!
    tagsOnTimelines: TagsOnTimelinesCreateNestedManyWithoutTimelineInput
    threadsOnTimeline: ThreadsOnTimelineCreateNestedManyWithoutTimelineInput
    title: String!
}

input TimelineCreateWithoutPremisesOnTimelinesInput {
    ReactionOnTimeline: ReactionOnTimelineCreateNestedManyWithoutTimelineInput
    author: UserCreateNestedOneWithoutTimelinesInput!
    description: String!
    id: String
    status: String!
    tagsOnTimelines: TagsOnTimelinesCreateNestedManyWithoutTimelineInput
    threadsOnTimeline: ThreadsOnTimelineCreateNestedManyWithoutTimelineInput
    title: String!
}

input TimelineCreateWithoutReactionOnTimelineInput {
    author: UserCreateNestedOneWithoutTimelinesInput!
    description: String!
    id: String
    premisesOnTimelines: PremisesOnTimelinesCreateNestedManyWithoutTimelineInput
    status: String!
    tagsOnTimelines: TagsOnTimelinesCreateNestedManyWithoutTimelineInput
    threadsOnTimeline: ThreadsOnTimelineCreateNestedManyWithoutTimelineInput
    title: String!
}

input TimelineCreateWithoutTagsOnTimelinesInput {
    ReactionOnTimeline: ReactionOnTimelineCreateNestedManyWithoutTimelineInput
    author: UserCreateNestedOneWithoutTimelinesInput!
    description: String!
    id: String
    premisesOnTimelines: PremisesOnTimelinesCreateNestedManyWithoutTimelineInput
    status: String!
    threadsOnTimeline: ThreadsOnTimelineCreateNestedManyWithoutTimelineInput
    title: String!
}

input TimelineCreateWithoutThreadsOnTimelineInput {
    ReactionOnTimeline: ReactionOnTimelineCreateNestedManyWithoutTimelineInput
    author: UserCreateNestedOneWithoutTimelinesInput!
    description: String!
    id: String
    premisesOnTimelines: PremisesOnTimelinesCreateNestedManyWithoutTimelineInput
    status: String!
    tagsOnTimelines: TagsOnTimelinesCreateNestedManyWithoutTimelineInput
    title: String!
}

type TimelineGroupBy {
    _count: TimelineCountAggregate
    _max: TimelineMaxAggregate
    _min: TimelineMinAggregate
    authorId: String!
    description: String!
    id: String!
    status: String!
    title: String!
}

input TimelineListRelationFilter {
    every: TimelineWhereInput
    none: TimelineWhereInput
    some: TimelineWhereInput
}

type TimelineMaxAggregate {
    authorId: String
    description: String
    id: String
    status: String
    title: String
}

input TimelineMaxOrderByAggregateInput {
    authorId: SortOrder
    description: SortOrder
    id: SortOrder
    status: SortOrder
    title: SortOrder
}

type TimelineMinAggregate {
    authorId: String
    description: String
    id: String
    status: String
    title: String
}

input TimelineMinOrderByAggregateInput {
    authorId: SortOrder
    description: SortOrder
    id: SortOrder
    status: SortOrder
    title: SortOrder
}

input TimelineOrderByRelationAggregateInput {
    _count: SortOrder
}

input TimelineOrderByWithAggregationInput {
    _count: TimelineCountOrderByAggregateInput
    _max: TimelineMaxOrderByAggregateInput
    _min: TimelineMinOrderByAggregateInput
    authorId: SortOrder
    description: SortOrder
    id: SortOrder
    status: SortOrder
    title: SortOrder
}

input TimelineOrderByWithRelationInput {
    ReactionOnTimeline: ReactionOnTimelineOrderByRelationAggregateInput
    author: UserOrderByWithRelationInput
    authorId: SortOrder
    description: SortOrder
    id: SortOrder
    premisesOnTimelines: PremisesOnTimelinesOrderByRelationAggregateInput
    status: SortOrder
    tagsOnTimelines: TagsOnTimelinesOrderByRelationAggregateInput
    threadsOnTimeline: ThreadsOnTimelineOrderByRelationAggregateInput
    title: SortOrder
}

input TimelineRelationFilter {
    is: TimelineWhereInput
    isNot: TimelineWhereInput
}

enum TimelineScalarFieldEnum {
    authorId
    description
    id
    status
    title
}

input TimelineScalarWhereInput {
    AND: [TimelineScalarWhereInput!]
    NOT: [TimelineScalarWhereInput!]
    OR: [TimelineScalarWhereInput!]
    authorId: StringFilter
    description: StringFilter
    id: StringFilter
    status: StringFilter
    title: StringFilter
}

input TimelineScalarWhereWithAggregatesInput {
    AND: [TimelineScalarWhereWithAggregatesInput!]
    NOT: [TimelineScalarWhereWithAggregatesInput!]
    OR: [TimelineScalarWhereWithAggregatesInput!]
    authorId: StringWithAggregatesFilter
    description: StringWithAggregatesFilter
    id: StringWithAggregatesFilter
    status: StringWithAggregatesFilter
    title: StringWithAggregatesFilter
}

input TimelineUpdateInput {
    ReactionOnTimeline: ReactionOnTimelineUpdateManyWithoutTimelineInput
    author: UserUpdateOneRequiredWithoutTimelinesInput
    description: StringFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    premisesOnTimelines: PremisesOnTimelinesUpdateManyWithoutTimelineInput
    status: StringFieldUpdateOperationsInput
    tagsOnTimelines: TagsOnTimelinesUpdateManyWithoutTimelineInput
    threadsOnTimeline: ThreadsOnTimelineUpdateManyWithoutTimelineInput
    title: StringFieldUpdateOperationsInput
}

input TimelineUpdateManyMutationInput {
    description: StringFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    status: StringFieldUpdateOperationsInput
    title: StringFieldUpdateOperationsInput
}

input TimelineUpdateManyWithWhereWithoutAuthorInput {
    data: TimelineUpdateManyMutationInput!
    where: TimelineScalarWhereInput!
}

input TimelineUpdateManyWithoutAuthorInput {
    connect: [TimelineWhereUniqueInput!]
    connectOrCreate: [TimelineCreateOrConnectWithoutAuthorInput!]
    create: [TimelineCreateWithoutAuthorInput!]
    createMany: TimelineCreateManyAuthorInputEnvelope
    delete: [TimelineWhereUniqueInput!]
    deleteMany: [TimelineScalarWhereInput!]
    disconnect: [TimelineWhereUniqueInput!]
    set: [TimelineWhereUniqueInput!]
    update: [TimelineUpdateWithWhereUniqueWithoutAuthorInput!]
    updateMany: [TimelineUpdateManyWithWhereWithoutAuthorInput!]
    upsert: [TimelineUpsertWithWhereUniqueWithoutAuthorInput!]
}

input TimelineUpdateOneRequiredWithoutPremisesOnTimelinesInput {
    connect: TimelineWhereUniqueInput
    connectOrCreate: TimelineCreateOrConnectWithoutPremisesOnTimelinesInput
    create: TimelineCreateWithoutPremisesOnTimelinesInput
    update: TimelineUpdateWithoutPremisesOnTimelinesInput
    upsert: TimelineUpsertWithoutPremisesOnTimelinesInput
}

input TimelineUpdateOneRequiredWithoutReactionOnTimelineInput {
    connect: TimelineWhereUniqueInput
    connectOrCreate: TimelineCreateOrConnectWithoutReactionOnTimelineInput
    create: TimelineCreateWithoutReactionOnTimelineInput
    update: TimelineUpdateWithoutReactionOnTimelineInput
    upsert: TimelineUpsertWithoutReactionOnTimelineInput
}

input TimelineUpdateOneRequiredWithoutTagsOnTimelinesInput {
    connect: TimelineWhereUniqueInput
    connectOrCreate: TimelineCreateOrConnectWithoutTagsOnTimelinesInput
    create: TimelineCreateWithoutTagsOnTimelinesInput
    update: TimelineUpdateWithoutTagsOnTimelinesInput
    upsert: TimelineUpsertWithoutTagsOnTimelinesInput
}

input TimelineUpdateOneRequiredWithoutThreadsOnTimelineInput {
    connect: TimelineWhereUniqueInput
    connectOrCreate: TimelineCreateOrConnectWithoutThreadsOnTimelineInput
    create: TimelineCreateWithoutThreadsOnTimelineInput
    update: TimelineUpdateWithoutThreadsOnTimelineInput
    upsert: TimelineUpsertWithoutThreadsOnTimelineInput
}

input TimelineUpdateWithWhereUniqueWithoutAuthorInput {
    data: TimelineUpdateWithoutAuthorInput!
    where: TimelineWhereUniqueInput!
}

input TimelineUpdateWithoutAuthorInput {
    ReactionOnTimeline: ReactionOnTimelineUpdateManyWithoutTimelineInput
    description: StringFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    premisesOnTimelines: PremisesOnTimelinesUpdateManyWithoutTimelineInput
    status: StringFieldUpdateOperationsInput
    tagsOnTimelines: TagsOnTimelinesUpdateManyWithoutTimelineInput
    threadsOnTimeline: ThreadsOnTimelineUpdateManyWithoutTimelineInput
    title: StringFieldUpdateOperationsInput
}

input TimelineUpdateWithoutPremisesOnTimelinesInput {
    ReactionOnTimeline: ReactionOnTimelineUpdateManyWithoutTimelineInput
    author: UserUpdateOneRequiredWithoutTimelinesInput
    description: StringFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    status: StringFieldUpdateOperationsInput
    tagsOnTimelines: TagsOnTimelinesUpdateManyWithoutTimelineInput
    threadsOnTimeline: ThreadsOnTimelineUpdateManyWithoutTimelineInput
    title: StringFieldUpdateOperationsInput
}

input TimelineUpdateWithoutReactionOnTimelineInput {
    author: UserUpdateOneRequiredWithoutTimelinesInput
    description: StringFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    premisesOnTimelines: PremisesOnTimelinesUpdateManyWithoutTimelineInput
    status: StringFieldUpdateOperationsInput
    tagsOnTimelines: TagsOnTimelinesUpdateManyWithoutTimelineInput
    threadsOnTimeline: ThreadsOnTimelineUpdateManyWithoutTimelineInput
    title: StringFieldUpdateOperationsInput
}

input TimelineUpdateWithoutTagsOnTimelinesInput {
    ReactionOnTimeline: ReactionOnTimelineUpdateManyWithoutTimelineInput
    author: UserUpdateOneRequiredWithoutTimelinesInput
    description: StringFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    premisesOnTimelines: PremisesOnTimelinesUpdateManyWithoutTimelineInput
    status: StringFieldUpdateOperationsInput
    threadsOnTimeline: ThreadsOnTimelineUpdateManyWithoutTimelineInput
    title: StringFieldUpdateOperationsInput
}

input TimelineUpdateWithoutThreadsOnTimelineInput {
    ReactionOnTimeline: ReactionOnTimelineUpdateManyWithoutTimelineInput
    author: UserUpdateOneRequiredWithoutTimelinesInput
    description: StringFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    premisesOnTimelines: PremisesOnTimelinesUpdateManyWithoutTimelineInput
    status: StringFieldUpdateOperationsInput
    tagsOnTimelines: TagsOnTimelinesUpdateManyWithoutTimelineInput
    title: StringFieldUpdateOperationsInput
}

input TimelineUpsertWithWhereUniqueWithoutAuthorInput {
    create: TimelineCreateWithoutAuthorInput!
    update: TimelineUpdateWithoutAuthorInput!
    where: TimelineWhereUniqueInput!
}

input TimelineUpsertWithoutPremisesOnTimelinesInput {
    create: TimelineCreateWithoutPremisesOnTimelinesInput!
    update: TimelineUpdateWithoutPremisesOnTimelinesInput!
}

input TimelineUpsertWithoutReactionOnTimelineInput {
    create: TimelineCreateWithoutReactionOnTimelineInput!
    update: TimelineUpdateWithoutReactionOnTimelineInput!
}

input TimelineUpsertWithoutTagsOnTimelinesInput {
    create: TimelineCreateWithoutTagsOnTimelinesInput!
    update: TimelineUpdateWithoutTagsOnTimelinesInput!
}

input TimelineUpsertWithoutThreadsOnTimelineInput {
    create: TimelineCreateWithoutThreadsOnTimelineInput!
    update: TimelineUpdateWithoutThreadsOnTimelineInput!
}

input TimelineWhereInput {
    AND: [TimelineWhereInput!]
    NOT: [TimelineWhereInput!]
    OR: [TimelineWhereInput!]
    ReactionOnTimeline: ReactionOnTimelineListRelationFilter
    author: UserRelationFilter
    authorId: StringFilter
    description: StringFilter
    id: StringFilter
    premisesOnTimelines: PremisesOnTimelinesListRelationFilter
    status: StringFilter
    tagsOnTimelines: TagsOnTimelinesListRelationFilter
    threadsOnTimeline: ThreadsOnTimelineListRelationFilter
    title: StringFilter
}

input TimelineWhereUniqueInput {
    id: String
}

type User {
    ReactionOnThread(cursor: ReactionOnThreadWhereUniqueInput, distinct: [ReactionOnThreadScalarFieldEnum!], orderBy: [ReactionOnThreadOrderByWithRelationInput!], skip: Int, take: Int, where: ReactionOnThreadWhereInput): [ReactionOnThread!]!
    ReactionOnTimeline(cursor: ReactionOnTimelineWhereUniqueInput, distinct: [ReactionOnTimelineScalarFieldEnum!], orderBy: [ReactionOnTimelineOrderByWithRelationInput!], skip: Int, take: Int, where: ReactionOnTimelineWhereInput): [ReactionOnTimeline!]!
    ReactionOnVision(cursor: ReactionOnVisionWhereUniqueInput, distinct: [ReactionOnVisionScalarFieldEnum!], orderBy: [ReactionOnVisionOrderByWithRelationInput!], skip: Int, take: Int, where: ReactionOnVisionWhereInput): [ReactionOnVision!]!
    _count: UserCount
    accounts(cursor: AccountWhereUniqueInput, distinct: [AccountScalarFieldEnum!], orderBy: [AccountOrderByWithRelationInput!], skip: Int, take: Int, where: AccountWhereInput): [Account!]!
    email: String
    emailVerified: DateTime
    id: String!
    image: String
    name: String
    premises(cursor: PremiseWhereUniqueInput, distinct: [PremiseScalarFieldEnum!], orderBy: [PremiseOrderByWithRelationInput!], skip: Int, take: Int, where: PremiseWhereInput): [Premise!]!
    sessions(cursor: SessionWhereUniqueInput, distinct: [SessionScalarFieldEnum!], orderBy: [SessionOrderByWithRelationInput!], skip: Int, take: Int, where: SessionWhereInput): [Session!]!
    threads(cursor: ThreadWhereUniqueInput, distinct: [ThreadScalarFieldEnum!], orderBy: [ThreadOrderByWithRelationInput!], skip: Int, take: Int, where: ThreadWhereInput): [Thread!]!
    timelines(cursor: TimelineWhereUniqueInput, distinct: [TimelineScalarFieldEnum!], orderBy: [TimelineOrderByWithRelationInput!], skip: Int, take: Int, where: TimelineWhereInput): [Timeline!]!
    updatedAt: DateTime
    visions(cursor: VisionWhereUniqueInput, distinct: [VisionScalarFieldEnum!], orderBy: [VisionOrderByWithRelationInput!], skip: Int, take: Int, where: VisionWhereInput): [Vision!]!
}

type UserCount {
    ReactionOnThread: Int!
    ReactionOnTimeline: Int!
    ReactionOnVision: Int!
    accounts: Int!
    premises: Int!
    sessions: Int!
    threads: Int!
    timelines: Int!
    visions: Int!
}

type UserCountAggregate {
    _all: Int!
    email: Int!
    emailVerified: Int!
    id: Int!
    image: Int!
    name: Int!
    updatedAt: Int!
}

input UserCountOrderByAggregateInput {
    email: SortOrder
    emailVerified: SortOrder
    id: SortOrder
    image: SortOrder
    name: SortOrder
    updatedAt: SortOrder
}

input UserCreateInput {
    ReactionOnThread: ReactionOnThreadCreateNestedManyWithoutUserInput
    ReactionOnTimeline: ReactionOnTimelineCreateNestedManyWithoutUserInput
    ReactionOnVision: ReactionOnVisionCreateNestedManyWithoutUserInput
    accounts: AccountCreateNestedManyWithoutUserInput
    email: String
    emailVerified: DateTime
    id: String
    image: String
    name: String
    premises: PremiseCreateNestedManyWithoutAuthorInput
    sessions: SessionCreateNestedManyWithoutUserInput
    threads: ThreadCreateNestedManyWithoutAuthorInput
    timelines: TimelineCreateNestedManyWithoutAuthorInput
    updatedAt: DateTime
    visions: VisionCreateNestedManyWithoutAuthorInput
}

input UserCreateManyInput {
    email: String
    emailVerified: DateTime
    id: String
    image: String
    name: String
    updatedAt: DateTime
}

input UserCreateNestedOneWithoutAccountsInput {
    connect: UserWhereUniqueInput
    connectOrCreate: UserCreateOrConnectWithoutAccountsInput
    create: UserCreateWithoutAccountsInput
}

input UserCreateNestedOneWithoutPremisesInput {
    connect: UserWhereUniqueInput
    connectOrCreate: UserCreateOrConnectWithoutPremisesInput
    create: UserCreateWithoutPremisesInput
}

input UserCreateNestedOneWithoutReactionOnThreadInput {
    connect: UserWhereUniqueInput
    connectOrCreate: UserCreateOrConnectWithoutReactionOnThreadInput
    create: UserCreateWithoutReactionOnThreadInput
}

input UserCreateNestedOneWithoutReactionOnTimelineInput {
    connect: UserWhereUniqueInput
    connectOrCreate: UserCreateOrConnectWithoutReactionOnTimelineInput
    create: UserCreateWithoutReactionOnTimelineInput
}

input UserCreateNestedOneWithoutReactionOnVisionInput {
    connect: UserWhereUniqueInput
    connectOrCreate: UserCreateOrConnectWithoutReactionOnVisionInput
    create: UserCreateWithoutReactionOnVisionInput
}

input UserCreateNestedOneWithoutSessionsInput {
    connect: UserWhereUniqueInput
    connectOrCreate: UserCreateOrConnectWithoutSessionsInput
    create: UserCreateWithoutSessionsInput
}

input UserCreateNestedOneWithoutThreadsInput {
    connect: UserWhereUniqueInput
    connectOrCreate: UserCreateOrConnectWithoutThreadsInput
    create: UserCreateWithoutThreadsInput
}

input UserCreateNestedOneWithoutTimelinesInput {
    connect: UserWhereUniqueInput
    connectOrCreate: UserCreateOrConnectWithoutTimelinesInput
    create: UserCreateWithoutTimelinesInput
}

input UserCreateNestedOneWithoutVisionsInput {
    connect: UserWhereUniqueInput
    connectOrCreate: UserCreateOrConnectWithoutVisionsInput
    create: UserCreateWithoutVisionsInput
}

input UserCreateOrConnectWithoutAccountsInput {
    create: UserCreateWithoutAccountsInput!
    where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutPremisesInput {
    create: UserCreateWithoutPremisesInput!
    where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutReactionOnThreadInput {
    create: UserCreateWithoutReactionOnThreadInput!
    where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutReactionOnTimelineInput {
    create: UserCreateWithoutReactionOnTimelineInput!
    where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutReactionOnVisionInput {
    create: UserCreateWithoutReactionOnVisionInput!
    where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutSessionsInput {
    create: UserCreateWithoutSessionsInput!
    where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutThreadsInput {
    create: UserCreateWithoutThreadsInput!
    where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutTimelinesInput {
    create: UserCreateWithoutTimelinesInput!
    where: UserWhereUniqueInput!
}

input UserCreateOrConnectWithoutVisionsInput {
    create: UserCreateWithoutVisionsInput!
    where: UserWhereUniqueInput!
}

input UserCreateWithoutAccountsInput {
    ReactionOnThread: ReactionOnThreadCreateNestedManyWithoutUserInput
    ReactionOnTimeline: ReactionOnTimelineCreateNestedManyWithoutUserInput
    ReactionOnVision: ReactionOnVisionCreateNestedManyWithoutUserInput
    email: String
    emailVerified: DateTime
    id: String
    image: String
    name: String
    premises: PremiseCreateNestedManyWithoutAuthorInput
    sessions: SessionCreateNestedManyWithoutUserInput
    threads: ThreadCreateNestedManyWithoutAuthorInput
    timelines: TimelineCreateNestedManyWithoutAuthorInput
    updatedAt: DateTime
    visions: VisionCreateNestedManyWithoutAuthorInput
}

input UserCreateWithoutPremisesInput {
    ReactionOnThread: ReactionOnThreadCreateNestedManyWithoutUserInput
    ReactionOnTimeline: ReactionOnTimelineCreateNestedManyWithoutUserInput
    ReactionOnVision: ReactionOnVisionCreateNestedManyWithoutUserInput
    accounts: AccountCreateNestedManyWithoutUserInput
    email: String
    emailVerified: DateTime
    id: String
    image: String
    name: String
    sessions: SessionCreateNestedManyWithoutUserInput
    threads: ThreadCreateNestedManyWithoutAuthorInput
    timelines: TimelineCreateNestedManyWithoutAuthorInput
    updatedAt: DateTime
    visions: VisionCreateNestedManyWithoutAuthorInput
}

input UserCreateWithoutReactionOnThreadInput {
    ReactionOnTimeline: ReactionOnTimelineCreateNestedManyWithoutUserInput
    ReactionOnVision: ReactionOnVisionCreateNestedManyWithoutUserInput
    accounts: AccountCreateNestedManyWithoutUserInput
    email: String
    emailVerified: DateTime
    id: String
    image: String
    name: String
    premises: PremiseCreateNestedManyWithoutAuthorInput
    sessions: SessionCreateNestedManyWithoutUserInput
    threads: ThreadCreateNestedManyWithoutAuthorInput
    timelines: TimelineCreateNestedManyWithoutAuthorInput
    updatedAt: DateTime
    visions: VisionCreateNestedManyWithoutAuthorInput
}

input UserCreateWithoutReactionOnTimelineInput {
    ReactionOnThread: ReactionOnThreadCreateNestedManyWithoutUserInput
    ReactionOnVision: ReactionOnVisionCreateNestedManyWithoutUserInput
    accounts: AccountCreateNestedManyWithoutUserInput
    email: String
    emailVerified: DateTime
    id: String
    image: String
    name: String
    premises: PremiseCreateNestedManyWithoutAuthorInput
    sessions: SessionCreateNestedManyWithoutUserInput
    threads: ThreadCreateNestedManyWithoutAuthorInput
    timelines: TimelineCreateNestedManyWithoutAuthorInput
    updatedAt: DateTime
    visions: VisionCreateNestedManyWithoutAuthorInput
}

input UserCreateWithoutReactionOnVisionInput {
    ReactionOnThread: ReactionOnThreadCreateNestedManyWithoutUserInput
    ReactionOnTimeline: ReactionOnTimelineCreateNestedManyWithoutUserInput
    accounts: AccountCreateNestedManyWithoutUserInput
    email: String
    emailVerified: DateTime
    id: String
    image: String
    name: String
    premises: PremiseCreateNestedManyWithoutAuthorInput
    sessions: SessionCreateNestedManyWithoutUserInput
    threads: ThreadCreateNestedManyWithoutAuthorInput
    timelines: TimelineCreateNestedManyWithoutAuthorInput
    updatedAt: DateTime
    visions: VisionCreateNestedManyWithoutAuthorInput
}

input UserCreateWithoutSessionsInput {
    ReactionOnThread: ReactionOnThreadCreateNestedManyWithoutUserInput
    ReactionOnTimeline: ReactionOnTimelineCreateNestedManyWithoutUserInput
    ReactionOnVision: ReactionOnVisionCreateNestedManyWithoutUserInput
    accounts: AccountCreateNestedManyWithoutUserInput
    email: String
    emailVerified: DateTime
    id: String
    image: String
    name: String
    premises: PremiseCreateNestedManyWithoutAuthorInput
    threads: ThreadCreateNestedManyWithoutAuthorInput
    timelines: TimelineCreateNestedManyWithoutAuthorInput
    updatedAt: DateTime
    visions: VisionCreateNestedManyWithoutAuthorInput
}

input UserCreateWithoutThreadsInput {
    ReactionOnThread: ReactionOnThreadCreateNestedManyWithoutUserInput
    ReactionOnTimeline: ReactionOnTimelineCreateNestedManyWithoutUserInput
    ReactionOnVision: ReactionOnVisionCreateNestedManyWithoutUserInput
    accounts: AccountCreateNestedManyWithoutUserInput
    email: String
    emailVerified: DateTime
    id: String
    image: String
    name: String
    premises: PremiseCreateNestedManyWithoutAuthorInput
    sessions: SessionCreateNestedManyWithoutUserInput
    timelines: TimelineCreateNestedManyWithoutAuthorInput
    updatedAt: DateTime
    visions: VisionCreateNestedManyWithoutAuthorInput
}

input UserCreateWithoutTimelinesInput {
    ReactionOnThread: ReactionOnThreadCreateNestedManyWithoutUserInput
    ReactionOnTimeline: ReactionOnTimelineCreateNestedManyWithoutUserInput
    ReactionOnVision: ReactionOnVisionCreateNestedManyWithoutUserInput
    accounts: AccountCreateNestedManyWithoutUserInput
    email: String
    emailVerified: DateTime
    id: String
    image: String
    name: String
    premises: PremiseCreateNestedManyWithoutAuthorInput
    sessions: SessionCreateNestedManyWithoutUserInput
    threads: ThreadCreateNestedManyWithoutAuthorInput
    updatedAt: DateTime
    visions: VisionCreateNestedManyWithoutAuthorInput
}

input UserCreateWithoutVisionsInput {
    ReactionOnThread: ReactionOnThreadCreateNestedManyWithoutUserInput
    ReactionOnTimeline: ReactionOnTimelineCreateNestedManyWithoutUserInput
    ReactionOnVision: ReactionOnVisionCreateNestedManyWithoutUserInput
    accounts: AccountCreateNestedManyWithoutUserInput
    email: String
    emailVerified: DateTime
    id: String
    image: String
    name: String
    premises: PremiseCreateNestedManyWithoutAuthorInput
    sessions: SessionCreateNestedManyWithoutUserInput
    threads: ThreadCreateNestedManyWithoutAuthorInput
    timelines: TimelineCreateNestedManyWithoutAuthorInput
    updatedAt: DateTime
}

type UserGroupBy {
    _count: UserCountAggregate
    _max: UserMaxAggregate
    _min: UserMinAggregate
    email: String
    emailVerified: DateTime
    id: String!
    image: String
    name: String
    updatedAt: DateTime
}

type UserMaxAggregate {
    email: String
    emailVerified: DateTime
    id: String
    image: String
    name: String
    updatedAt: DateTime
}

input UserMaxOrderByAggregateInput {
    email: SortOrder
    emailVerified: SortOrder
    id: SortOrder
    image: SortOrder
    name: SortOrder
    updatedAt: SortOrder
}

type UserMinAggregate {
    email: String
    emailVerified: DateTime
    id: String
    image: String
    name: String
    updatedAt: DateTime
}

input UserMinOrderByAggregateInput {
    email: SortOrder
    emailVerified: SortOrder
    id: SortOrder
    image: SortOrder
    name: SortOrder
    updatedAt: SortOrder
}

input UserOrderByWithAggregationInput {
    _count: UserCountOrderByAggregateInput
    _max: UserMaxOrderByAggregateInput
    _min: UserMinOrderByAggregateInput
    email: SortOrder
    emailVerified: SortOrder
    id: SortOrder
    image: SortOrder
    name: SortOrder
    updatedAt: SortOrder
}

input UserOrderByWithRelationInput {
    ReactionOnThread: ReactionOnThreadOrderByRelationAggregateInput
    ReactionOnTimeline: ReactionOnTimelineOrderByRelationAggregateInput
    ReactionOnVision: ReactionOnVisionOrderByRelationAggregateInput
    accounts: AccountOrderByRelationAggregateInput
    email: SortOrder
    emailVerified: SortOrder
    id: SortOrder
    image: SortOrder
    name: SortOrder
    premises: PremiseOrderByRelationAggregateInput
    sessions: SessionOrderByRelationAggregateInput
    threads: ThreadOrderByRelationAggregateInput
    timelines: TimelineOrderByRelationAggregateInput
    updatedAt: SortOrder
    visions: VisionOrderByRelationAggregateInput
}

input UserRelationFilter {
    is: UserWhereInput
    isNot: UserWhereInput
}

enum UserScalarFieldEnum {
    email
    emailVerified
    id
    image
    name
    updatedAt
}

input UserScalarWhereWithAggregatesInput {
    AND: [UserScalarWhereWithAggregatesInput!]
    NOT: [UserScalarWhereWithAggregatesInput!]
    OR: [UserScalarWhereWithAggregatesInput!]
    email: StringNullableWithAggregatesFilter
    emailVerified: DateTimeNullableWithAggregatesFilter
    id: StringWithAggregatesFilter
    image: StringNullableWithAggregatesFilter
    name: StringNullableWithAggregatesFilter
    updatedAt: DateTimeNullableWithAggregatesFilter
}

input UserUpdateInput {
    ReactionOnThread: ReactionOnThreadUpdateManyWithoutUserInput
    ReactionOnTimeline: ReactionOnTimelineUpdateManyWithoutUserInput
    ReactionOnVision: ReactionOnVisionUpdateManyWithoutUserInput
    accounts: AccountUpdateManyWithoutUserInput
    email: NullableStringFieldUpdateOperationsInput
    emailVerified: NullableDateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    image: NullableStringFieldUpdateOperationsInput
    name: NullableStringFieldUpdateOperationsInput
    premises: PremiseUpdateManyWithoutAuthorInput
    sessions: SessionUpdateManyWithoutUserInput
    threads: ThreadUpdateManyWithoutAuthorInput
    timelines: TimelineUpdateManyWithoutAuthorInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
    visions: VisionUpdateManyWithoutAuthorInput
}

input UserUpdateManyMutationInput {
    email: NullableStringFieldUpdateOperationsInput
    emailVerified: NullableDateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    image: NullableStringFieldUpdateOperationsInput
    name: NullableStringFieldUpdateOperationsInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input UserUpdateOneRequiredWithoutAccountsInput {
    connect: UserWhereUniqueInput
    connectOrCreate: UserCreateOrConnectWithoutAccountsInput
    create: UserCreateWithoutAccountsInput
    update: UserUpdateWithoutAccountsInput
    upsert: UserUpsertWithoutAccountsInput
}

input UserUpdateOneRequiredWithoutReactionOnThreadInput {
    connect: UserWhereUniqueInput
    connectOrCreate: UserCreateOrConnectWithoutReactionOnThreadInput
    create: UserCreateWithoutReactionOnThreadInput
    update: UserUpdateWithoutReactionOnThreadInput
    upsert: UserUpsertWithoutReactionOnThreadInput
}

input UserUpdateOneRequiredWithoutReactionOnTimelineInput {
    connect: UserWhereUniqueInput
    connectOrCreate: UserCreateOrConnectWithoutReactionOnTimelineInput
    create: UserCreateWithoutReactionOnTimelineInput
    update: UserUpdateWithoutReactionOnTimelineInput
    upsert: UserUpsertWithoutReactionOnTimelineInput
}

input UserUpdateOneRequiredWithoutReactionOnVisionInput {
    connect: UserWhereUniqueInput
    connectOrCreate: UserCreateOrConnectWithoutReactionOnVisionInput
    create: UserCreateWithoutReactionOnVisionInput
    update: UserUpdateWithoutReactionOnVisionInput
    upsert: UserUpsertWithoutReactionOnVisionInput
}

input UserUpdateOneRequiredWithoutSessionsInput {
    connect: UserWhereUniqueInput
    connectOrCreate: UserCreateOrConnectWithoutSessionsInput
    create: UserCreateWithoutSessionsInput
    update: UserUpdateWithoutSessionsInput
    upsert: UserUpsertWithoutSessionsInput
}

input UserUpdateOneRequiredWithoutTimelinesInput {
    connect: UserWhereUniqueInput
    connectOrCreate: UserCreateOrConnectWithoutTimelinesInput
    create: UserCreateWithoutTimelinesInput
    update: UserUpdateWithoutTimelinesInput
    upsert: UserUpsertWithoutTimelinesInput
}

input UserUpdateOneWithoutPremisesInput {
    connect: UserWhereUniqueInput
    connectOrCreate: UserCreateOrConnectWithoutPremisesInput
    create: UserCreateWithoutPremisesInput
    delete: Boolean
    disconnect: Boolean
    update: UserUpdateWithoutPremisesInput
    upsert: UserUpsertWithoutPremisesInput
}

input UserUpdateOneWithoutThreadsInput {
    connect: UserWhereUniqueInput
    connectOrCreate: UserCreateOrConnectWithoutThreadsInput
    create: UserCreateWithoutThreadsInput
    delete: Boolean
    disconnect: Boolean
    update: UserUpdateWithoutThreadsInput
    upsert: UserUpsertWithoutThreadsInput
}

input UserUpdateOneWithoutVisionsInput {
    connect: UserWhereUniqueInput
    connectOrCreate: UserCreateOrConnectWithoutVisionsInput
    create: UserCreateWithoutVisionsInput
    delete: Boolean
    disconnect: Boolean
    update: UserUpdateWithoutVisionsInput
    upsert: UserUpsertWithoutVisionsInput
}

input UserUpdateWithoutAccountsInput {
    ReactionOnThread: ReactionOnThreadUpdateManyWithoutUserInput
    ReactionOnTimeline: ReactionOnTimelineUpdateManyWithoutUserInput
    ReactionOnVision: ReactionOnVisionUpdateManyWithoutUserInput
    email: NullableStringFieldUpdateOperationsInput
    emailVerified: NullableDateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    image: NullableStringFieldUpdateOperationsInput
    name: NullableStringFieldUpdateOperationsInput
    premises: PremiseUpdateManyWithoutAuthorInput
    sessions: SessionUpdateManyWithoutUserInput
    threads: ThreadUpdateManyWithoutAuthorInput
    timelines: TimelineUpdateManyWithoutAuthorInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
    visions: VisionUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutPremisesInput {
    ReactionOnThread: ReactionOnThreadUpdateManyWithoutUserInput
    ReactionOnTimeline: ReactionOnTimelineUpdateManyWithoutUserInput
    ReactionOnVision: ReactionOnVisionUpdateManyWithoutUserInput
    accounts: AccountUpdateManyWithoutUserInput
    email: NullableStringFieldUpdateOperationsInput
    emailVerified: NullableDateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    image: NullableStringFieldUpdateOperationsInput
    name: NullableStringFieldUpdateOperationsInput
    sessions: SessionUpdateManyWithoutUserInput
    threads: ThreadUpdateManyWithoutAuthorInput
    timelines: TimelineUpdateManyWithoutAuthorInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
    visions: VisionUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutReactionOnThreadInput {
    ReactionOnTimeline: ReactionOnTimelineUpdateManyWithoutUserInput
    ReactionOnVision: ReactionOnVisionUpdateManyWithoutUserInput
    accounts: AccountUpdateManyWithoutUserInput
    email: NullableStringFieldUpdateOperationsInput
    emailVerified: NullableDateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    image: NullableStringFieldUpdateOperationsInput
    name: NullableStringFieldUpdateOperationsInput
    premises: PremiseUpdateManyWithoutAuthorInput
    sessions: SessionUpdateManyWithoutUserInput
    threads: ThreadUpdateManyWithoutAuthorInput
    timelines: TimelineUpdateManyWithoutAuthorInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
    visions: VisionUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutReactionOnTimelineInput {
    ReactionOnThread: ReactionOnThreadUpdateManyWithoutUserInput
    ReactionOnVision: ReactionOnVisionUpdateManyWithoutUserInput
    accounts: AccountUpdateManyWithoutUserInput
    email: NullableStringFieldUpdateOperationsInput
    emailVerified: NullableDateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    image: NullableStringFieldUpdateOperationsInput
    name: NullableStringFieldUpdateOperationsInput
    premises: PremiseUpdateManyWithoutAuthorInput
    sessions: SessionUpdateManyWithoutUserInput
    threads: ThreadUpdateManyWithoutAuthorInput
    timelines: TimelineUpdateManyWithoutAuthorInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
    visions: VisionUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutReactionOnVisionInput {
    ReactionOnThread: ReactionOnThreadUpdateManyWithoutUserInput
    ReactionOnTimeline: ReactionOnTimelineUpdateManyWithoutUserInput
    accounts: AccountUpdateManyWithoutUserInput
    email: NullableStringFieldUpdateOperationsInput
    emailVerified: NullableDateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    image: NullableStringFieldUpdateOperationsInput
    name: NullableStringFieldUpdateOperationsInput
    premises: PremiseUpdateManyWithoutAuthorInput
    sessions: SessionUpdateManyWithoutUserInput
    threads: ThreadUpdateManyWithoutAuthorInput
    timelines: TimelineUpdateManyWithoutAuthorInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
    visions: VisionUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutSessionsInput {
    ReactionOnThread: ReactionOnThreadUpdateManyWithoutUserInput
    ReactionOnTimeline: ReactionOnTimelineUpdateManyWithoutUserInput
    ReactionOnVision: ReactionOnVisionUpdateManyWithoutUserInput
    accounts: AccountUpdateManyWithoutUserInput
    email: NullableStringFieldUpdateOperationsInput
    emailVerified: NullableDateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    image: NullableStringFieldUpdateOperationsInput
    name: NullableStringFieldUpdateOperationsInput
    premises: PremiseUpdateManyWithoutAuthorInput
    threads: ThreadUpdateManyWithoutAuthorInput
    timelines: TimelineUpdateManyWithoutAuthorInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
    visions: VisionUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutThreadsInput {
    ReactionOnThread: ReactionOnThreadUpdateManyWithoutUserInput
    ReactionOnTimeline: ReactionOnTimelineUpdateManyWithoutUserInput
    ReactionOnVision: ReactionOnVisionUpdateManyWithoutUserInput
    accounts: AccountUpdateManyWithoutUserInput
    email: NullableStringFieldUpdateOperationsInput
    emailVerified: NullableDateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    image: NullableStringFieldUpdateOperationsInput
    name: NullableStringFieldUpdateOperationsInput
    premises: PremiseUpdateManyWithoutAuthorInput
    sessions: SessionUpdateManyWithoutUserInput
    timelines: TimelineUpdateManyWithoutAuthorInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
    visions: VisionUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutTimelinesInput {
    ReactionOnThread: ReactionOnThreadUpdateManyWithoutUserInput
    ReactionOnTimeline: ReactionOnTimelineUpdateManyWithoutUserInput
    ReactionOnVision: ReactionOnVisionUpdateManyWithoutUserInput
    accounts: AccountUpdateManyWithoutUserInput
    email: NullableStringFieldUpdateOperationsInput
    emailVerified: NullableDateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    image: NullableStringFieldUpdateOperationsInput
    name: NullableStringFieldUpdateOperationsInput
    premises: PremiseUpdateManyWithoutAuthorInput
    sessions: SessionUpdateManyWithoutUserInput
    threads: ThreadUpdateManyWithoutAuthorInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
    visions: VisionUpdateManyWithoutAuthorInput
}

input UserUpdateWithoutVisionsInput {
    ReactionOnThread: ReactionOnThreadUpdateManyWithoutUserInput
    ReactionOnTimeline: ReactionOnTimelineUpdateManyWithoutUserInput
    ReactionOnVision: ReactionOnVisionUpdateManyWithoutUserInput
    accounts: AccountUpdateManyWithoutUserInput
    email: NullableStringFieldUpdateOperationsInput
    emailVerified: NullableDateTimeFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    image: NullableStringFieldUpdateOperationsInput
    name: NullableStringFieldUpdateOperationsInput
    premises: PremiseUpdateManyWithoutAuthorInput
    sessions: SessionUpdateManyWithoutUserInput
    threads: ThreadUpdateManyWithoutAuthorInput
    timelines: TimelineUpdateManyWithoutAuthorInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input UserUpsertWithoutAccountsInput {
    create: UserCreateWithoutAccountsInput!
    update: UserUpdateWithoutAccountsInput!
}

input UserUpsertWithoutPremisesInput {
    create: UserCreateWithoutPremisesInput!
    update: UserUpdateWithoutPremisesInput!
}

input UserUpsertWithoutReactionOnThreadInput {
    create: UserCreateWithoutReactionOnThreadInput!
    update: UserUpdateWithoutReactionOnThreadInput!
}

input UserUpsertWithoutReactionOnTimelineInput {
    create: UserCreateWithoutReactionOnTimelineInput!
    update: UserUpdateWithoutReactionOnTimelineInput!
}

input UserUpsertWithoutReactionOnVisionInput {
    create: UserCreateWithoutReactionOnVisionInput!
    update: UserUpdateWithoutReactionOnVisionInput!
}

input UserUpsertWithoutSessionsInput {
    create: UserCreateWithoutSessionsInput!
    update: UserUpdateWithoutSessionsInput!
}

input UserUpsertWithoutThreadsInput {
    create: UserCreateWithoutThreadsInput!
    update: UserUpdateWithoutThreadsInput!
}

input UserUpsertWithoutTimelinesInput {
    create: UserCreateWithoutTimelinesInput!
    update: UserUpdateWithoutTimelinesInput!
}

input UserUpsertWithoutVisionsInput {
    create: UserCreateWithoutVisionsInput!
    update: UserUpdateWithoutVisionsInput!
}

input UserWhereInput {
    AND: [UserWhereInput!]
    NOT: [UserWhereInput!]
    OR: [UserWhereInput!]
    ReactionOnThread: ReactionOnThreadListRelationFilter
    ReactionOnTimeline: ReactionOnTimelineListRelationFilter
    ReactionOnVision: ReactionOnVisionListRelationFilter
    accounts: AccountListRelationFilter
    email: StringNullableFilter
    emailVerified: DateTimeNullableFilter
    id: StringFilter
    image: StringNullableFilter
    name: StringNullableFilter
    premises: PremiseListRelationFilter
    sessions: SessionListRelationFilter
    threads: ThreadListRelationFilter
    timelines: TimelineListRelationFilter
    updatedAt: DateTimeNullableFilter
    visions: VisionListRelationFilter
}

input UserWhereUniqueInput {
    email: String
    id: String
}

type VerificationToken {
    expires: DateTime!
    identifier: String!
    token: String!
}

type VerificationTokenCountAggregate {
    _all: Int!
    expires: Int!
    identifier: Int!
    token: Int!
}

input VerificationTokenCountOrderByAggregateInput {
    expires: SortOrder
    identifier: SortOrder
    token: SortOrder
}

input VerificationTokenCreateInput {
    expires: DateTime!
    identifier: String!
    token: String!
}

input VerificationTokenCreateManyInput {
    expires: DateTime!
    identifier: String!
    token: String!
}

type VerificationTokenGroupBy {
    _count: VerificationTokenCountAggregate
    _max: VerificationTokenMaxAggregate
    _min: VerificationTokenMinAggregate
    expires: DateTime!
    identifier: String!
    token: String!
}

input VerificationTokenIdentifierTokenCompoundUniqueInput {
    identifier: String!
    token: String!
}

type VerificationTokenMaxAggregate {
    expires: DateTime
    identifier: String
    token: String
}

input VerificationTokenMaxOrderByAggregateInput {
    expires: SortOrder
    identifier: SortOrder
    token: SortOrder
}

type VerificationTokenMinAggregate {
    expires: DateTime
    identifier: String
    token: String
}

input VerificationTokenMinOrderByAggregateInput {
    expires: SortOrder
    identifier: SortOrder
    token: SortOrder
}

input VerificationTokenOrderByWithAggregationInput {
    _count: VerificationTokenCountOrderByAggregateInput
    _max: VerificationTokenMaxOrderByAggregateInput
    _min: VerificationTokenMinOrderByAggregateInput
    expires: SortOrder
    identifier: SortOrder
    token: SortOrder
}

input VerificationTokenOrderByWithRelationInput {
    expires: SortOrder
    identifier: SortOrder
    token: SortOrder
}

enum VerificationTokenScalarFieldEnum {
    expires
    identifier
    token
}

input VerificationTokenScalarWhereWithAggregatesInput {
    AND: [VerificationTokenScalarWhereWithAggregatesInput!]
    NOT: [VerificationTokenScalarWhereWithAggregatesInput!]
    OR: [VerificationTokenScalarWhereWithAggregatesInput!]
    expires: DateTimeWithAggregatesFilter
    identifier: StringWithAggregatesFilter
    token: StringWithAggregatesFilter
}

input VerificationTokenUpdateInput {
    expires: DateTimeFieldUpdateOperationsInput
    identifier: StringFieldUpdateOperationsInput
    token: StringFieldUpdateOperationsInput
}

input VerificationTokenUpdateManyMutationInput {
    expires: DateTimeFieldUpdateOperationsInput
    identifier: StringFieldUpdateOperationsInput
    token: StringFieldUpdateOperationsInput
}

input VerificationTokenWhereInput {
    AND: [VerificationTokenWhereInput!]
    NOT: [VerificationTokenWhereInput!]
    OR: [VerificationTokenWhereInput!]
    expires: DateTimeFilter
    identifier: StringFilter
    token: StringFilter
}

input VerificationTokenWhereUniqueInput {
    identifier_token: VerificationTokenIdentifierTokenCompoundUniqueInput
    token: String
}

type Vision {
    ReactionOnVision(cursor: ReactionOnVisionWhereUniqueInput, distinct: [ReactionOnVisionScalarFieldEnum!], orderBy: [ReactionOnVisionOrderByWithRelationInput!], skip: Int, take: Int, where: ReactionOnVisionWhereInput): [ReactionOnVision!]!
    _count: VisionCount
    activityDate: DateTime
    author: User
    authorId: String
    createdAt: DateTime!
    description: String
    draftMode: Boolean!
    id: String!
    mergeRequest: MergeRequest
    nextVisions(cursor: VisionWhereUniqueInput, distinct: [VisionScalarFieldEnum!], orderBy: [VisionOrderByWithRelationInput!], skip: Int, take: Int, where: VisionWhereInput): [Vision!]!
    premise: Premise!
    premiseId: String!
    prevVision: Vision
    prevVisionId: String
    reference: Reference
    referenceId: String
    threadsOnVision(cursor: ThreadsOnVisionWhereUniqueInput, distinct: [ThreadsOnVisionScalarFieldEnum!], orderBy: [ThreadsOnVisionOrderByWithRelationInput!], skip: Int, take: Int, where: ThreadsOnVisionWhereInput): [ThreadsOnVision!]!
    thumbnail: String
    title: String!
    updatedAt: DateTime
}

type VisionCount {
    ReactionOnVision: Int!
    nextVisions: Int!
    threadsOnVision: Int!
}

type VisionCountAggregate {
    _all: Int!
    activityDate: Int!
    authorId: Int!
    createdAt: Int!
    description: Int!
    draftMode: Int!
    id: Int!
    premiseId: Int!
    prevVisionId: Int!
    referenceId: Int!
    thumbnail: Int!
    title: Int!
    updatedAt: Int!
}

input VisionCountOrderByAggregateInput {
    activityDate: SortOrder
    authorId: SortOrder
    createdAt: SortOrder
    description: SortOrder
    draftMode: SortOrder
    id: SortOrder
    premiseId: SortOrder
    prevVisionId: SortOrder
    referenceId: SortOrder
    thumbnail: SortOrder
    title: SortOrder
    updatedAt: SortOrder
}

input VisionCreateInput {
    ReactionOnVision: ReactionOnVisionCreateNestedManyWithoutVisionInput
    activityDate: DateTime
    author: UserCreateNestedOneWithoutVisionsInput
    createdAt: DateTime
    description: String
    draftMode: Boolean
    id: String
    mergeRequest: MergeRequestCreateNestedOneWithoutVisionInput
    nextVisions: VisionCreateNestedManyWithoutPrevVisionInput
    premise: PremiseCreateNestedOneWithoutVisionInput!
    prevVision: VisionCreateNestedOneWithoutNextVisionsInput
    reference: ReferenceCreateNestedOneWithoutVisionInput
    threadsOnVision: ThreadsOnVisionCreateNestedManyWithoutVisionInput
    thumbnail: String
    title: String!
    updatedAt: DateTime
}

input VisionCreateManyAuthorInput {
    activityDate: DateTime
    createdAt: DateTime
    description: String
    draftMode: Boolean
    id: String
    premiseId: String!
    prevVisionId: String
    referenceId: String
    thumbnail: String
    title: String!
    updatedAt: DateTime
}

input VisionCreateManyAuthorInputEnvelope {
    data: [VisionCreateManyAuthorInput!]!
    skipDuplicates: Boolean
}

input VisionCreateManyInput {
    activityDate: DateTime
    authorId: String
    createdAt: DateTime
    description: String
    draftMode: Boolean
    id: String
    premiseId: String!
    prevVisionId: String
    referenceId: String
    thumbnail: String
    title: String!
    updatedAt: DateTime
}

input VisionCreateManyPremiseInput {
    activityDate: DateTime
    authorId: String
    createdAt: DateTime
    description: String
    draftMode: Boolean
    id: String
    prevVisionId: String
    referenceId: String
    thumbnail: String
    title: String!
    updatedAt: DateTime
}

input VisionCreateManyPremiseInputEnvelope {
    data: [VisionCreateManyPremiseInput!]!
    skipDuplicates: Boolean
}

input VisionCreateManyPrevVisionInput {
    activityDate: DateTime
    authorId: String
    createdAt: DateTime
    description: String
    draftMode: Boolean
    id: String
    premiseId: String!
    referenceId: String
    thumbnail: String
    title: String!
    updatedAt: DateTime
}

input VisionCreateManyPrevVisionInputEnvelope {
    data: [VisionCreateManyPrevVisionInput!]!
    skipDuplicates: Boolean
}

input VisionCreateManyReferenceInput {
    activityDate: DateTime
    authorId: String
    createdAt: DateTime
    description: String
    draftMode: Boolean
    id: String
    premiseId: String!
    prevVisionId: String
    thumbnail: String
    title: String!
    updatedAt: DateTime
}

input VisionCreateManyReferenceInputEnvelope {
    data: [VisionCreateManyReferenceInput!]!
    skipDuplicates: Boolean
}

input VisionCreateNestedManyWithoutAuthorInput {
    connect: [VisionWhereUniqueInput!]
    connectOrCreate: [VisionCreateOrConnectWithoutAuthorInput!]
    create: [VisionCreateWithoutAuthorInput!]
    createMany: VisionCreateManyAuthorInputEnvelope
}

input VisionCreateNestedManyWithoutPremiseInput {
    connect: [VisionWhereUniqueInput!]
    connectOrCreate: [VisionCreateOrConnectWithoutPremiseInput!]
    create: [VisionCreateWithoutPremiseInput!]
    createMany: VisionCreateManyPremiseInputEnvelope
}

input VisionCreateNestedManyWithoutPrevVisionInput {
    connect: [VisionWhereUniqueInput!]
    connectOrCreate: [VisionCreateOrConnectWithoutPrevVisionInput!]
    create: [VisionCreateWithoutPrevVisionInput!]
    createMany: VisionCreateManyPrevVisionInputEnvelope
}

input VisionCreateNestedManyWithoutReferenceInput {
    connect: [VisionWhereUniqueInput!]
    connectOrCreate: [VisionCreateOrConnectWithoutReferenceInput!]
    create: [VisionCreateWithoutReferenceInput!]
    createMany: VisionCreateManyReferenceInputEnvelope
}

input VisionCreateNestedOneWithoutMergeRequestInput {
    connect: VisionWhereUniqueInput
    connectOrCreate: VisionCreateOrConnectWithoutMergeRequestInput
    create: VisionCreateWithoutMergeRequestInput
}

input VisionCreateNestedOneWithoutNextVisionsInput {
    connect: VisionWhereUniqueInput
    connectOrCreate: VisionCreateOrConnectWithoutNextVisionsInput
    create: VisionCreateWithoutNextVisionsInput
}

input VisionCreateNestedOneWithoutReactionOnVisionInput {
    connect: VisionWhereUniqueInput
    connectOrCreate: VisionCreateOrConnectWithoutReactionOnVisionInput
    create: VisionCreateWithoutReactionOnVisionInput
}

input VisionCreateNestedOneWithoutThreadsOnVisionInput {
    connect: VisionWhereUniqueInput
    connectOrCreate: VisionCreateOrConnectWithoutThreadsOnVisionInput
    create: VisionCreateWithoutThreadsOnVisionInput
}

input VisionCreateOrConnectWithoutAuthorInput {
    create: VisionCreateWithoutAuthorInput!
    where: VisionWhereUniqueInput!
}

input VisionCreateOrConnectWithoutMergeRequestInput {
    create: VisionCreateWithoutMergeRequestInput!
    where: VisionWhereUniqueInput!
}

input VisionCreateOrConnectWithoutNextVisionsInput {
    create: VisionCreateWithoutNextVisionsInput!
    where: VisionWhereUniqueInput!
}

input VisionCreateOrConnectWithoutPremiseInput {
    create: VisionCreateWithoutPremiseInput!
    where: VisionWhereUniqueInput!
}

input VisionCreateOrConnectWithoutPrevVisionInput {
    create: VisionCreateWithoutPrevVisionInput!
    where: VisionWhereUniqueInput!
}

input VisionCreateOrConnectWithoutReactionOnVisionInput {
    create: VisionCreateWithoutReactionOnVisionInput!
    where: VisionWhereUniqueInput!
}

input VisionCreateOrConnectWithoutReferenceInput {
    create: VisionCreateWithoutReferenceInput!
    where: VisionWhereUniqueInput!
}

input VisionCreateOrConnectWithoutThreadsOnVisionInput {
    create: VisionCreateWithoutThreadsOnVisionInput!
    where: VisionWhereUniqueInput!
}

input VisionCreateWithoutAuthorInput {
    ReactionOnVision: ReactionOnVisionCreateNestedManyWithoutVisionInput
    activityDate: DateTime
    createdAt: DateTime
    description: String
    draftMode: Boolean
    id: String
    mergeRequest: MergeRequestCreateNestedOneWithoutVisionInput
    nextVisions: VisionCreateNestedManyWithoutPrevVisionInput
    premise: PremiseCreateNestedOneWithoutVisionInput!
    prevVision: VisionCreateNestedOneWithoutNextVisionsInput
    reference: ReferenceCreateNestedOneWithoutVisionInput
    threadsOnVision: ThreadsOnVisionCreateNestedManyWithoutVisionInput
    thumbnail: String
    title: String!
    updatedAt: DateTime
}

input VisionCreateWithoutMergeRequestInput {
    ReactionOnVision: ReactionOnVisionCreateNestedManyWithoutVisionInput
    activityDate: DateTime
    author: UserCreateNestedOneWithoutVisionsInput
    createdAt: DateTime
    description: String
    draftMode: Boolean
    id: String
    nextVisions: VisionCreateNestedManyWithoutPrevVisionInput
    premise: PremiseCreateNestedOneWithoutVisionInput!
    prevVision: VisionCreateNestedOneWithoutNextVisionsInput
    reference: ReferenceCreateNestedOneWithoutVisionInput
    threadsOnVision: ThreadsOnVisionCreateNestedManyWithoutVisionInput
    thumbnail: String
    title: String!
    updatedAt: DateTime
}

input VisionCreateWithoutNextVisionsInput {
    ReactionOnVision: ReactionOnVisionCreateNestedManyWithoutVisionInput
    activityDate: DateTime
    author: UserCreateNestedOneWithoutVisionsInput
    createdAt: DateTime
    description: String
    draftMode: Boolean
    id: String
    mergeRequest: MergeRequestCreateNestedOneWithoutVisionInput
    premise: PremiseCreateNestedOneWithoutVisionInput!
    prevVision: VisionCreateNestedOneWithoutNextVisionsInput
    reference: ReferenceCreateNestedOneWithoutVisionInput
    threadsOnVision: ThreadsOnVisionCreateNestedManyWithoutVisionInput
    thumbnail: String
    title: String!
    updatedAt: DateTime
}

input VisionCreateWithoutPremiseInput {
    ReactionOnVision: ReactionOnVisionCreateNestedManyWithoutVisionInput
    activityDate: DateTime
    author: UserCreateNestedOneWithoutVisionsInput
    createdAt: DateTime
    description: String
    draftMode: Boolean
    id: String
    mergeRequest: MergeRequestCreateNestedOneWithoutVisionInput
    nextVisions: VisionCreateNestedManyWithoutPrevVisionInput
    prevVision: VisionCreateNestedOneWithoutNextVisionsInput
    reference: ReferenceCreateNestedOneWithoutVisionInput
    threadsOnVision: ThreadsOnVisionCreateNestedManyWithoutVisionInput
    thumbnail: String
    title: String!
    updatedAt: DateTime
}

input VisionCreateWithoutPrevVisionInput {
    ReactionOnVision: ReactionOnVisionCreateNestedManyWithoutVisionInput
    activityDate: DateTime
    author: UserCreateNestedOneWithoutVisionsInput
    createdAt: DateTime
    description: String
    draftMode: Boolean
    id: String
    mergeRequest: MergeRequestCreateNestedOneWithoutVisionInput
    nextVisions: VisionCreateNestedManyWithoutPrevVisionInput
    premise: PremiseCreateNestedOneWithoutVisionInput!
    reference: ReferenceCreateNestedOneWithoutVisionInput
    threadsOnVision: ThreadsOnVisionCreateNestedManyWithoutVisionInput
    thumbnail: String
    title: String!
    updatedAt: DateTime
}

input VisionCreateWithoutReactionOnVisionInput {
    activityDate: DateTime
    author: UserCreateNestedOneWithoutVisionsInput
    createdAt: DateTime
    description: String
    draftMode: Boolean
    id: String
    mergeRequest: MergeRequestCreateNestedOneWithoutVisionInput
    nextVisions: VisionCreateNestedManyWithoutPrevVisionInput
    premise: PremiseCreateNestedOneWithoutVisionInput!
    prevVision: VisionCreateNestedOneWithoutNextVisionsInput
    reference: ReferenceCreateNestedOneWithoutVisionInput
    threadsOnVision: ThreadsOnVisionCreateNestedManyWithoutVisionInput
    thumbnail: String
    title: String!
    updatedAt: DateTime
}

input VisionCreateWithoutReferenceInput {
    ReactionOnVision: ReactionOnVisionCreateNestedManyWithoutVisionInput
    activityDate: DateTime
    author: UserCreateNestedOneWithoutVisionsInput
    createdAt: DateTime
    description: String
    draftMode: Boolean
    id: String
    mergeRequest: MergeRequestCreateNestedOneWithoutVisionInput
    nextVisions: VisionCreateNestedManyWithoutPrevVisionInput
    premise: PremiseCreateNestedOneWithoutVisionInput!
    prevVision: VisionCreateNestedOneWithoutNextVisionsInput
    threadsOnVision: ThreadsOnVisionCreateNestedManyWithoutVisionInput
    thumbnail: String
    title: String!
    updatedAt: DateTime
}

input VisionCreateWithoutThreadsOnVisionInput {
    ReactionOnVision: ReactionOnVisionCreateNestedManyWithoutVisionInput
    activityDate: DateTime
    author: UserCreateNestedOneWithoutVisionsInput
    createdAt: DateTime
    description: String
    draftMode: Boolean
    id: String
    mergeRequest: MergeRequestCreateNestedOneWithoutVisionInput
    nextVisions: VisionCreateNestedManyWithoutPrevVisionInput
    premise: PremiseCreateNestedOneWithoutVisionInput!
    prevVision: VisionCreateNestedOneWithoutNextVisionsInput
    reference: ReferenceCreateNestedOneWithoutVisionInput
    thumbnail: String
    title: String!
    updatedAt: DateTime
}

type VisionGroupBy {
    _count: VisionCountAggregate
    _max: VisionMaxAggregate
    _min: VisionMinAggregate
    activityDate: DateTime
    authorId: String
    createdAt: DateTime!
    description: String
    draftMode: Boolean!
    id: String!
    premiseId: String!
    prevVisionId: String
    referenceId: String
    thumbnail: String
    title: String!
    updatedAt: DateTime
}

input VisionListRelationFilter {
    every: VisionWhereInput
    none: VisionWhereInput
    some: VisionWhereInput
}

type VisionMaxAggregate {
    activityDate: DateTime
    authorId: String
    createdAt: DateTime
    description: String
    draftMode: Boolean
    id: String
    premiseId: String
    prevVisionId: String
    referenceId: String
    thumbnail: String
    title: String
    updatedAt: DateTime
}

input VisionMaxOrderByAggregateInput {
    activityDate: SortOrder
    authorId: SortOrder
    createdAt: SortOrder
    description: SortOrder
    draftMode: SortOrder
    id: SortOrder
    premiseId: SortOrder
    prevVisionId: SortOrder
    referenceId: SortOrder
    thumbnail: SortOrder
    title: SortOrder
    updatedAt: SortOrder
}

type VisionMinAggregate {
    activityDate: DateTime
    authorId: String
    createdAt: DateTime
    description: String
    draftMode: Boolean
    id: String
    premiseId: String
    prevVisionId: String
    referenceId: String
    thumbnail: String
    title: String
    updatedAt: DateTime
}

input VisionMinOrderByAggregateInput {
    activityDate: SortOrder
    authorId: SortOrder
    createdAt: SortOrder
    description: SortOrder
    draftMode: SortOrder
    id: SortOrder
    premiseId: SortOrder
    prevVisionId: SortOrder
    referenceId: SortOrder
    thumbnail: SortOrder
    title: SortOrder
    updatedAt: SortOrder
}

input VisionOrderByRelationAggregateInput {
    _count: SortOrder
}

input VisionOrderByWithAggregationInput {
    _count: VisionCountOrderByAggregateInput
    _max: VisionMaxOrderByAggregateInput
    _min: VisionMinOrderByAggregateInput
    activityDate: SortOrder
    authorId: SortOrder
    createdAt: SortOrder
    description: SortOrder
    draftMode: SortOrder
    id: SortOrder
    premiseId: SortOrder
    prevVisionId: SortOrder
    referenceId: SortOrder
    thumbnail: SortOrder
    title: SortOrder
    updatedAt: SortOrder
}

input VisionOrderByWithRelationInput {
    ReactionOnVision: ReactionOnVisionOrderByRelationAggregateInput
    activityDate: SortOrder
    author: UserOrderByWithRelationInput
    authorId: SortOrder
    createdAt: SortOrder
    description: SortOrder
    draftMode: SortOrder
    id: SortOrder
    mergeRequest: MergeRequestOrderByWithRelationInput
    nextVisions: VisionOrderByRelationAggregateInput
    premise: PremiseOrderByWithRelationInput
    premiseId: SortOrder
    prevVision: VisionOrderByWithRelationInput
    prevVisionId: SortOrder
    reference: ReferenceOrderByWithRelationInput
    referenceId: SortOrder
    threadsOnVision: ThreadsOnVisionOrderByRelationAggregateInput
    thumbnail: SortOrder
    title: SortOrder
    updatedAt: SortOrder
}

input VisionRelationFilter {
    is: VisionWhereInput
    isNot: VisionWhereInput
}

enum VisionScalarFieldEnum {
    activityDate
    authorId
    createdAt
    description
    draftMode
    id
    premiseId
    prevVisionId
    referenceId
    thumbnail
    title
    updatedAt
}

input VisionScalarWhereInput {
    AND: [VisionScalarWhereInput!]
    NOT: [VisionScalarWhereInput!]
    OR: [VisionScalarWhereInput!]
    activityDate: DateTimeNullableFilter
    authorId: StringNullableFilter
    createdAt: DateTimeFilter
    description: StringNullableFilter
    draftMode: BoolFilter
    id: StringFilter
    premiseId: StringFilter
    prevVisionId: StringNullableFilter
    referenceId: StringNullableFilter
    thumbnail: StringNullableFilter
    title: StringFilter
    updatedAt: DateTimeNullableFilter
}

input VisionScalarWhereWithAggregatesInput {
    AND: [VisionScalarWhereWithAggregatesInput!]
    NOT: [VisionScalarWhereWithAggregatesInput!]
    OR: [VisionScalarWhereWithAggregatesInput!]
    activityDate: DateTimeNullableWithAggregatesFilter
    authorId: StringNullableWithAggregatesFilter
    createdAt: DateTimeWithAggregatesFilter
    description: StringNullableWithAggregatesFilter
    draftMode: BoolWithAggregatesFilter
    id: StringWithAggregatesFilter
    premiseId: StringWithAggregatesFilter
    prevVisionId: StringNullableWithAggregatesFilter
    referenceId: StringNullableWithAggregatesFilter
    thumbnail: StringNullableWithAggregatesFilter
    title: StringWithAggregatesFilter
    updatedAt: DateTimeNullableWithAggregatesFilter
}

input VisionUpdateInput {
    ReactionOnVision: ReactionOnVisionUpdateManyWithoutVisionInput
    activityDate: NullableDateTimeFieldUpdateOperationsInput
    author: UserUpdateOneWithoutVisionsInput
    createdAt: DateTimeFieldUpdateOperationsInput
    description: NullableStringFieldUpdateOperationsInput
    draftMode: BoolFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    mergeRequest: MergeRequestUpdateOneWithoutVisionInput
    nextVisions: VisionUpdateManyWithoutPrevVisionInput
    premise: PremiseUpdateOneRequiredWithoutVisionInput
    prevVision: VisionUpdateOneWithoutNextVisionsInput
    reference: ReferenceUpdateOneWithoutVisionInput
    threadsOnVision: ThreadsOnVisionUpdateManyWithoutVisionInput
    thumbnail: NullableStringFieldUpdateOperationsInput
    title: StringFieldUpdateOperationsInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input VisionUpdateManyMutationInput {
    activityDate: NullableDateTimeFieldUpdateOperationsInput
    createdAt: DateTimeFieldUpdateOperationsInput
    description: NullableStringFieldUpdateOperationsInput
    draftMode: BoolFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    thumbnail: NullableStringFieldUpdateOperationsInput
    title: StringFieldUpdateOperationsInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input VisionUpdateManyWithWhereWithoutAuthorInput {
    data: VisionUpdateManyMutationInput!
    where: VisionScalarWhereInput!
}

input VisionUpdateManyWithWhereWithoutPremiseInput {
    data: VisionUpdateManyMutationInput!
    where: VisionScalarWhereInput!
}

input VisionUpdateManyWithWhereWithoutPrevVisionInput {
    data: VisionUpdateManyMutationInput!
    where: VisionScalarWhereInput!
}

input VisionUpdateManyWithWhereWithoutReferenceInput {
    data: VisionUpdateManyMutationInput!
    where: VisionScalarWhereInput!
}

input VisionUpdateManyWithoutAuthorInput {
    connect: [VisionWhereUniqueInput!]
    connectOrCreate: [VisionCreateOrConnectWithoutAuthorInput!]
    create: [VisionCreateWithoutAuthorInput!]
    createMany: VisionCreateManyAuthorInputEnvelope
    delete: [VisionWhereUniqueInput!]
    deleteMany: [VisionScalarWhereInput!]
    disconnect: [VisionWhereUniqueInput!]
    set: [VisionWhereUniqueInput!]
    update: [VisionUpdateWithWhereUniqueWithoutAuthorInput!]
    updateMany: [VisionUpdateManyWithWhereWithoutAuthorInput!]
    upsert: [VisionUpsertWithWhereUniqueWithoutAuthorInput!]
}

input VisionUpdateManyWithoutPremiseInput {
    connect: [VisionWhereUniqueInput!]
    connectOrCreate: [VisionCreateOrConnectWithoutPremiseInput!]
    create: [VisionCreateWithoutPremiseInput!]
    createMany: VisionCreateManyPremiseInputEnvelope
    delete: [VisionWhereUniqueInput!]
    deleteMany: [VisionScalarWhereInput!]
    disconnect: [VisionWhereUniqueInput!]
    set: [VisionWhereUniqueInput!]
    update: [VisionUpdateWithWhereUniqueWithoutPremiseInput!]
    updateMany: [VisionUpdateManyWithWhereWithoutPremiseInput!]
    upsert: [VisionUpsertWithWhereUniqueWithoutPremiseInput!]
}

input VisionUpdateManyWithoutPrevVisionInput {
    connect: [VisionWhereUniqueInput!]
    connectOrCreate: [VisionCreateOrConnectWithoutPrevVisionInput!]
    create: [VisionCreateWithoutPrevVisionInput!]
    createMany: VisionCreateManyPrevVisionInputEnvelope
    delete: [VisionWhereUniqueInput!]
    deleteMany: [VisionScalarWhereInput!]
    disconnect: [VisionWhereUniqueInput!]
    set: [VisionWhereUniqueInput!]
    update: [VisionUpdateWithWhereUniqueWithoutPrevVisionInput!]
    updateMany: [VisionUpdateManyWithWhereWithoutPrevVisionInput!]
    upsert: [VisionUpsertWithWhereUniqueWithoutPrevVisionInput!]
}

input VisionUpdateManyWithoutReferenceInput {
    connect: [VisionWhereUniqueInput!]
    connectOrCreate: [VisionCreateOrConnectWithoutReferenceInput!]
    create: [VisionCreateWithoutReferenceInput!]
    createMany: VisionCreateManyReferenceInputEnvelope
    delete: [VisionWhereUniqueInput!]
    deleteMany: [VisionScalarWhereInput!]
    disconnect: [VisionWhereUniqueInput!]
    set: [VisionWhereUniqueInput!]
    update: [VisionUpdateWithWhereUniqueWithoutReferenceInput!]
    updateMany: [VisionUpdateManyWithWhereWithoutReferenceInput!]
    upsert: [VisionUpsertWithWhereUniqueWithoutReferenceInput!]
}

input VisionUpdateOneRequiredWithoutMergeRequestInput {
    connect: VisionWhereUniqueInput
    connectOrCreate: VisionCreateOrConnectWithoutMergeRequestInput
    create: VisionCreateWithoutMergeRequestInput
    update: VisionUpdateWithoutMergeRequestInput
    upsert: VisionUpsertWithoutMergeRequestInput
}

input VisionUpdateOneRequiredWithoutReactionOnVisionInput {
    connect: VisionWhereUniqueInput
    connectOrCreate: VisionCreateOrConnectWithoutReactionOnVisionInput
    create: VisionCreateWithoutReactionOnVisionInput
    update: VisionUpdateWithoutReactionOnVisionInput
    upsert: VisionUpsertWithoutReactionOnVisionInput
}

input VisionUpdateOneRequiredWithoutThreadsOnVisionInput {
    connect: VisionWhereUniqueInput
    connectOrCreate: VisionCreateOrConnectWithoutThreadsOnVisionInput
    create: VisionCreateWithoutThreadsOnVisionInput
    update: VisionUpdateWithoutThreadsOnVisionInput
    upsert: VisionUpsertWithoutThreadsOnVisionInput
}

input VisionUpdateOneWithoutNextVisionsInput {
    connect: VisionWhereUniqueInput
    connectOrCreate: VisionCreateOrConnectWithoutNextVisionsInput
    create: VisionCreateWithoutNextVisionsInput
    delete: Boolean
    disconnect: Boolean
    update: VisionUpdateWithoutNextVisionsInput
    upsert: VisionUpsertWithoutNextVisionsInput
}

input VisionUpdateWithWhereUniqueWithoutAuthorInput {
    data: VisionUpdateWithoutAuthorInput!
    where: VisionWhereUniqueInput!
}

input VisionUpdateWithWhereUniqueWithoutPremiseInput {
    data: VisionUpdateWithoutPremiseInput!
    where: VisionWhereUniqueInput!
}

input VisionUpdateWithWhereUniqueWithoutPrevVisionInput {
    data: VisionUpdateWithoutPrevVisionInput!
    where: VisionWhereUniqueInput!
}

input VisionUpdateWithWhereUniqueWithoutReferenceInput {
    data: VisionUpdateWithoutReferenceInput!
    where: VisionWhereUniqueInput!
}

input VisionUpdateWithoutAuthorInput {
    ReactionOnVision: ReactionOnVisionUpdateManyWithoutVisionInput
    activityDate: NullableDateTimeFieldUpdateOperationsInput
    createdAt: DateTimeFieldUpdateOperationsInput
    description: NullableStringFieldUpdateOperationsInput
    draftMode: BoolFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    mergeRequest: MergeRequestUpdateOneWithoutVisionInput
    nextVisions: VisionUpdateManyWithoutPrevVisionInput
    premise: PremiseUpdateOneRequiredWithoutVisionInput
    prevVision: VisionUpdateOneWithoutNextVisionsInput
    reference: ReferenceUpdateOneWithoutVisionInput
    threadsOnVision: ThreadsOnVisionUpdateManyWithoutVisionInput
    thumbnail: NullableStringFieldUpdateOperationsInput
    title: StringFieldUpdateOperationsInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input VisionUpdateWithoutMergeRequestInput {
    ReactionOnVision: ReactionOnVisionUpdateManyWithoutVisionInput
    activityDate: NullableDateTimeFieldUpdateOperationsInput
    author: UserUpdateOneWithoutVisionsInput
    createdAt: DateTimeFieldUpdateOperationsInput
    description: NullableStringFieldUpdateOperationsInput
    draftMode: BoolFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    nextVisions: VisionUpdateManyWithoutPrevVisionInput
    premise: PremiseUpdateOneRequiredWithoutVisionInput
    prevVision: VisionUpdateOneWithoutNextVisionsInput
    reference: ReferenceUpdateOneWithoutVisionInput
    threadsOnVision: ThreadsOnVisionUpdateManyWithoutVisionInput
    thumbnail: NullableStringFieldUpdateOperationsInput
    title: StringFieldUpdateOperationsInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input VisionUpdateWithoutNextVisionsInput {
    ReactionOnVision: ReactionOnVisionUpdateManyWithoutVisionInput
    activityDate: NullableDateTimeFieldUpdateOperationsInput
    author: UserUpdateOneWithoutVisionsInput
    createdAt: DateTimeFieldUpdateOperationsInput
    description: NullableStringFieldUpdateOperationsInput
    draftMode: BoolFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    mergeRequest: MergeRequestUpdateOneWithoutVisionInput
    premise: PremiseUpdateOneRequiredWithoutVisionInput
    prevVision: VisionUpdateOneWithoutNextVisionsInput
    reference: ReferenceUpdateOneWithoutVisionInput
    threadsOnVision: ThreadsOnVisionUpdateManyWithoutVisionInput
    thumbnail: NullableStringFieldUpdateOperationsInput
    title: StringFieldUpdateOperationsInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input VisionUpdateWithoutPremiseInput {
    ReactionOnVision: ReactionOnVisionUpdateManyWithoutVisionInput
    activityDate: NullableDateTimeFieldUpdateOperationsInput
    author: UserUpdateOneWithoutVisionsInput
    createdAt: DateTimeFieldUpdateOperationsInput
    description: NullableStringFieldUpdateOperationsInput
    draftMode: BoolFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    mergeRequest: MergeRequestUpdateOneWithoutVisionInput
    nextVisions: VisionUpdateManyWithoutPrevVisionInput
    prevVision: VisionUpdateOneWithoutNextVisionsInput
    reference: ReferenceUpdateOneWithoutVisionInput
    threadsOnVision: ThreadsOnVisionUpdateManyWithoutVisionInput
    thumbnail: NullableStringFieldUpdateOperationsInput
    title: StringFieldUpdateOperationsInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input VisionUpdateWithoutPrevVisionInput {
    ReactionOnVision: ReactionOnVisionUpdateManyWithoutVisionInput
    activityDate: NullableDateTimeFieldUpdateOperationsInput
    author: UserUpdateOneWithoutVisionsInput
    createdAt: DateTimeFieldUpdateOperationsInput
    description: NullableStringFieldUpdateOperationsInput
    draftMode: BoolFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    mergeRequest: MergeRequestUpdateOneWithoutVisionInput
    nextVisions: VisionUpdateManyWithoutPrevVisionInput
    premise: PremiseUpdateOneRequiredWithoutVisionInput
    reference: ReferenceUpdateOneWithoutVisionInput
    threadsOnVision: ThreadsOnVisionUpdateManyWithoutVisionInput
    thumbnail: NullableStringFieldUpdateOperationsInput
    title: StringFieldUpdateOperationsInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input VisionUpdateWithoutReactionOnVisionInput {
    activityDate: NullableDateTimeFieldUpdateOperationsInput
    author: UserUpdateOneWithoutVisionsInput
    createdAt: DateTimeFieldUpdateOperationsInput
    description: NullableStringFieldUpdateOperationsInput
    draftMode: BoolFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    mergeRequest: MergeRequestUpdateOneWithoutVisionInput
    nextVisions: VisionUpdateManyWithoutPrevVisionInput
    premise: PremiseUpdateOneRequiredWithoutVisionInput
    prevVision: VisionUpdateOneWithoutNextVisionsInput
    reference: ReferenceUpdateOneWithoutVisionInput
    threadsOnVision: ThreadsOnVisionUpdateManyWithoutVisionInput
    thumbnail: NullableStringFieldUpdateOperationsInput
    title: StringFieldUpdateOperationsInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input VisionUpdateWithoutReferenceInput {
    ReactionOnVision: ReactionOnVisionUpdateManyWithoutVisionInput
    activityDate: NullableDateTimeFieldUpdateOperationsInput
    author: UserUpdateOneWithoutVisionsInput
    createdAt: DateTimeFieldUpdateOperationsInput
    description: NullableStringFieldUpdateOperationsInput
    draftMode: BoolFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    mergeRequest: MergeRequestUpdateOneWithoutVisionInput
    nextVisions: VisionUpdateManyWithoutPrevVisionInput
    premise: PremiseUpdateOneRequiredWithoutVisionInput
    prevVision: VisionUpdateOneWithoutNextVisionsInput
    threadsOnVision: ThreadsOnVisionUpdateManyWithoutVisionInput
    thumbnail: NullableStringFieldUpdateOperationsInput
    title: StringFieldUpdateOperationsInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input VisionUpdateWithoutThreadsOnVisionInput {
    ReactionOnVision: ReactionOnVisionUpdateManyWithoutVisionInput
    activityDate: NullableDateTimeFieldUpdateOperationsInput
    author: UserUpdateOneWithoutVisionsInput
    createdAt: DateTimeFieldUpdateOperationsInput
    description: NullableStringFieldUpdateOperationsInput
    draftMode: BoolFieldUpdateOperationsInput
    id: StringFieldUpdateOperationsInput
    mergeRequest: MergeRequestUpdateOneWithoutVisionInput
    nextVisions: VisionUpdateManyWithoutPrevVisionInput
    premise: PremiseUpdateOneRequiredWithoutVisionInput
    prevVision: VisionUpdateOneWithoutNextVisionsInput
    reference: ReferenceUpdateOneWithoutVisionInput
    thumbnail: NullableStringFieldUpdateOperationsInput
    title: StringFieldUpdateOperationsInput
    updatedAt: NullableDateTimeFieldUpdateOperationsInput
}

input VisionUpsertWithWhereUniqueWithoutAuthorInput {
    create: VisionCreateWithoutAuthorInput!
    update: VisionUpdateWithoutAuthorInput!
    where: VisionWhereUniqueInput!
}

input VisionUpsertWithWhereUniqueWithoutPremiseInput {
    create: VisionCreateWithoutPremiseInput!
    update: VisionUpdateWithoutPremiseInput!
    where: VisionWhereUniqueInput!
}

input VisionUpsertWithWhereUniqueWithoutPrevVisionInput {
    create: VisionCreateWithoutPrevVisionInput!
    update: VisionUpdateWithoutPrevVisionInput!
    where: VisionWhereUniqueInput!
}

input VisionUpsertWithWhereUniqueWithoutReferenceInput {
    create: VisionCreateWithoutReferenceInput!
    update: VisionUpdateWithoutReferenceInput!
    where: VisionWhereUniqueInput!
}

input VisionUpsertWithoutMergeRequestInput {
    create: VisionCreateWithoutMergeRequestInput!
    update: VisionUpdateWithoutMergeRequestInput!
}

input VisionUpsertWithoutNextVisionsInput {
    create: VisionCreateWithoutNextVisionsInput!
    update: VisionUpdateWithoutNextVisionsInput!
}

input VisionUpsertWithoutReactionOnVisionInput {
    create: VisionCreateWithoutReactionOnVisionInput!
    update: VisionUpdateWithoutReactionOnVisionInput!
}

input VisionUpsertWithoutThreadsOnVisionInput {
    create: VisionCreateWithoutThreadsOnVisionInput!
    update: VisionUpdateWithoutThreadsOnVisionInput!
}

input VisionWhereInput {
    AND: [VisionWhereInput!]
    NOT: [VisionWhereInput!]
    OR: [VisionWhereInput!]
    ReactionOnVision: ReactionOnVisionListRelationFilter
    activityDate: DateTimeNullableFilter
    author: UserRelationFilter
    authorId: StringNullableFilter
    createdAt: DateTimeFilter
    description: StringNullableFilter
    draftMode: BoolFilter
    id: StringFilter
    mergeRequest: MergeRequestRelationFilter
    nextVisions: VisionListRelationFilter
    premise: PremiseRelationFilter
    premiseId: StringFilter
    prevVision: VisionRelationFilter
    prevVisionId: StringNullableFilter
    reference: ReferenceRelationFilter
    referenceId: StringNullableFilter
    threadsOnVision: ThreadsOnVisionListRelationFilter
    thumbnail: StringNullableFilter
    title: StringFilter
    updatedAt: DateTimeNullableFilter
}

input VisionWhereUniqueInput {
    id: String
}
